Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> translation_unit_or_empty
Rule 1     translation_unit_or_empty -> translation_unit
Rule 2     translation_unit_or_empty -> empty
Rule 3     translation_unit -> translation_unit external_declaration
Rule 4     translation_unit -> external_declaration
Rule 5     initializer -> assignment_expression
Rule 6     initializer -> { initializer_list_orempty }
Rule 7     initializer -> { initializer_list , }
Rule 8     initializer_list -> initializer
Rule 9     initializer_list -> initializer_list , initializer
Rule 10    init_declarator -> declarator
Rule 11    init_declarator -> declarator = initializer
Rule 12    init_declarator_list -> init_declarator
Rule 13    init_declarator_list -> init_declarator_list , init_declarator
Rule 14    declaration_specifiers_orempty -> empty
Rule 15    declaration_specifiers_orempty -> declaration_specifiers
Rule 16    empty -> <empty>
Rule 17    declaration_specifiers -> type_specifier declaration_specifiers_orempty
Rule 18    type_specifier -> VOID
Rule 19    type_specifier -> CHAR
Rule 20    type_specifier -> SHORT
Rule 21    type_specifier -> INT
Rule 22    type_specifier -> LONG
Rule 23    type_specifier -> FLOAT
Rule 24    type_specifier -> DOUBLE
Rule 25    type_specifier -> SIGNED
Rule 26    type_specifier -> UNSIGNED
Rule 27    type_specifier -> BOOL
Rule 28    type_specifier -> struct_specifier
Rule 29    declaration_list_orempty -> empty
Rule 30    declaration_list_orempty -> declaration_list
Rule 31    declaration -> declaration_specifiers init_declarator_list_orempty ;
Rule 32    declaration_list -> declaration
Rule 33    declaration_list -> declaration_list declaration
Rule 34    identifier_list_orempty -> empty
Rule 35    identifier_list_orempty -> identifier_list
Rule 36    identifier_list -> identifier
Rule 37    identifier_list -> identifier_list , identifier
Rule 38    identifier -> IDENTIFIER
Rule 39    jump_statement -> BREAK ;
Rule 40    jump_statement -> CONTINUE ;
Rule 41    jump_statement -> RETURN ;
Rule 42    jump_statement -> RETURN expression ;
Rule 43    init_declarator_list_orempty -> empty
Rule 44    init_declarator_list_orempty -> init_declarator_list
Rule 45    assignment_expression_orempty -> empty
Rule 46    assignment_expression_orempty -> assignment_expression
Rule 47    assignment_operator -> =
Rule 48    assignment_operator -> MUL_ASSIGN
Rule 49    assignment_operator -> DIV_ASSIGN
Rule 50    assignment_operator -> MOD_ASSIGN
Rule 51    assignment_operator -> ADD_ASSIGN
Rule 52    assignment_operator -> SUB_ASSIGN
Rule 53    assignment_operator -> LEFT_ASSIGN
Rule 54    assignment_operator -> RIGHT_ASSIGN
Rule 55    assignment_operator -> AND_ASSIGN
Rule 56    assignment_operator -> XOR_ASSIGN
Rule 57    assignment_operator -> OR_ASSIGN
Rule 58    argument_expression_list -> assignment_expression
Rule 59    argument_expression_list -> argument_expression_list , assignment_expression
Rule 60    assignment_expression -> conditional_expression
Rule 61    assignment_expression -> unary_expression assignment_operator assignment_expression
Rule 62    block_item_list_orempty -> empty
Rule 63    block_item_list_orempty -> block_item_list
Rule 64    constant_expression_orempty -> empty
Rule 65    constant_expression_orempty -> constant_expression
Rule 66    specifier_qualifier_list_orempty -> empty
Rule 67    specifier_qualifier_list_orempty -> specifier_qualifier_list
Rule 68    block_item -> declaration
Rule 69    block_item -> statement
Rule 70    block_item_list -> block_item
Rule 71    block_item_list -> block_item_list block_item
Rule 72    expression_orempty -> empty
Rule 73    expression_orempty -> expression
Rule 74    compound_statement -> { block_item_list_orempty }
Rule 75    conditional_expression -> binary_expression
Rule 76    constant -> INTEGER_CONSTANT
Rule 77    constant -> CHAR_CONSTANT
Rule 78    constant -> FLOAT_CONSTANT
Rule 79    constant -> BOOL_CONSTANT
Rule 80    constant_expression -> conditional_expression
Rule 81    declarator -> direct_declarator
Rule 82    declarator -> pointer direct_declarator
Rule 83    specifier_qualifier_list -> type_specifier specifier_qualifier_list_orempty
Rule 84    direct_declarator -> identifier
Rule 85    direct_declarator -> direct_declarator [ assignment_expression_orempty ]
Rule 86    direct_declarator -> direct_declarator ( parameter_list )
Rule 87    direct_declarator -> direct_declarator ( identifier_list_orempty )
Rule 88    external_declaration -> function_definition
Rule 89    external_declaration -> declaration
Rule 90    expression -> assignment_expression
Rule 91    expression -> expression , assignment_expression
Rule 92    expression_statement -> expression_orempty ;
Rule 93    function_definition -> declaration_specifiers declarator declaration_list_orempty compound_statement
Rule 94    parameter_list -> parameter_declaration
Rule 95    parameter_list -> parameter_list , parameter_declaration
Rule 96    parameter_declaration -> declaration_specifiers declarator
Rule 97    postfix_expression -> primary_expression
Rule 98    postfix_expression -> postfix_expression [ expression ]
Rule 99    postfix_expression -> postfix_expression ( argument_expression_list )
Rule 100   postfix_expression -> postfix_expression ( )
Rule 101   postfix_expression -> postfix_expression PTR_OP identifier
Rule 102   primary_expression -> identifier
Rule 103   primary_expression -> constant
Rule 104   primary_expression -> unified_string_literal
Rule 105   primary_expression -> ( expression )
Rule 106   selection_statement -> IF ( expression ) statement
Rule 107   selection_statement -> IF ( expression ) statement ELSE statement
Rule 108   iteration_statement -> WHILE ( expression ) statement
Rule 109   statement -> compound_statement
Rule 110   statement -> selection_statement
Rule 111   statement -> expression_statement
Rule 112   statement -> iteration_statement
Rule 113   statement -> jump_statement
Rule 114   struct_specifier -> STRUCT identifier
Rule 115   struct_specifier -> STRUCT { struct_declaration_list }
Rule 116   initializer_list_orempty -> empty
Rule 117   initializer_list_orempty -> initializer_list
Rule 118   struct_specifier -> STRUCT identifier { struct_declaration_list }
Rule 119   struct_declaration_list -> struct_declaration
Rule 120   struct_declaration_list -> struct_declaration_list struct_declaration
Rule 121   struct_declaration -> specifier_qualifier_list struct_declarator_list ;
Rule 122   struct_declarator_list -> declarator
Rule 123   struct_declarator_list -> struct_declarator_list , declarator
Rule 124   pointer -> *
Rule 125   pointer -> * pointer
Rule 126   unary_operator -> &
Rule 127   unary_operator -> *
Rule 128   unary_operator -> +
Rule 129   unary_operator -> -
Rule 130   unary_operator -> ~
Rule 131   unary_operator -> !
Rule 132   unary_expression -> postfix_expression
Rule 133   unary_expression -> unary_operator cast_expression
Rule 134   unified_string_literal -> STRING_CONSTANT
Rule 135   unified_string_literal -> unified_string_literal STRING_CONSTANT
Rule 136   binary_expression -> cast_expression
Rule 137   binary_expression -> binary_expression * binary_expression
Rule 138   binary_expression -> binary_expression / binary_expression
Rule 139   binary_expression -> binary_expression % binary_expression
Rule 140   binary_expression -> binary_expression + binary_expression
Rule 141   binary_expression -> binary_expression - binary_expression
Rule 142   binary_expression -> binary_expression RIGHT_OP binary_expression
Rule 143   binary_expression -> binary_expression LEFT_OP binary_expression
Rule 144   binary_expression -> binary_expression < binary_expression
Rule 145   binary_expression -> binary_expression LTE binary_expression
Rule 146   binary_expression -> binary_expression GTE binary_expression
Rule 147   binary_expression -> binary_expression > binary_expression
Rule 148   binary_expression -> binary_expression EQ_OP binary_expression
Rule 149   binary_expression -> binary_expression NEQ_OP binary_expression
Rule 150   binary_expression -> binary_expression & binary_expression
Rule 151   binary_expression -> binary_expression | binary_expression
Rule 152   binary_expression -> binary_expression ^ binary_expression
Rule 153   binary_expression -> binary_expression AND_OP binary_expression
Rule 154   binary_expression -> binary_expression OR_OP binary_expression
Rule 155   cast_expression -> unary_expression
Rule 156   cpp_advanced -> ASM
Rule 157   cpp_advanced -> BUILT_IN_FUNCTION
Rule 158   cpp_advanced -> CATCH
Rule 159   cpp_advanced -> CLASS
Rule 160   cpp_advanced -> COMMENT1
Rule 161   cpp_advanced -> COMMENT2
Rule 162   cpp_advanced -> CONST_CAST
Rule 163   cpp_advanced -> DELETE
Rule 164   cpp_advanced -> DYNAMIC_CAST
Rule 165   cpp_advanced -> EXPLICIT
Rule 166   cpp_advanced -> EXPORT
Rule 167   cpp_advanced -> FRIEND
Rule 168   cpp_advanced -> MUTABLE
Rule 169   cpp_advanced -> NAMESPACE
Rule 170   cpp_advanced -> NEW
Rule 171   cpp_advanced -> OPERATOR
Rule 172   cpp_advanced -> PRIVATE
Rule 173   cpp_advanced -> PROTECTED
Rule 174   cpp_advanced -> PUBLIC
Rule 175   cpp_advanced -> REINTERPRET_CAST
Rule 176   cpp_advanced -> STATIC_CAST
Rule 177   cpp_advanced -> TEMPLATE
Rule 178   cpp_advanced -> THIS
Rule 179   cpp_advanced -> THROW
Rule 180   cpp_advanced -> TRY
Rule 181   cpp_advanced -> TYPEID
Rule 182   cpp_advanced -> TYPENAME
Rule 183   cpp_advanced -> USING
Rule 184   cpp_advanced -> VIRTUAL
Rule 185   cpp_advanced -> AUTO
Rule 186   cpp_advanced -> CONST
Rule 187   cpp_advanced -> DO
Rule 188   cpp_advanced -> ENUM
Rule 189   cpp_advanced -> EXTERN
Rule 190   cpp_advanced -> FOR
Rule 191   cpp_advanced -> STATIC
Rule 192   cpp_advanced -> SIZEOF
Rule 193   cpp_advanced -> UNION
Rule 194   cpp_advanced -> VOLATILE
Rule 195   cpp_advanced -> RESTRICT
Rule 196   cpp_advanced -> REGISTER
Rule 197   cpp_advanced -> INLINE
Rule 198   cpp_advanced -> GOTO
Rule 199   cpp_advanced -> TYPEDEF
Rule 200   cpp_advanced -> SWITCH
Rule 201   cpp_advanced -> CASE
Rule 202   cpp_advanced -> INC_OP
Rule 203   cpp_advanced -> DEC_OP
Rule 204   cpp_advanced -> DEFAULT

Terminals, with rules where they appear

!                    : 131
%                    : 139
&                    : 126 150
(                    : 86 87 99 100 105 106 107 108
)                    : 86 87 99 100 105 106 107 108
*                    : 124 125 127 137
+                    : 128 140
,                    : 7 9 13 37 59 91 95 123
-                    : 129 141
/                    : 138
;                    : 31 39 40 41 42 92 121
<                    : 144
=                    : 11 47
>                    : 147
ADD_ASSIGN           : 51
AND_ASSIGN           : 55
AND_OP               : 153
ASM                  : 156
AUTO                 : 185
BOOL                 : 27
BOOL_CONSTANT        : 79
BREAK                : 39
BUILT_IN_FUNCTION    : 157
CASE                 : 201
CATCH                : 158
CHAR                 : 19
CHAR_CONSTANT        : 77
CLASS                : 159
COMMENT1             : 160
COMMENT2             : 161
CONST                : 186
CONST_CAST           : 162
CONTINUE             : 40
DEC_OP               : 203
DEFAULT              : 204
DELETE               : 163
DIV_ASSIGN           : 49
DO                   : 187
DOUBLE               : 24
DYNAMIC_CAST         : 164
ELSE                 : 107
ENUM                 : 188
EQ_OP                : 148
EXPLICIT             : 165
EXPORT               : 166
EXTERN               : 189
FLOAT                : 23
FLOAT_CONSTANT       : 78
FOR                  : 190
FRIEND               : 167
GOTO                 : 198
GTE                  : 146
IDENTIFIER           : 38
IF                   : 106 107
INC_OP               : 202
INLINE               : 197
INT                  : 21
INTEGER_CONSTANT     : 76
LEFT_ASSIGN          : 53
LEFT_OP              : 143
LONG                 : 22
LTE                  : 145
MOD_ASSIGN           : 50
MUL_ASSIGN           : 48
MUTABLE              : 168
NAMESPACE            : 169
NEQ_OP               : 149
NEW                  : 170
OPERATOR             : 171
OR_ASSIGN            : 57
OR_OP                : 154
PRIVATE              : 172
PROTECTED            : 173
PTR_OP               : 101
PUBLIC               : 174
REGISTER             : 196
REINTERPRET_CAST     : 175
RESTRICT             : 195
RETURN               : 41 42
RIGHT_ASSIGN         : 54
RIGHT_OP             : 142
SHORT                : 20
SIGNED               : 25
SIZEOF               : 192
STATIC               : 191
STATIC_CAST          : 176
STRING_CONSTANT      : 134 135
STRUCT               : 114 115 118
SUB_ASSIGN           : 52
SWITCH               : 200
TEMPLATE             : 177
THIS                 : 178
THROW                : 179
TRY                  : 180
TYPEDEF              : 199
TYPEID               : 181
TYPENAME             : 182
UNION                : 193
UNSIGNED             : 26
USING                : 183
VIRTUAL              : 184
VOID                 : 18
VOLATILE             : 194
WHILE                : 108
XOR_ASSIGN           : 56
[                    : 85 98
]                    : 85 98
^                    : 152
error                : 
{                    : 6 7 74 115 118
|                    : 151
}                    : 6 7 74 115 118
~                    : 130

Nonterminals, with rules where they appear

argument_expression_list : 59 99
assignment_expression : 5 46 58 59 61 90 91
assignment_expression_orempty : 85
assignment_operator  : 61
binary_expression    : 75 137 137 138 138 139 139 140 140 141 141 142 142 143 143 144 144 145 145 146 146 147 147 148 148 149 149 150 150 151 151 152 152 153 153 154 154
block_item           : 70 71
block_item_list      : 63 71
block_item_list_orempty : 74
cast_expression      : 133 136
compound_statement   : 93 109
conditional_expression : 60 80
constant             : 103
constant_expression  : 65
constant_expression_orempty : 
cpp_advanced         : 
declaration          : 32 33 68 89
declaration_list     : 30 33
declaration_list_orempty : 93
declaration_specifiers : 15 31 93 96
declaration_specifiers_orempty : 17
declarator           : 10 11 93 96 122 123
direct_declarator    : 81 82 85 86 87
empty                : 2 14 29 34 43 45 62 64 66 72 116
expression           : 42 73 91 98 105 106 107 108
expression_orempty   : 92
expression_statement : 111
external_declaration : 3 4
function_definition  : 88
identifier           : 36 37 84 101 102 114 118
identifier_list      : 35 37
identifier_list_orempty : 87
init_declarator      : 12 13
init_declarator_list : 13 44
init_declarator_list_orempty : 31
initializer          : 8 9 11
initializer_list     : 7 9 117
initializer_list_orempty : 6
iteration_statement  : 112
jump_statement       : 113
parameter_declaration : 94 95
parameter_list       : 86 95
pointer              : 82 125
postfix_expression   : 98 99 100 101 132
primary_expression   : 97
selection_statement  : 110
specifier_qualifier_list : 67 121
specifier_qualifier_list_orempty : 83
statement            : 69 106 107 107 108
struct_declaration   : 119 120
struct_declaration_list : 115 118 120
struct_declarator_list : 121 123
struct_specifier     : 28
translation_unit     : 1 3
translation_unit_or_empty : 0
type_specifier       : 17 83
unary_expression     : 61 155
unary_operator       : 133
unified_string_literal : 104 135

Parsing method: LALR

state 0

    (0) S' -> . translation_unit_or_empty
    (1) translation_unit_or_empty -> . translation_unit
    (2) translation_unit_or_empty -> . empty
    (3) translation_unit -> . translation_unit external_declaration
    (4) translation_unit -> . external_declaration
    (16) empty -> .
    (88) external_declaration -> . function_definition
    (89) external_declaration -> . declaration
    (93) function_definition -> . declaration_specifiers declarator declaration_list_orempty compound_statement
    (31) declaration -> . declaration_specifiers init_declarator_list_orempty ;
    (17) declaration_specifiers -> . type_specifier declaration_specifiers_orempty
    (18) type_specifier -> . VOID
    (19) type_specifier -> . CHAR
    (20) type_specifier -> . SHORT
    (21) type_specifier -> . INT
    (22) type_specifier -> . LONG
    (23) type_specifier -> . FLOAT
    (24) type_specifier -> . DOUBLE
    (25) type_specifier -> . SIGNED
    (26) type_specifier -> . UNSIGNED
    (27) type_specifier -> . BOOL
    (28) type_specifier -> . struct_specifier
    (114) struct_specifier -> . STRUCT identifier
    (115) struct_specifier -> . STRUCT { struct_declaration_list }
    (118) struct_specifier -> . STRUCT identifier { struct_declaration_list }

    $end            reduce using rule 16 (empty -> .)
    VOID            shift and go to state 9
    CHAR            shift and go to state 10
    SHORT           shift and go to state 11
    INT             shift and go to state 12
    LONG            shift and go to state 13
    FLOAT           shift and go to state 14
    DOUBLE          shift and go to state 15
    SIGNED          shift and go to state 16
    UNSIGNED        shift and go to state 17
    BOOL            shift and go to state 18
    STRUCT          shift and go to state 20

    translation_unit_or_empty      shift and go to state 1
    translation_unit               shift and go to state 2
    empty                          shift and go to state 3
    external_declaration           shift and go to state 4
    function_definition            shift and go to state 5
    declaration                    shift and go to state 6
    declaration_specifiers         shift and go to state 7
    type_specifier                 shift and go to state 8
    struct_specifier               shift and go to state 19

state 1

    (0) S' -> translation_unit_or_empty .



state 2

    (1) translation_unit_or_empty -> translation_unit .
    (3) translation_unit -> translation_unit . external_declaration
    (88) external_declaration -> . function_definition
    (89) external_declaration -> . declaration
    (93) function_definition -> . declaration_specifiers declarator declaration_list_orempty compound_statement
    (31) declaration -> . declaration_specifiers init_declarator_list_orempty ;
    (17) declaration_specifiers -> . type_specifier declaration_specifiers_orempty
    (18) type_specifier -> . VOID
    (19) type_specifier -> . CHAR
    (20) type_specifier -> . SHORT
    (21) type_specifier -> . INT
    (22) type_specifier -> . LONG
    (23) type_specifier -> . FLOAT
    (24) type_specifier -> . DOUBLE
    (25) type_specifier -> . SIGNED
    (26) type_specifier -> . UNSIGNED
    (27) type_specifier -> . BOOL
    (28) type_specifier -> . struct_specifier
    (114) struct_specifier -> . STRUCT identifier
    (115) struct_specifier -> . STRUCT { struct_declaration_list }
    (118) struct_specifier -> . STRUCT identifier { struct_declaration_list }

    $end            reduce using rule 1 (translation_unit_or_empty -> translation_unit .)
    VOID            shift and go to state 9
    CHAR            shift and go to state 10
    SHORT           shift and go to state 11
    INT             shift and go to state 12
    LONG            shift and go to state 13
    FLOAT           shift and go to state 14
    DOUBLE          shift and go to state 15
    SIGNED          shift and go to state 16
    UNSIGNED        shift and go to state 17
    BOOL            shift and go to state 18
    STRUCT          shift and go to state 20

    external_declaration           shift and go to state 21
    function_definition            shift and go to state 5
    declaration                    shift and go to state 6
    declaration_specifiers         shift and go to state 7
    type_specifier                 shift and go to state 8
    struct_specifier               shift and go to state 19

state 3

    (2) translation_unit_or_empty -> empty .

    $end            reduce using rule 2 (translation_unit_or_empty -> empty .)


state 4

    (4) translation_unit -> external_declaration .

    VOID            reduce using rule 4 (translation_unit -> external_declaration .)
    CHAR            reduce using rule 4 (translation_unit -> external_declaration .)
    SHORT           reduce using rule 4 (translation_unit -> external_declaration .)
    INT             reduce using rule 4 (translation_unit -> external_declaration .)
    LONG            reduce using rule 4 (translation_unit -> external_declaration .)
    FLOAT           reduce using rule 4 (translation_unit -> external_declaration .)
    DOUBLE          reduce using rule 4 (translation_unit -> external_declaration .)
    SIGNED          reduce using rule 4 (translation_unit -> external_declaration .)
    UNSIGNED        reduce using rule 4 (translation_unit -> external_declaration .)
    BOOL            reduce using rule 4 (translation_unit -> external_declaration .)
    STRUCT          reduce using rule 4 (translation_unit -> external_declaration .)
    $end            reduce using rule 4 (translation_unit -> external_declaration .)


state 5

    (88) external_declaration -> function_definition .

    VOID            reduce using rule 88 (external_declaration -> function_definition .)
    CHAR            reduce using rule 88 (external_declaration -> function_definition .)
    SHORT           reduce using rule 88 (external_declaration -> function_definition .)
    INT             reduce using rule 88 (external_declaration -> function_definition .)
    LONG            reduce using rule 88 (external_declaration -> function_definition .)
    FLOAT           reduce using rule 88 (external_declaration -> function_definition .)
    DOUBLE          reduce using rule 88 (external_declaration -> function_definition .)
    SIGNED          reduce using rule 88 (external_declaration -> function_definition .)
    UNSIGNED        reduce using rule 88 (external_declaration -> function_definition .)
    BOOL            reduce using rule 88 (external_declaration -> function_definition .)
    STRUCT          reduce using rule 88 (external_declaration -> function_definition .)
    $end            reduce using rule 88 (external_declaration -> function_definition .)


state 6

    (89) external_declaration -> declaration .

    VOID            reduce using rule 89 (external_declaration -> declaration .)
    CHAR            reduce using rule 89 (external_declaration -> declaration .)
    SHORT           reduce using rule 89 (external_declaration -> declaration .)
    INT             reduce using rule 89 (external_declaration -> declaration .)
    LONG            reduce using rule 89 (external_declaration -> declaration .)
    FLOAT           reduce using rule 89 (external_declaration -> declaration .)
    DOUBLE          reduce using rule 89 (external_declaration -> declaration .)
    SIGNED          reduce using rule 89 (external_declaration -> declaration .)
    UNSIGNED        reduce using rule 89 (external_declaration -> declaration .)
    BOOL            reduce using rule 89 (external_declaration -> declaration .)
    STRUCT          reduce using rule 89 (external_declaration -> declaration .)
    $end            reduce using rule 89 (external_declaration -> declaration .)


state 7

    (93) function_definition -> declaration_specifiers . declarator declaration_list_orempty compound_statement
    (31) declaration -> declaration_specifiers . init_declarator_list_orempty ;
    (81) declarator -> . direct_declarator
    (82) declarator -> . pointer direct_declarator
    (43) init_declarator_list_orempty -> . empty
    (44) init_declarator_list_orempty -> . init_declarator_list
    (84) direct_declarator -> . identifier
    (85) direct_declarator -> . direct_declarator [ assignment_expression_orempty ]
    (86) direct_declarator -> . direct_declarator ( parameter_list )
    (87) direct_declarator -> . direct_declarator ( identifier_list_orempty )
    (124) pointer -> . *
    (125) pointer -> . * pointer
    (16) empty -> .
    (12) init_declarator_list -> . init_declarator
    (13) init_declarator_list -> . init_declarator_list , init_declarator
    (38) identifier -> . IDENTIFIER
    (10) init_declarator -> . declarator
    (11) init_declarator -> . declarator = initializer

    *               shift and go to state 29
    ;               reduce using rule 16 (empty -> .)
    IDENTIFIER      shift and go to state 31

    declarator                     shift and go to state 22
    init_declarator_list_orempty   shift and go to state 23
    direct_declarator              shift and go to state 24
    pointer                        shift and go to state 25
    empty                          shift and go to state 26
    init_declarator_list           shift and go to state 27
    identifier                     shift and go to state 28
    init_declarator                shift and go to state 30

state 8

    (17) declaration_specifiers -> type_specifier . declaration_specifiers_orempty
    (14) declaration_specifiers_orempty -> . empty
    (15) declaration_specifiers_orempty -> . declaration_specifiers
    (16) empty -> .
    (17) declaration_specifiers -> . type_specifier declaration_specifiers_orempty
    (18) type_specifier -> . VOID
    (19) type_specifier -> . CHAR
    (20) type_specifier -> . SHORT
    (21) type_specifier -> . INT
    (22) type_specifier -> . LONG
    (23) type_specifier -> . FLOAT
    (24) type_specifier -> . DOUBLE
    (25) type_specifier -> . SIGNED
    (26) type_specifier -> . UNSIGNED
    (27) type_specifier -> . BOOL
    (28) type_specifier -> . struct_specifier
    (114) struct_specifier -> . STRUCT identifier
    (115) struct_specifier -> . STRUCT { struct_declaration_list }
    (118) struct_specifier -> . STRUCT identifier { struct_declaration_list }

    *               reduce using rule 16 (empty -> .)
    IDENTIFIER      reduce using rule 16 (empty -> .)
    ;               reduce using rule 16 (empty -> .)
    VOID            shift and go to state 9
    CHAR            shift and go to state 10
    SHORT           shift and go to state 11
    INT             shift and go to state 12
    LONG            shift and go to state 13
    FLOAT           shift and go to state 14
    DOUBLE          shift and go to state 15
    SIGNED          shift and go to state 16
    UNSIGNED        shift and go to state 17
    BOOL            shift and go to state 18
    STRUCT          shift and go to state 20

    type_specifier                 shift and go to state 8
    declaration_specifiers_orempty shift and go to state 32
    empty                          shift and go to state 33
    declaration_specifiers         shift and go to state 34
    struct_specifier               shift and go to state 19

state 9

    (18) type_specifier -> VOID .

    VOID            reduce using rule 18 (type_specifier -> VOID .)
    CHAR            reduce using rule 18 (type_specifier -> VOID .)
    SHORT           reduce using rule 18 (type_specifier -> VOID .)
    INT             reduce using rule 18 (type_specifier -> VOID .)
    LONG            reduce using rule 18 (type_specifier -> VOID .)
    FLOAT           reduce using rule 18 (type_specifier -> VOID .)
    DOUBLE          reduce using rule 18 (type_specifier -> VOID .)
    SIGNED          reduce using rule 18 (type_specifier -> VOID .)
    UNSIGNED        reduce using rule 18 (type_specifier -> VOID .)
    BOOL            reduce using rule 18 (type_specifier -> VOID .)
    STRUCT          reduce using rule 18 (type_specifier -> VOID .)
    *               reduce using rule 18 (type_specifier -> VOID .)
    IDENTIFIER      reduce using rule 18 (type_specifier -> VOID .)
    ;               reduce using rule 18 (type_specifier -> VOID .)


state 10

    (19) type_specifier -> CHAR .

    VOID            reduce using rule 19 (type_specifier -> CHAR .)
    CHAR            reduce using rule 19 (type_specifier -> CHAR .)
    SHORT           reduce using rule 19 (type_specifier -> CHAR .)
    INT             reduce using rule 19 (type_specifier -> CHAR .)
    LONG            reduce using rule 19 (type_specifier -> CHAR .)
    FLOAT           reduce using rule 19 (type_specifier -> CHAR .)
    DOUBLE          reduce using rule 19 (type_specifier -> CHAR .)
    SIGNED          reduce using rule 19 (type_specifier -> CHAR .)
    UNSIGNED        reduce using rule 19 (type_specifier -> CHAR .)
    BOOL            reduce using rule 19 (type_specifier -> CHAR .)
    STRUCT          reduce using rule 19 (type_specifier -> CHAR .)
    *               reduce using rule 19 (type_specifier -> CHAR .)
    IDENTIFIER      reduce using rule 19 (type_specifier -> CHAR .)
    ;               reduce using rule 19 (type_specifier -> CHAR .)


state 11

    (20) type_specifier -> SHORT .

    VOID            reduce using rule 20 (type_specifier -> SHORT .)
    CHAR            reduce using rule 20 (type_specifier -> SHORT .)
    SHORT           reduce using rule 20 (type_specifier -> SHORT .)
    INT             reduce using rule 20 (type_specifier -> SHORT .)
    LONG            reduce using rule 20 (type_specifier -> SHORT .)
    FLOAT           reduce using rule 20 (type_specifier -> SHORT .)
    DOUBLE          reduce using rule 20 (type_specifier -> SHORT .)
    SIGNED          reduce using rule 20 (type_specifier -> SHORT .)
    UNSIGNED        reduce using rule 20 (type_specifier -> SHORT .)
    BOOL            reduce using rule 20 (type_specifier -> SHORT .)
    STRUCT          reduce using rule 20 (type_specifier -> SHORT .)
    *               reduce using rule 20 (type_specifier -> SHORT .)
    IDENTIFIER      reduce using rule 20 (type_specifier -> SHORT .)
    ;               reduce using rule 20 (type_specifier -> SHORT .)


state 12

    (21) type_specifier -> INT .

    VOID            reduce using rule 21 (type_specifier -> INT .)
    CHAR            reduce using rule 21 (type_specifier -> INT .)
    SHORT           reduce using rule 21 (type_specifier -> INT .)
    INT             reduce using rule 21 (type_specifier -> INT .)
    LONG            reduce using rule 21 (type_specifier -> INT .)
    FLOAT           reduce using rule 21 (type_specifier -> INT .)
    DOUBLE          reduce using rule 21 (type_specifier -> INT .)
    SIGNED          reduce using rule 21 (type_specifier -> INT .)
    UNSIGNED        reduce using rule 21 (type_specifier -> INT .)
    BOOL            reduce using rule 21 (type_specifier -> INT .)
    STRUCT          reduce using rule 21 (type_specifier -> INT .)
    *               reduce using rule 21 (type_specifier -> INT .)
    IDENTIFIER      reduce using rule 21 (type_specifier -> INT .)
    ;               reduce using rule 21 (type_specifier -> INT .)


state 13

    (22) type_specifier -> LONG .

    VOID            reduce using rule 22 (type_specifier -> LONG .)
    CHAR            reduce using rule 22 (type_specifier -> LONG .)
    SHORT           reduce using rule 22 (type_specifier -> LONG .)
    INT             reduce using rule 22 (type_specifier -> LONG .)
    LONG            reduce using rule 22 (type_specifier -> LONG .)
    FLOAT           reduce using rule 22 (type_specifier -> LONG .)
    DOUBLE          reduce using rule 22 (type_specifier -> LONG .)
    SIGNED          reduce using rule 22 (type_specifier -> LONG .)
    UNSIGNED        reduce using rule 22 (type_specifier -> LONG .)
    BOOL            reduce using rule 22 (type_specifier -> LONG .)
    STRUCT          reduce using rule 22 (type_specifier -> LONG .)
    *               reduce using rule 22 (type_specifier -> LONG .)
    IDENTIFIER      reduce using rule 22 (type_specifier -> LONG .)
    ;               reduce using rule 22 (type_specifier -> LONG .)


state 14

    (23) type_specifier -> FLOAT .

    VOID            reduce using rule 23 (type_specifier -> FLOAT .)
    CHAR            reduce using rule 23 (type_specifier -> FLOAT .)
    SHORT           reduce using rule 23 (type_specifier -> FLOAT .)
    INT             reduce using rule 23 (type_specifier -> FLOAT .)
    LONG            reduce using rule 23 (type_specifier -> FLOAT .)
    FLOAT           reduce using rule 23 (type_specifier -> FLOAT .)
    DOUBLE          reduce using rule 23 (type_specifier -> FLOAT .)
    SIGNED          reduce using rule 23 (type_specifier -> FLOAT .)
    UNSIGNED        reduce using rule 23 (type_specifier -> FLOAT .)
    BOOL            reduce using rule 23 (type_specifier -> FLOAT .)
    STRUCT          reduce using rule 23 (type_specifier -> FLOAT .)
    *               reduce using rule 23 (type_specifier -> FLOAT .)
    IDENTIFIER      reduce using rule 23 (type_specifier -> FLOAT .)
    ;               reduce using rule 23 (type_specifier -> FLOAT .)


state 15

    (24) type_specifier -> DOUBLE .

    VOID            reduce using rule 24 (type_specifier -> DOUBLE .)
    CHAR            reduce using rule 24 (type_specifier -> DOUBLE .)
    SHORT           reduce using rule 24 (type_specifier -> DOUBLE .)
    INT             reduce using rule 24 (type_specifier -> DOUBLE .)
    LONG            reduce using rule 24 (type_specifier -> DOUBLE .)
    FLOAT           reduce using rule 24 (type_specifier -> DOUBLE .)
    DOUBLE          reduce using rule 24 (type_specifier -> DOUBLE .)
    SIGNED          reduce using rule 24 (type_specifier -> DOUBLE .)
    UNSIGNED        reduce using rule 24 (type_specifier -> DOUBLE .)
    BOOL            reduce using rule 24 (type_specifier -> DOUBLE .)
    STRUCT          reduce using rule 24 (type_specifier -> DOUBLE .)
    *               reduce using rule 24 (type_specifier -> DOUBLE .)
    IDENTIFIER      reduce using rule 24 (type_specifier -> DOUBLE .)
    ;               reduce using rule 24 (type_specifier -> DOUBLE .)


state 16

    (25) type_specifier -> SIGNED .

    VOID            reduce using rule 25 (type_specifier -> SIGNED .)
    CHAR            reduce using rule 25 (type_specifier -> SIGNED .)
    SHORT           reduce using rule 25 (type_specifier -> SIGNED .)
    INT             reduce using rule 25 (type_specifier -> SIGNED .)
    LONG            reduce using rule 25 (type_specifier -> SIGNED .)
    FLOAT           reduce using rule 25 (type_specifier -> SIGNED .)
    DOUBLE          reduce using rule 25 (type_specifier -> SIGNED .)
    SIGNED          reduce using rule 25 (type_specifier -> SIGNED .)
    UNSIGNED        reduce using rule 25 (type_specifier -> SIGNED .)
    BOOL            reduce using rule 25 (type_specifier -> SIGNED .)
    STRUCT          reduce using rule 25 (type_specifier -> SIGNED .)
    *               reduce using rule 25 (type_specifier -> SIGNED .)
    IDENTIFIER      reduce using rule 25 (type_specifier -> SIGNED .)
    ;               reduce using rule 25 (type_specifier -> SIGNED .)


state 17

    (26) type_specifier -> UNSIGNED .

    VOID            reduce using rule 26 (type_specifier -> UNSIGNED .)
    CHAR            reduce using rule 26 (type_specifier -> UNSIGNED .)
    SHORT           reduce using rule 26 (type_specifier -> UNSIGNED .)
    INT             reduce using rule 26 (type_specifier -> UNSIGNED .)
    LONG            reduce using rule 26 (type_specifier -> UNSIGNED .)
    FLOAT           reduce using rule 26 (type_specifier -> UNSIGNED .)
    DOUBLE          reduce using rule 26 (type_specifier -> UNSIGNED .)
    SIGNED          reduce using rule 26 (type_specifier -> UNSIGNED .)
    UNSIGNED        reduce using rule 26 (type_specifier -> UNSIGNED .)
    BOOL            reduce using rule 26 (type_specifier -> UNSIGNED .)
    STRUCT          reduce using rule 26 (type_specifier -> UNSIGNED .)
    *               reduce using rule 26 (type_specifier -> UNSIGNED .)
    IDENTIFIER      reduce using rule 26 (type_specifier -> UNSIGNED .)
    ;               reduce using rule 26 (type_specifier -> UNSIGNED .)


state 18

    (27) type_specifier -> BOOL .

    VOID            reduce using rule 27 (type_specifier -> BOOL .)
    CHAR            reduce using rule 27 (type_specifier -> BOOL .)
    SHORT           reduce using rule 27 (type_specifier -> BOOL .)
    INT             reduce using rule 27 (type_specifier -> BOOL .)
    LONG            reduce using rule 27 (type_specifier -> BOOL .)
    FLOAT           reduce using rule 27 (type_specifier -> BOOL .)
    DOUBLE          reduce using rule 27 (type_specifier -> BOOL .)
    SIGNED          reduce using rule 27 (type_specifier -> BOOL .)
    UNSIGNED        reduce using rule 27 (type_specifier -> BOOL .)
    BOOL            reduce using rule 27 (type_specifier -> BOOL .)
    STRUCT          reduce using rule 27 (type_specifier -> BOOL .)
    *               reduce using rule 27 (type_specifier -> BOOL .)
    IDENTIFIER      reduce using rule 27 (type_specifier -> BOOL .)
    ;               reduce using rule 27 (type_specifier -> BOOL .)


state 19

    (28) type_specifier -> struct_specifier .

    VOID            reduce using rule 28 (type_specifier -> struct_specifier .)
    CHAR            reduce using rule 28 (type_specifier -> struct_specifier .)
    SHORT           reduce using rule 28 (type_specifier -> struct_specifier .)
    INT             reduce using rule 28 (type_specifier -> struct_specifier .)
    LONG            reduce using rule 28 (type_specifier -> struct_specifier .)
    FLOAT           reduce using rule 28 (type_specifier -> struct_specifier .)
    DOUBLE          reduce using rule 28 (type_specifier -> struct_specifier .)
    SIGNED          reduce using rule 28 (type_specifier -> struct_specifier .)
    UNSIGNED        reduce using rule 28 (type_specifier -> struct_specifier .)
    BOOL            reduce using rule 28 (type_specifier -> struct_specifier .)
    STRUCT          reduce using rule 28 (type_specifier -> struct_specifier .)
    *               reduce using rule 28 (type_specifier -> struct_specifier .)
    IDENTIFIER      reduce using rule 28 (type_specifier -> struct_specifier .)
    ;               reduce using rule 28 (type_specifier -> struct_specifier .)


state 20

    (114) struct_specifier -> STRUCT . identifier
    (115) struct_specifier -> STRUCT . { struct_declaration_list }
    (118) struct_specifier -> STRUCT . identifier { struct_declaration_list }
    (38) identifier -> . IDENTIFIER

    {               shift and go to state 36
    IDENTIFIER      shift and go to state 31

    identifier                     shift and go to state 35

state 21

    (3) translation_unit -> translation_unit external_declaration .

    VOID            reduce using rule 3 (translation_unit -> translation_unit external_declaration .)
    CHAR            reduce using rule 3 (translation_unit -> translation_unit external_declaration .)
    SHORT           reduce using rule 3 (translation_unit -> translation_unit external_declaration .)
    INT             reduce using rule 3 (translation_unit -> translation_unit external_declaration .)
    LONG            reduce using rule 3 (translation_unit -> translation_unit external_declaration .)
    FLOAT           reduce using rule 3 (translation_unit -> translation_unit external_declaration .)
    DOUBLE          reduce using rule 3 (translation_unit -> translation_unit external_declaration .)
    SIGNED          reduce using rule 3 (translation_unit -> translation_unit external_declaration .)
    UNSIGNED        reduce using rule 3 (translation_unit -> translation_unit external_declaration .)
    BOOL            reduce using rule 3 (translation_unit -> translation_unit external_declaration .)
    STRUCT          reduce using rule 3 (translation_unit -> translation_unit external_declaration .)
    $end            reduce using rule 3 (translation_unit -> translation_unit external_declaration .)


state 22

    (93) function_definition -> declaration_specifiers declarator . declaration_list_orempty compound_statement
    (10) init_declarator -> declarator .
    (11) init_declarator -> declarator . = initializer
    (29) declaration_list_orempty -> . empty
    (30) declaration_list_orempty -> . declaration_list
    (16) empty -> .
    (32) declaration_list -> . declaration
    (33) declaration_list -> . declaration_list declaration
    (31) declaration -> . declaration_specifiers init_declarator_list_orempty ;
    (17) declaration_specifiers -> . type_specifier declaration_specifiers_orempty
    (18) type_specifier -> . VOID
    (19) type_specifier -> . CHAR
    (20) type_specifier -> . SHORT
    (21) type_specifier -> . INT
    (22) type_specifier -> . LONG
    (23) type_specifier -> . FLOAT
    (24) type_specifier -> . DOUBLE
    (25) type_specifier -> . SIGNED
    (26) type_specifier -> . UNSIGNED
    (27) type_specifier -> . BOOL
    (28) type_specifier -> . struct_specifier
    (114) struct_specifier -> . STRUCT identifier
    (115) struct_specifier -> . STRUCT { struct_declaration_list }
    (118) struct_specifier -> . STRUCT identifier { struct_declaration_list }

    ,               reduce using rule 10 (init_declarator -> declarator .)
    ;               reduce using rule 10 (init_declarator -> declarator .)
    =               shift and go to state 39
    {               reduce using rule 16 (empty -> .)
    VOID            shift and go to state 9
    CHAR            shift and go to state 10
    SHORT           shift and go to state 11
    INT             shift and go to state 12
    LONG            shift and go to state 13
    FLOAT           shift and go to state 14
    DOUBLE          shift and go to state 15
    SIGNED          shift and go to state 16
    UNSIGNED        shift and go to state 17
    BOOL            shift and go to state 18
    STRUCT          shift and go to state 20

    declaration_specifiers         shift and go to state 37
    declaration_list_orempty       shift and go to state 38
    empty                          shift and go to state 40
    declaration_list               shift and go to state 41
    declaration                    shift and go to state 42
    type_specifier                 shift and go to state 8
    struct_specifier               shift and go to state 19

state 23

    (31) declaration -> declaration_specifiers init_declarator_list_orempty . ;

    ;               shift and go to state 43


state 24

    (81) declarator -> direct_declarator .
    (85) direct_declarator -> direct_declarator . [ assignment_expression_orempty ]
    (86) direct_declarator -> direct_declarator . ( parameter_list )
    (87) direct_declarator -> direct_declarator . ( identifier_list_orempty )

    =               reduce using rule 81 (declarator -> direct_declarator .)
    VOID            reduce using rule 81 (declarator -> direct_declarator .)
    CHAR            reduce using rule 81 (declarator -> direct_declarator .)
    SHORT           reduce using rule 81 (declarator -> direct_declarator .)
    INT             reduce using rule 81 (declarator -> direct_declarator .)
    LONG            reduce using rule 81 (declarator -> direct_declarator .)
    FLOAT           reduce using rule 81 (declarator -> direct_declarator .)
    DOUBLE          reduce using rule 81 (declarator -> direct_declarator .)
    SIGNED          reduce using rule 81 (declarator -> direct_declarator .)
    UNSIGNED        reduce using rule 81 (declarator -> direct_declarator .)
    BOOL            reduce using rule 81 (declarator -> direct_declarator .)
    STRUCT          reduce using rule 81 (declarator -> direct_declarator .)
    {               reduce using rule 81 (declarator -> direct_declarator .)
    ,               reduce using rule 81 (declarator -> direct_declarator .)
    ;               reduce using rule 81 (declarator -> direct_declarator .)
    )               reduce using rule 81 (declarator -> direct_declarator .)
    [               shift and go to state 44
    (               shift and go to state 45


state 25

    (82) declarator -> pointer . direct_declarator
    (84) direct_declarator -> . identifier
    (85) direct_declarator -> . direct_declarator [ assignment_expression_orempty ]
    (86) direct_declarator -> . direct_declarator ( parameter_list )
    (87) direct_declarator -> . direct_declarator ( identifier_list_orempty )
    (38) identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 31

    direct_declarator              shift and go to state 46
    identifier                     shift and go to state 28

state 26

    (43) init_declarator_list_orempty -> empty .

    ;               reduce using rule 43 (init_declarator_list_orempty -> empty .)


state 27

    (44) init_declarator_list_orempty -> init_declarator_list .
    (13) init_declarator_list -> init_declarator_list . , init_declarator

    ;               reduce using rule 44 (init_declarator_list_orempty -> init_declarator_list .)
    ,               shift and go to state 47


state 28

    (84) direct_declarator -> identifier .

    [               reduce using rule 84 (direct_declarator -> identifier .)
    (               reduce using rule 84 (direct_declarator -> identifier .)
    =               reduce using rule 84 (direct_declarator -> identifier .)
    VOID            reduce using rule 84 (direct_declarator -> identifier .)
    CHAR            reduce using rule 84 (direct_declarator -> identifier .)
    SHORT           reduce using rule 84 (direct_declarator -> identifier .)
    INT             reduce using rule 84 (direct_declarator -> identifier .)
    LONG            reduce using rule 84 (direct_declarator -> identifier .)
    FLOAT           reduce using rule 84 (direct_declarator -> identifier .)
    DOUBLE          reduce using rule 84 (direct_declarator -> identifier .)
    SIGNED          reduce using rule 84 (direct_declarator -> identifier .)
    UNSIGNED        reduce using rule 84 (direct_declarator -> identifier .)
    BOOL            reduce using rule 84 (direct_declarator -> identifier .)
    STRUCT          reduce using rule 84 (direct_declarator -> identifier .)
    {               reduce using rule 84 (direct_declarator -> identifier .)
    ,               reduce using rule 84 (direct_declarator -> identifier .)
    ;               reduce using rule 84 (direct_declarator -> identifier .)
    )               reduce using rule 84 (direct_declarator -> identifier .)


state 29

    (124) pointer -> * .
    (125) pointer -> * . pointer
    (124) pointer -> . *
    (125) pointer -> . * pointer

    IDENTIFIER      reduce using rule 124 (pointer -> * .)
    *               shift and go to state 29

    pointer                        shift and go to state 48

state 30

    (12) init_declarator_list -> init_declarator .

    ,               reduce using rule 12 (init_declarator_list -> init_declarator .)
    ;               reduce using rule 12 (init_declarator_list -> init_declarator .)


state 31

    (38) identifier -> IDENTIFIER .

    [               reduce using rule 38 (identifier -> IDENTIFIER .)
    (               reduce using rule 38 (identifier -> IDENTIFIER .)
    =               reduce using rule 38 (identifier -> IDENTIFIER .)
    VOID            reduce using rule 38 (identifier -> IDENTIFIER .)
    CHAR            reduce using rule 38 (identifier -> IDENTIFIER .)
    SHORT           reduce using rule 38 (identifier -> IDENTIFIER .)
    INT             reduce using rule 38 (identifier -> IDENTIFIER .)
    LONG            reduce using rule 38 (identifier -> IDENTIFIER .)
    FLOAT           reduce using rule 38 (identifier -> IDENTIFIER .)
    DOUBLE          reduce using rule 38 (identifier -> IDENTIFIER .)
    SIGNED          reduce using rule 38 (identifier -> IDENTIFIER .)
    UNSIGNED        reduce using rule 38 (identifier -> IDENTIFIER .)
    BOOL            reduce using rule 38 (identifier -> IDENTIFIER .)
    STRUCT          reduce using rule 38 (identifier -> IDENTIFIER .)
    {               reduce using rule 38 (identifier -> IDENTIFIER .)
    ,               reduce using rule 38 (identifier -> IDENTIFIER .)
    ;               reduce using rule 38 (identifier -> IDENTIFIER .)
    *               reduce using rule 38 (identifier -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 38 (identifier -> IDENTIFIER .)
    )               reduce using rule 38 (identifier -> IDENTIFIER .)
    PTR_OP          reduce using rule 38 (identifier -> IDENTIFIER .)
    MUL_ASSIGN      reduce using rule 38 (identifier -> IDENTIFIER .)
    DIV_ASSIGN      reduce using rule 38 (identifier -> IDENTIFIER .)
    MOD_ASSIGN      reduce using rule 38 (identifier -> IDENTIFIER .)
    ADD_ASSIGN      reduce using rule 38 (identifier -> IDENTIFIER .)
    SUB_ASSIGN      reduce using rule 38 (identifier -> IDENTIFIER .)
    LEFT_ASSIGN     reduce using rule 38 (identifier -> IDENTIFIER .)
    RIGHT_ASSIGN    reduce using rule 38 (identifier -> IDENTIFIER .)
    AND_ASSIGN      reduce using rule 38 (identifier -> IDENTIFIER .)
    XOR_ASSIGN      reduce using rule 38 (identifier -> IDENTIFIER .)
    OR_ASSIGN       reduce using rule 38 (identifier -> IDENTIFIER .)
    /               reduce using rule 38 (identifier -> IDENTIFIER .)
    %               reduce using rule 38 (identifier -> IDENTIFIER .)
    +               reduce using rule 38 (identifier -> IDENTIFIER .)
    -               reduce using rule 38 (identifier -> IDENTIFIER .)
    RIGHT_OP        reduce using rule 38 (identifier -> IDENTIFIER .)
    LEFT_OP         reduce using rule 38 (identifier -> IDENTIFIER .)
    <               reduce using rule 38 (identifier -> IDENTIFIER .)
    LTE             reduce using rule 38 (identifier -> IDENTIFIER .)
    GTE             reduce using rule 38 (identifier -> IDENTIFIER .)
    >               reduce using rule 38 (identifier -> IDENTIFIER .)
    EQ_OP           reduce using rule 38 (identifier -> IDENTIFIER .)
    NEQ_OP          reduce using rule 38 (identifier -> IDENTIFIER .)
    &               reduce using rule 38 (identifier -> IDENTIFIER .)
    |               reduce using rule 38 (identifier -> IDENTIFIER .)
    ^               reduce using rule 38 (identifier -> IDENTIFIER .)
    AND_OP          reduce using rule 38 (identifier -> IDENTIFIER .)
    OR_OP           reduce using rule 38 (identifier -> IDENTIFIER .)
    ]               reduce using rule 38 (identifier -> IDENTIFIER .)
    }               reduce using rule 38 (identifier -> IDENTIFIER .)


state 32

    (17) declaration_specifiers -> type_specifier declaration_specifiers_orempty .

    *               reduce using rule 17 (declaration_specifiers -> type_specifier declaration_specifiers_orempty .)
    IDENTIFIER      reduce using rule 17 (declaration_specifiers -> type_specifier declaration_specifiers_orempty .)
    ;               reduce using rule 17 (declaration_specifiers -> type_specifier declaration_specifiers_orempty .)


state 33

    (14) declaration_specifiers_orempty -> empty .

    *               reduce using rule 14 (declaration_specifiers_orempty -> empty .)
    IDENTIFIER      reduce using rule 14 (declaration_specifiers_orempty -> empty .)
    ;               reduce using rule 14 (declaration_specifiers_orempty -> empty .)


state 34

    (15) declaration_specifiers_orempty -> declaration_specifiers .

    *               reduce using rule 15 (declaration_specifiers_orempty -> declaration_specifiers .)
    IDENTIFIER      reduce using rule 15 (declaration_specifiers_orempty -> declaration_specifiers .)
    ;               reduce using rule 15 (declaration_specifiers_orempty -> declaration_specifiers .)


state 35

    (114) struct_specifier -> STRUCT identifier .
    (118) struct_specifier -> STRUCT identifier . { struct_declaration_list }

    VOID            reduce using rule 114 (struct_specifier -> STRUCT identifier .)
    CHAR            reduce using rule 114 (struct_specifier -> STRUCT identifier .)
    SHORT           reduce using rule 114 (struct_specifier -> STRUCT identifier .)
    INT             reduce using rule 114 (struct_specifier -> STRUCT identifier .)
    LONG            reduce using rule 114 (struct_specifier -> STRUCT identifier .)
    FLOAT           reduce using rule 114 (struct_specifier -> STRUCT identifier .)
    DOUBLE          reduce using rule 114 (struct_specifier -> STRUCT identifier .)
    SIGNED          reduce using rule 114 (struct_specifier -> STRUCT identifier .)
    UNSIGNED        reduce using rule 114 (struct_specifier -> STRUCT identifier .)
    BOOL            reduce using rule 114 (struct_specifier -> STRUCT identifier .)
    STRUCT          reduce using rule 114 (struct_specifier -> STRUCT identifier .)
    *               reduce using rule 114 (struct_specifier -> STRUCT identifier .)
    IDENTIFIER      reduce using rule 114 (struct_specifier -> STRUCT identifier .)
    ;               reduce using rule 114 (struct_specifier -> STRUCT identifier .)
    {               shift and go to state 49


state 36

    (115) struct_specifier -> STRUCT { . struct_declaration_list }
    (119) struct_declaration_list -> . struct_declaration
    (120) struct_declaration_list -> . struct_declaration_list struct_declaration
    (121) struct_declaration -> . specifier_qualifier_list struct_declarator_list ;
    (83) specifier_qualifier_list -> . type_specifier specifier_qualifier_list_orempty
    (18) type_specifier -> . VOID
    (19) type_specifier -> . CHAR
    (20) type_specifier -> . SHORT
    (21) type_specifier -> . INT
    (22) type_specifier -> . LONG
    (23) type_specifier -> . FLOAT
    (24) type_specifier -> . DOUBLE
    (25) type_specifier -> . SIGNED
    (26) type_specifier -> . UNSIGNED
    (27) type_specifier -> . BOOL
    (28) type_specifier -> . struct_specifier
    (114) struct_specifier -> . STRUCT identifier
    (115) struct_specifier -> . STRUCT { struct_declaration_list }
    (118) struct_specifier -> . STRUCT identifier { struct_declaration_list }

    VOID            shift and go to state 9
    CHAR            shift and go to state 10
    SHORT           shift and go to state 11
    INT             shift and go to state 12
    LONG            shift and go to state 13
    FLOAT           shift and go to state 14
    DOUBLE          shift and go to state 15
    SIGNED          shift and go to state 16
    UNSIGNED        shift and go to state 17
    BOOL            shift and go to state 18
    STRUCT          shift and go to state 20

    struct_declaration_list        shift and go to state 50
    struct_declaration             shift and go to state 51
    specifier_qualifier_list       shift and go to state 52
    type_specifier                 shift and go to state 53
    struct_specifier               shift and go to state 19

state 37

    (31) declaration -> declaration_specifiers . init_declarator_list_orempty ;
    (43) init_declarator_list_orempty -> . empty
    (44) init_declarator_list_orempty -> . init_declarator_list
    (16) empty -> .
    (12) init_declarator_list -> . init_declarator
    (13) init_declarator_list -> . init_declarator_list , init_declarator
    (10) init_declarator -> . declarator
    (11) init_declarator -> . declarator = initializer
    (81) declarator -> . direct_declarator
    (82) declarator -> . pointer direct_declarator
    (84) direct_declarator -> . identifier
    (85) direct_declarator -> . direct_declarator [ assignment_expression_orempty ]
    (86) direct_declarator -> . direct_declarator ( parameter_list )
    (87) direct_declarator -> . direct_declarator ( identifier_list_orempty )
    (124) pointer -> . *
    (125) pointer -> . * pointer
    (38) identifier -> . IDENTIFIER

    ;               reduce using rule 16 (empty -> .)
    *               shift and go to state 29
    IDENTIFIER      shift and go to state 31

    init_declarator_list_orempty   shift and go to state 23
    empty                          shift and go to state 26
    init_declarator_list           shift and go to state 27
    init_declarator                shift and go to state 30
    declarator                     shift and go to state 54
    direct_declarator              shift and go to state 24
    pointer                        shift and go to state 25
    identifier                     shift and go to state 28

state 38

    (93) function_definition -> declaration_specifiers declarator declaration_list_orempty . compound_statement
    (74) compound_statement -> . { block_item_list_orempty }

    {               shift and go to state 56

    compound_statement             shift and go to state 55

state 39

    (11) init_declarator -> declarator = . initializer
    (5) initializer -> . assignment_expression
    (6) initializer -> . { initializer_list_orempty }
    (7) initializer -> . { initializer_list , }
    (60) assignment_expression -> . conditional_expression
    (61) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (75) conditional_expression -> . binary_expression
    (132) unary_expression -> . postfix_expression
    (133) unary_expression -> . unary_operator cast_expression
    (136) binary_expression -> . cast_expression
    (137) binary_expression -> . binary_expression * binary_expression
    (138) binary_expression -> . binary_expression / binary_expression
    (139) binary_expression -> . binary_expression % binary_expression
    (140) binary_expression -> . binary_expression + binary_expression
    (141) binary_expression -> . binary_expression - binary_expression
    (142) binary_expression -> . binary_expression RIGHT_OP binary_expression
    (143) binary_expression -> . binary_expression LEFT_OP binary_expression
    (144) binary_expression -> . binary_expression < binary_expression
    (145) binary_expression -> . binary_expression LTE binary_expression
    (146) binary_expression -> . binary_expression GTE binary_expression
    (147) binary_expression -> . binary_expression > binary_expression
    (148) binary_expression -> . binary_expression EQ_OP binary_expression
    (149) binary_expression -> . binary_expression NEQ_OP binary_expression
    (150) binary_expression -> . binary_expression & binary_expression
    (151) binary_expression -> . binary_expression | binary_expression
    (152) binary_expression -> . binary_expression ^ binary_expression
    (153) binary_expression -> . binary_expression AND_OP binary_expression
    (154) binary_expression -> . binary_expression OR_OP binary_expression
    (97) postfix_expression -> . primary_expression
    (98) postfix_expression -> . postfix_expression [ expression ]
    (99) postfix_expression -> . postfix_expression ( argument_expression_list )
    (100) postfix_expression -> . postfix_expression ( )
    (101) postfix_expression -> . postfix_expression PTR_OP identifier
    (126) unary_operator -> . &
    (127) unary_operator -> . *
    (128) unary_operator -> . +
    (129) unary_operator -> . -
    (130) unary_operator -> . ~
    (131) unary_operator -> . !
    (155) cast_expression -> . unary_expression
    (102) primary_expression -> . identifier
    (103) primary_expression -> . constant
    (104) primary_expression -> . unified_string_literal
    (105) primary_expression -> . ( expression )
    (38) identifier -> . IDENTIFIER
    (76) constant -> . INTEGER_CONSTANT
    (77) constant -> . CHAR_CONSTANT
    (78) constant -> . FLOAT_CONSTANT
    (79) constant -> . BOOL_CONSTANT
    (134) unified_string_literal -> . STRING_CONSTANT
    (135) unified_string_literal -> . unified_string_literal STRING_CONSTANT

    {               shift and go to state 59
    &               shift and go to state 69
    *               shift and go to state 66
    +               shift and go to state 67
    -               shift and go to state 68
    ~               shift and go to state 73
    !               shift and go to state 74
    (               shift and go to state 71
    IDENTIFIER      shift and go to state 31
    INTEGER_CONSTANT shift and go to state 77
    CHAR_CONSTANT   shift and go to state 78
    FLOAT_CONSTANT  shift and go to state 79
    BOOL_CONSTANT   shift and go to state 80
    STRING_CONSTANT shift and go to state 81

    initializer                    shift and go to state 57
    assignment_expression          shift and go to state 58
    conditional_expression         shift and go to state 60
    unary_expression               shift and go to state 61
    binary_expression              shift and go to state 62
    postfix_expression             shift and go to state 63
    unary_operator                 shift and go to state 64
    cast_expression                shift and go to state 65
    primary_expression             shift and go to state 70
    identifier                     shift and go to state 72
    constant                       shift and go to state 75
    unified_string_literal         shift and go to state 76

state 40

    (29) declaration_list_orempty -> empty .

    {               reduce using rule 29 (declaration_list_orempty -> empty .)


state 41

    (30) declaration_list_orempty -> declaration_list .
    (33) declaration_list -> declaration_list . declaration
    (31) declaration -> . declaration_specifiers init_declarator_list_orempty ;
    (17) declaration_specifiers -> . type_specifier declaration_specifiers_orempty
    (18) type_specifier -> . VOID
    (19) type_specifier -> . CHAR
    (20) type_specifier -> . SHORT
    (21) type_specifier -> . INT
    (22) type_specifier -> . LONG
    (23) type_specifier -> . FLOAT
    (24) type_specifier -> . DOUBLE
    (25) type_specifier -> . SIGNED
    (26) type_specifier -> . UNSIGNED
    (27) type_specifier -> . BOOL
    (28) type_specifier -> . struct_specifier
    (114) struct_specifier -> . STRUCT identifier
    (115) struct_specifier -> . STRUCT { struct_declaration_list }
    (118) struct_specifier -> . STRUCT identifier { struct_declaration_list }

    {               reduce using rule 30 (declaration_list_orempty -> declaration_list .)
    VOID            shift and go to state 9
    CHAR            shift and go to state 10
    SHORT           shift and go to state 11
    INT             shift and go to state 12
    LONG            shift and go to state 13
    FLOAT           shift and go to state 14
    DOUBLE          shift and go to state 15
    SIGNED          shift and go to state 16
    UNSIGNED        shift and go to state 17
    BOOL            shift and go to state 18
    STRUCT          shift and go to state 20

    declaration                    shift and go to state 82
    declaration_specifiers         shift and go to state 37
    type_specifier                 shift and go to state 8
    struct_specifier               shift and go to state 19

state 42

    (32) declaration_list -> declaration .

    VOID            reduce using rule 32 (declaration_list -> declaration .)
    CHAR            reduce using rule 32 (declaration_list -> declaration .)
    SHORT           reduce using rule 32 (declaration_list -> declaration .)
    INT             reduce using rule 32 (declaration_list -> declaration .)
    LONG            reduce using rule 32 (declaration_list -> declaration .)
    FLOAT           reduce using rule 32 (declaration_list -> declaration .)
    DOUBLE          reduce using rule 32 (declaration_list -> declaration .)
    SIGNED          reduce using rule 32 (declaration_list -> declaration .)
    UNSIGNED        reduce using rule 32 (declaration_list -> declaration .)
    BOOL            reduce using rule 32 (declaration_list -> declaration .)
    STRUCT          reduce using rule 32 (declaration_list -> declaration .)
    {               reduce using rule 32 (declaration_list -> declaration .)


state 43

    (31) declaration -> declaration_specifiers init_declarator_list_orempty ; .

    VOID            reduce using rule 31 (declaration -> declaration_specifiers init_declarator_list_orempty ; .)
    CHAR            reduce using rule 31 (declaration -> declaration_specifiers init_declarator_list_orempty ; .)
    SHORT           reduce using rule 31 (declaration -> declaration_specifiers init_declarator_list_orempty ; .)
    INT             reduce using rule 31 (declaration -> declaration_specifiers init_declarator_list_orempty ; .)
    LONG            reduce using rule 31 (declaration -> declaration_specifiers init_declarator_list_orempty ; .)
    FLOAT           reduce using rule 31 (declaration -> declaration_specifiers init_declarator_list_orempty ; .)
    DOUBLE          reduce using rule 31 (declaration -> declaration_specifiers init_declarator_list_orempty ; .)
    SIGNED          reduce using rule 31 (declaration -> declaration_specifiers init_declarator_list_orempty ; .)
    UNSIGNED        reduce using rule 31 (declaration -> declaration_specifiers init_declarator_list_orempty ; .)
    BOOL            reduce using rule 31 (declaration -> declaration_specifiers init_declarator_list_orempty ; .)
    STRUCT          reduce using rule 31 (declaration -> declaration_specifiers init_declarator_list_orempty ; .)
    $end            reduce using rule 31 (declaration -> declaration_specifiers init_declarator_list_orempty ; .)
    {               reduce using rule 31 (declaration -> declaration_specifiers init_declarator_list_orempty ; .)
    IF              reduce using rule 31 (declaration -> declaration_specifiers init_declarator_list_orempty ; .)
    WHILE           reduce using rule 31 (declaration -> declaration_specifiers init_declarator_list_orempty ; .)
    BREAK           reduce using rule 31 (declaration -> declaration_specifiers init_declarator_list_orempty ; .)
    CONTINUE        reduce using rule 31 (declaration -> declaration_specifiers init_declarator_list_orempty ; .)
    RETURN          reduce using rule 31 (declaration -> declaration_specifiers init_declarator_list_orempty ; .)
    &               reduce using rule 31 (declaration -> declaration_specifiers init_declarator_list_orempty ; .)
    *               reduce using rule 31 (declaration -> declaration_specifiers init_declarator_list_orempty ; .)
    +               reduce using rule 31 (declaration -> declaration_specifiers init_declarator_list_orempty ; .)
    -               reduce using rule 31 (declaration -> declaration_specifiers init_declarator_list_orempty ; .)
    ~               reduce using rule 31 (declaration -> declaration_specifiers init_declarator_list_orempty ; .)
    !               reduce using rule 31 (declaration -> declaration_specifiers init_declarator_list_orempty ; .)
    (               reduce using rule 31 (declaration -> declaration_specifiers init_declarator_list_orempty ; .)
    IDENTIFIER      reduce using rule 31 (declaration -> declaration_specifiers init_declarator_list_orempty ; .)
    INTEGER_CONSTANT reduce using rule 31 (declaration -> declaration_specifiers init_declarator_list_orempty ; .)
    CHAR_CONSTANT   reduce using rule 31 (declaration -> declaration_specifiers init_declarator_list_orempty ; .)
    FLOAT_CONSTANT  reduce using rule 31 (declaration -> declaration_specifiers init_declarator_list_orempty ; .)
    BOOL_CONSTANT   reduce using rule 31 (declaration -> declaration_specifiers init_declarator_list_orempty ; .)
    STRING_CONSTANT reduce using rule 31 (declaration -> declaration_specifiers init_declarator_list_orempty ; .)
    ;               reduce using rule 31 (declaration -> declaration_specifiers init_declarator_list_orempty ; .)
    }               reduce using rule 31 (declaration -> declaration_specifiers init_declarator_list_orempty ; .)


state 44

    (85) direct_declarator -> direct_declarator [ . assignment_expression_orempty ]
    (45) assignment_expression_orempty -> . empty
    (46) assignment_expression_orempty -> . assignment_expression
    (16) empty -> .
    (60) assignment_expression -> . conditional_expression
    (61) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (75) conditional_expression -> . binary_expression
    (132) unary_expression -> . postfix_expression
    (133) unary_expression -> . unary_operator cast_expression
    (136) binary_expression -> . cast_expression
    (137) binary_expression -> . binary_expression * binary_expression
    (138) binary_expression -> . binary_expression / binary_expression
    (139) binary_expression -> . binary_expression % binary_expression
    (140) binary_expression -> . binary_expression + binary_expression
    (141) binary_expression -> . binary_expression - binary_expression
    (142) binary_expression -> . binary_expression RIGHT_OP binary_expression
    (143) binary_expression -> . binary_expression LEFT_OP binary_expression
    (144) binary_expression -> . binary_expression < binary_expression
    (145) binary_expression -> . binary_expression LTE binary_expression
    (146) binary_expression -> . binary_expression GTE binary_expression
    (147) binary_expression -> . binary_expression > binary_expression
    (148) binary_expression -> . binary_expression EQ_OP binary_expression
    (149) binary_expression -> . binary_expression NEQ_OP binary_expression
    (150) binary_expression -> . binary_expression & binary_expression
    (151) binary_expression -> . binary_expression | binary_expression
    (152) binary_expression -> . binary_expression ^ binary_expression
    (153) binary_expression -> . binary_expression AND_OP binary_expression
    (154) binary_expression -> . binary_expression OR_OP binary_expression
    (97) postfix_expression -> . primary_expression
    (98) postfix_expression -> . postfix_expression [ expression ]
    (99) postfix_expression -> . postfix_expression ( argument_expression_list )
    (100) postfix_expression -> . postfix_expression ( )
    (101) postfix_expression -> . postfix_expression PTR_OP identifier
    (126) unary_operator -> . &
    (127) unary_operator -> . *
    (128) unary_operator -> . +
    (129) unary_operator -> . -
    (130) unary_operator -> . ~
    (131) unary_operator -> . !
    (155) cast_expression -> . unary_expression
    (102) primary_expression -> . identifier
    (103) primary_expression -> . constant
    (104) primary_expression -> . unified_string_literal
    (105) primary_expression -> . ( expression )
    (38) identifier -> . IDENTIFIER
    (76) constant -> . INTEGER_CONSTANT
    (77) constant -> . CHAR_CONSTANT
    (78) constant -> . FLOAT_CONSTANT
    (79) constant -> . BOOL_CONSTANT
    (134) unified_string_literal -> . STRING_CONSTANT
    (135) unified_string_literal -> . unified_string_literal STRING_CONSTANT

    ]               reduce using rule 16 (empty -> .)
    &               shift and go to state 69
    *               shift and go to state 66
    +               shift and go to state 67
    -               shift and go to state 68
    ~               shift and go to state 73
    !               shift and go to state 74
    (               shift and go to state 71
    IDENTIFIER      shift and go to state 31
    INTEGER_CONSTANT shift and go to state 77
    CHAR_CONSTANT   shift and go to state 78
    FLOAT_CONSTANT  shift and go to state 79
    BOOL_CONSTANT   shift and go to state 80
    STRING_CONSTANT shift and go to state 81

    assignment_expression_orempty  shift and go to state 83
    empty                          shift and go to state 84
    assignment_expression          shift and go to state 85
    conditional_expression         shift and go to state 60
    unary_expression               shift and go to state 61
    binary_expression              shift and go to state 62
    postfix_expression             shift and go to state 63
    unary_operator                 shift and go to state 64
    cast_expression                shift and go to state 65
    primary_expression             shift and go to state 70
    identifier                     shift and go to state 72
    constant                       shift and go to state 75
    unified_string_literal         shift and go to state 76

state 45

    (86) direct_declarator -> direct_declarator ( . parameter_list )
    (87) direct_declarator -> direct_declarator ( . identifier_list_orempty )
    (94) parameter_list -> . parameter_declaration
    (95) parameter_list -> . parameter_list , parameter_declaration
    (34) identifier_list_orempty -> . empty
    (35) identifier_list_orempty -> . identifier_list
    (96) parameter_declaration -> . declaration_specifiers declarator
    (16) empty -> .
    (36) identifier_list -> . identifier
    (37) identifier_list -> . identifier_list , identifier
    (17) declaration_specifiers -> . type_specifier declaration_specifiers_orempty
    (38) identifier -> . IDENTIFIER
    (18) type_specifier -> . VOID
    (19) type_specifier -> . CHAR
    (20) type_specifier -> . SHORT
    (21) type_specifier -> . INT
    (22) type_specifier -> . LONG
    (23) type_specifier -> . FLOAT
    (24) type_specifier -> . DOUBLE
    (25) type_specifier -> . SIGNED
    (26) type_specifier -> . UNSIGNED
    (27) type_specifier -> . BOOL
    (28) type_specifier -> . struct_specifier
    (114) struct_specifier -> . STRUCT identifier
    (115) struct_specifier -> . STRUCT { struct_declaration_list }
    (118) struct_specifier -> . STRUCT identifier { struct_declaration_list }

    )               reduce using rule 16 (empty -> .)
    IDENTIFIER      shift and go to state 31
    VOID            shift and go to state 9
    CHAR            shift and go to state 10
    SHORT           shift and go to state 11
    INT             shift and go to state 12
    LONG            shift and go to state 13
    FLOAT           shift and go to state 14
    DOUBLE          shift and go to state 15
    SIGNED          shift and go to state 16
    UNSIGNED        shift and go to state 17
    BOOL            shift and go to state 18
    STRUCT          shift and go to state 20

    parameter_list                 shift and go to state 86
    identifier_list_orempty        shift and go to state 87
    parameter_declaration          shift and go to state 88
    empty                          shift and go to state 89
    identifier_list                shift and go to state 90
    declaration_specifiers         shift and go to state 91
    identifier                     shift and go to state 92
    type_specifier                 shift and go to state 8
    struct_specifier               shift and go to state 19

state 46

    (82) declarator -> pointer direct_declarator .
    (85) direct_declarator -> direct_declarator . [ assignment_expression_orempty ]
    (86) direct_declarator -> direct_declarator . ( parameter_list )
    (87) direct_declarator -> direct_declarator . ( identifier_list_orempty )

    =               reduce using rule 82 (declarator -> pointer direct_declarator .)
    VOID            reduce using rule 82 (declarator -> pointer direct_declarator .)
    CHAR            reduce using rule 82 (declarator -> pointer direct_declarator .)
    SHORT           reduce using rule 82 (declarator -> pointer direct_declarator .)
    INT             reduce using rule 82 (declarator -> pointer direct_declarator .)
    LONG            reduce using rule 82 (declarator -> pointer direct_declarator .)
    FLOAT           reduce using rule 82 (declarator -> pointer direct_declarator .)
    DOUBLE          reduce using rule 82 (declarator -> pointer direct_declarator .)
    SIGNED          reduce using rule 82 (declarator -> pointer direct_declarator .)
    UNSIGNED        reduce using rule 82 (declarator -> pointer direct_declarator .)
    BOOL            reduce using rule 82 (declarator -> pointer direct_declarator .)
    STRUCT          reduce using rule 82 (declarator -> pointer direct_declarator .)
    {               reduce using rule 82 (declarator -> pointer direct_declarator .)
    ,               reduce using rule 82 (declarator -> pointer direct_declarator .)
    ;               reduce using rule 82 (declarator -> pointer direct_declarator .)
    )               reduce using rule 82 (declarator -> pointer direct_declarator .)
    [               shift and go to state 44
    (               shift and go to state 45


state 47

    (13) init_declarator_list -> init_declarator_list , . init_declarator
    (10) init_declarator -> . declarator
    (11) init_declarator -> . declarator = initializer
    (81) declarator -> . direct_declarator
    (82) declarator -> . pointer direct_declarator
    (84) direct_declarator -> . identifier
    (85) direct_declarator -> . direct_declarator [ assignment_expression_orempty ]
    (86) direct_declarator -> . direct_declarator ( parameter_list )
    (87) direct_declarator -> . direct_declarator ( identifier_list_orempty )
    (124) pointer -> . *
    (125) pointer -> . * pointer
    (38) identifier -> . IDENTIFIER

    *               shift and go to state 29
    IDENTIFIER      shift and go to state 31

    init_declarator                shift and go to state 93
    declarator                     shift and go to state 54
    direct_declarator              shift and go to state 24
    pointer                        shift and go to state 25
    identifier                     shift and go to state 28

state 48

    (125) pointer -> * pointer .

    IDENTIFIER      reduce using rule 125 (pointer -> * pointer .)


state 49

    (118) struct_specifier -> STRUCT identifier { . struct_declaration_list }
    (119) struct_declaration_list -> . struct_declaration
    (120) struct_declaration_list -> . struct_declaration_list struct_declaration
    (121) struct_declaration -> . specifier_qualifier_list struct_declarator_list ;
    (83) specifier_qualifier_list -> . type_specifier specifier_qualifier_list_orempty
    (18) type_specifier -> . VOID
    (19) type_specifier -> . CHAR
    (20) type_specifier -> . SHORT
    (21) type_specifier -> . INT
    (22) type_specifier -> . LONG
    (23) type_specifier -> . FLOAT
    (24) type_specifier -> . DOUBLE
    (25) type_specifier -> . SIGNED
    (26) type_specifier -> . UNSIGNED
    (27) type_specifier -> . BOOL
    (28) type_specifier -> . struct_specifier
    (114) struct_specifier -> . STRUCT identifier
    (115) struct_specifier -> . STRUCT { struct_declaration_list }
    (118) struct_specifier -> . STRUCT identifier { struct_declaration_list }

    VOID            shift and go to state 9
    CHAR            shift and go to state 10
    SHORT           shift and go to state 11
    INT             shift and go to state 12
    LONG            shift and go to state 13
    FLOAT           shift and go to state 14
    DOUBLE          shift and go to state 15
    SIGNED          shift and go to state 16
    UNSIGNED        shift and go to state 17
    BOOL            shift and go to state 18
    STRUCT          shift and go to state 20

    struct_declaration_list        shift and go to state 94
    struct_declaration             shift and go to state 51
    specifier_qualifier_list       shift and go to state 52
    type_specifier                 shift and go to state 53
    struct_specifier               shift and go to state 19

state 50

    (115) struct_specifier -> STRUCT { struct_declaration_list . }
    (120) struct_declaration_list -> struct_declaration_list . struct_declaration
    (121) struct_declaration -> . specifier_qualifier_list struct_declarator_list ;
    (83) specifier_qualifier_list -> . type_specifier specifier_qualifier_list_orempty
    (18) type_specifier -> . VOID
    (19) type_specifier -> . CHAR
    (20) type_specifier -> . SHORT
    (21) type_specifier -> . INT
    (22) type_specifier -> . LONG
    (23) type_specifier -> . FLOAT
    (24) type_specifier -> . DOUBLE
    (25) type_specifier -> . SIGNED
    (26) type_specifier -> . UNSIGNED
    (27) type_specifier -> . BOOL
    (28) type_specifier -> . struct_specifier
    (114) struct_specifier -> . STRUCT identifier
    (115) struct_specifier -> . STRUCT { struct_declaration_list }
    (118) struct_specifier -> . STRUCT identifier { struct_declaration_list }

    }               shift and go to state 95
    VOID            shift and go to state 9
    CHAR            shift and go to state 10
    SHORT           shift and go to state 11
    INT             shift and go to state 12
    LONG            shift and go to state 13
    FLOAT           shift and go to state 14
    DOUBLE          shift and go to state 15
    SIGNED          shift and go to state 16
    UNSIGNED        shift and go to state 17
    BOOL            shift and go to state 18
    STRUCT          shift and go to state 20

    struct_declaration             shift and go to state 96
    specifier_qualifier_list       shift and go to state 52
    type_specifier                 shift and go to state 53
    struct_specifier               shift and go to state 19

state 51

    (119) struct_declaration_list -> struct_declaration .

    }               reduce using rule 119 (struct_declaration_list -> struct_declaration .)
    VOID            reduce using rule 119 (struct_declaration_list -> struct_declaration .)
    CHAR            reduce using rule 119 (struct_declaration_list -> struct_declaration .)
    SHORT           reduce using rule 119 (struct_declaration_list -> struct_declaration .)
    INT             reduce using rule 119 (struct_declaration_list -> struct_declaration .)
    LONG            reduce using rule 119 (struct_declaration_list -> struct_declaration .)
    FLOAT           reduce using rule 119 (struct_declaration_list -> struct_declaration .)
    DOUBLE          reduce using rule 119 (struct_declaration_list -> struct_declaration .)
    SIGNED          reduce using rule 119 (struct_declaration_list -> struct_declaration .)
    UNSIGNED        reduce using rule 119 (struct_declaration_list -> struct_declaration .)
    BOOL            reduce using rule 119 (struct_declaration_list -> struct_declaration .)
    STRUCT          reduce using rule 119 (struct_declaration_list -> struct_declaration .)


state 52

    (121) struct_declaration -> specifier_qualifier_list . struct_declarator_list ;
    (122) struct_declarator_list -> . declarator
    (123) struct_declarator_list -> . struct_declarator_list , declarator
    (81) declarator -> . direct_declarator
    (82) declarator -> . pointer direct_declarator
    (84) direct_declarator -> . identifier
    (85) direct_declarator -> . direct_declarator [ assignment_expression_orempty ]
    (86) direct_declarator -> . direct_declarator ( parameter_list )
    (87) direct_declarator -> . direct_declarator ( identifier_list_orempty )
    (124) pointer -> . *
    (125) pointer -> . * pointer
    (38) identifier -> . IDENTIFIER

    *               shift and go to state 29
    IDENTIFIER      shift and go to state 31

    struct_declarator_list         shift and go to state 97
    declarator                     shift and go to state 98
    direct_declarator              shift and go to state 24
    pointer                        shift and go to state 25
    identifier                     shift and go to state 28

state 53

    (83) specifier_qualifier_list -> type_specifier . specifier_qualifier_list_orempty
    (66) specifier_qualifier_list_orempty -> . empty
    (67) specifier_qualifier_list_orempty -> . specifier_qualifier_list
    (16) empty -> .
    (83) specifier_qualifier_list -> . type_specifier specifier_qualifier_list_orempty
    (18) type_specifier -> . VOID
    (19) type_specifier -> . CHAR
    (20) type_specifier -> . SHORT
    (21) type_specifier -> . INT
    (22) type_specifier -> . LONG
    (23) type_specifier -> . FLOAT
    (24) type_specifier -> . DOUBLE
    (25) type_specifier -> . SIGNED
    (26) type_specifier -> . UNSIGNED
    (27) type_specifier -> . BOOL
    (28) type_specifier -> . struct_specifier
    (114) struct_specifier -> . STRUCT identifier
    (115) struct_specifier -> . STRUCT { struct_declaration_list }
    (118) struct_specifier -> . STRUCT identifier { struct_declaration_list }

    *               reduce using rule 16 (empty -> .)
    IDENTIFIER      reduce using rule 16 (empty -> .)
    VOID            shift and go to state 9
    CHAR            shift and go to state 10
    SHORT           shift and go to state 11
    INT             shift and go to state 12
    LONG            shift and go to state 13
    FLOAT           shift and go to state 14
    DOUBLE          shift and go to state 15
    SIGNED          shift and go to state 16
    UNSIGNED        shift and go to state 17
    BOOL            shift and go to state 18
    STRUCT          shift and go to state 20

    type_specifier                 shift and go to state 53
    specifier_qualifier_list_orempty shift and go to state 99
    empty                          shift and go to state 100
    specifier_qualifier_list       shift and go to state 101
    struct_specifier               shift and go to state 19

state 54

    (10) init_declarator -> declarator .
    (11) init_declarator -> declarator . = initializer

    ,               reduce using rule 10 (init_declarator -> declarator .)
    ;               reduce using rule 10 (init_declarator -> declarator .)
    =               shift and go to state 39


state 55

    (93) function_definition -> declaration_specifiers declarator declaration_list_orempty compound_statement .

    VOID            reduce using rule 93 (function_definition -> declaration_specifiers declarator declaration_list_orempty compound_statement .)
    CHAR            reduce using rule 93 (function_definition -> declaration_specifiers declarator declaration_list_orempty compound_statement .)
    SHORT           reduce using rule 93 (function_definition -> declaration_specifiers declarator declaration_list_orempty compound_statement .)
    INT             reduce using rule 93 (function_definition -> declaration_specifiers declarator declaration_list_orempty compound_statement .)
    LONG            reduce using rule 93 (function_definition -> declaration_specifiers declarator declaration_list_orempty compound_statement .)
    FLOAT           reduce using rule 93 (function_definition -> declaration_specifiers declarator declaration_list_orempty compound_statement .)
    DOUBLE          reduce using rule 93 (function_definition -> declaration_specifiers declarator declaration_list_orempty compound_statement .)
    SIGNED          reduce using rule 93 (function_definition -> declaration_specifiers declarator declaration_list_orempty compound_statement .)
    UNSIGNED        reduce using rule 93 (function_definition -> declaration_specifiers declarator declaration_list_orempty compound_statement .)
    BOOL            reduce using rule 93 (function_definition -> declaration_specifiers declarator declaration_list_orempty compound_statement .)
    STRUCT          reduce using rule 93 (function_definition -> declaration_specifiers declarator declaration_list_orempty compound_statement .)
    $end            reduce using rule 93 (function_definition -> declaration_specifiers declarator declaration_list_orempty compound_statement .)


state 56

    (74) compound_statement -> { . block_item_list_orempty }
    (62) block_item_list_orempty -> . empty
    (63) block_item_list_orempty -> . block_item_list
    (16) empty -> .
    (70) block_item_list -> . block_item
    (71) block_item_list -> . block_item_list block_item
    (68) block_item -> . declaration
    (69) block_item -> . statement
    (31) declaration -> . declaration_specifiers init_declarator_list_orempty ;
    (109) statement -> . compound_statement
    (110) statement -> . selection_statement
    (111) statement -> . expression_statement
    (112) statement -> . iteration_statement
    (113) statement -> . jump_statement
    (17) declaration_specifiers -> . type_specifier declaration_specifiers_orempty
    (74) compound_statement -> . { block_item_list_orempty }
    (106) selection_statement -> . IF ( expression ) statement
    (107) selection_statement -> . IF ( expression ) statement ELSE statement
    (92) expression_statement -> . expression_orempty ;
    (108) iteration_statement -> . WHILE ( expression ) statement
    (39) jump_statement -> . BREAK ;
    (40) jump_statement -> . CONTINUE ;
    (41) jump_statement -> . RETURN ;
    (42) jump_statement -> . RETURN expression ;
    (18) type_specifier -> . VOID
    (19) type_specifier -> . CHAR
    (20) type_specifier -> . SHORT
    (21) type_specifier -> . INT
    (22) type_specifier -> . LONG
    (23) type_specifier -> . FLOAT
    (24) type_specifier -> . DOUBLE
    (25) type_specifier -> . SIGNED
    (26) type_specifier -> . UNSIGNED
    (27) type_specifier -> . BOOL
    (28) type_specifier -> . struct_specifier
    (72) expression_orempty -> . empty
    (73) expression_orempty -> . expression
    (114) struct_specifier -> . STRUCT identifier
    (115) struct_specifier -> . STRUCT { struct_declaration_list }
    (118) struct_specifier -> . STRUCT identifier { struct_declaration_list }
    (90) expression -> . assignment_expression
    (91) expression -> . expression , assignment_expression
    (60) assignment_expression -> . conditional_expression
    (61) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (75) conditional_expression -> . binary_expression
    (132) unary_expression -> . postfix_expression
    (133) unary_expression -> . unary_operator cast_expression
    (136) binary_expression -> . cast_expression
    (137) binary_expression -> . binary_expression * binary_expression
    (138) binary_expression -> . binary_expression / binary_expression
    (139) binary_expression -> . binary_expression % binary_expression
    (140) binary_expression -> . binary_expression + binary_expression
    (141) binary_expression -> . binary_expression - binary_expression
    (142) binary_expression -> . binary_expression RIGHT_OP binary_expression
    (143) binary_expression -> . binary_expression LEFT_OP binary_expression
    (144) binary_expression -> . binary_expression < binary_expression
    (145) binary_expression -> . binary_expression LTE binary_expression
    (146) binary_expression -> . binary_expression GTE binary_expression
    (147) binary_expression -> . binary_expression > binary_expression
    (148) binary_expression -> . binary_expression EQ_OP binary_expression
    (149) binary_expression -> . binary_expression NEQ_OP binary_expression
    (150) binary_expression -> . binary_expression & binary_expression
    (151) binary_expression -> . binary_expression | binary_expression
    (152) binary_expression -> . binary_expression ^ binary_expression
    (153) binary_expression -> . binary_expression AND_OP binary_expression
    (154) binary_expression -> . binary_expression OR_OP binary_expression
    (97) postfix_expression -> . primary_expression
    (98) postfix_expression -> . postfix_expression [ expression ]
    (99) postfix_expression -> . postfix_expression ( argument_expression_list )
    (100) postfix_expression -> . postfix_expression ( )
    (101) postfix_expression -> . postfix_expression PTR_OP identifier
    (126) unary_operator -> . &
    (127) unary_operator -> . *
    (128) unary_operator -> . +
    (129) unary_operator -> . -
    (130) unary_operator -> . ~
    (131) unary_operator -> . !
    (155) cast_expression -> . unary_expression
    (102) primary_expression -> . identifier
    (103) primary_expression -> . constant
    (104) primary_expression -> . unified_string_literal
    (105) primary_expression -> . ( expression )
    (38) identifier -> . IDENTIFIER
    (76) constant -> . INTEGER_CONSTANT
    (77) constant -> . CHAR_CONSTANT
    (78) constant -> . FLOAT_CONSTANT
    (79) constant -> . BOOL_CONSTANT
    (134) unified_string_literal -> . STRING_CONSTANT
    (135) unified_string_literal -> . unified_string_literal STRING_CONSTANT

    }               reduce using rule 16 (empty -> .)
    ;               reduce using rule 16 (empty -> .)
    {               shift and go to state 56
    IF              shift and go to state 113
    WHILE           shift and go to state 116
    BREAK           shift and go to state 117
    CONTINUE        shift and go to state 118
    RETURN          shift and go to state 119
    VOID            shift and go to state 9
    CHAR            shift and go to state 10
    SHORT           shift and go to state 11
    INT             shift and go to state 12
    LONG            shift and go to state 13
    FLOAT           shift and go to state 14
    DOUBLE          shift and go to state 15
    SIGNED          shift and go to state 16
    UNSIGNED        shift and go to state 17
    BOOL            shift and go to state 18
    STRUCT          shift and go to state 20
    &               shift and go to state 69
    *               shift and go to state 66
    +               shift and go to state 67
    -               shift and go to state 68
    ~               shift and go to state 73
    !               shift and go to state 74
    (               shift and go to state 71
    IDENTIFIER      shift and go to state 31
    INTEGER_CONSTANT shift and go to state 77
    CHAR_CONSTANT   shift and go to state 78
    FLOAT_CONSTANT  shift and go to state 79
    BOOL_CONSTANT   shift and go to state 80
    STRING_CONSTANT shift and go to state 81

    block_item_list_orempty        shift and go to state 102
    empty                          shift and go to state 103
    block_item_list                shift and go to state 104
    block_item                     shift and go to state 105
    declaration                    shift and go to state 106
    statement                      shift and go to state 107
    declaration_specifiers         shift and go to state 37
    compound_statement             shift and go to state 108
    selection_statement            shift and go to state 109
    expression_statement           shift and go to state 110
    iteration_statement            shift and go to state 111
    jump_statement                 shift and go to state 112
    type_specifier                 shift and go to state 8
    expression                     shift and go to state 114
    expression_orempty             shift and go to state 115
    struct_specifier               shift and go to state 19
    identifier                     shift and go to state 72
    assignment_expression          shift and go to state 120
    conditional_expression         shift and go to state 60
    unary_expression               shift and go to state 61
    binary_expression              shift and go to state 62
    postfix_expression             shift and go to state 63
    unary_operator                 shift and go to state 64
    cast_expression                shift and go to state 65
    primary_expression             shift and go to state 70
    constant                       shift and go to state 75
    unified_string_literal         shift and go to state 76

state 57

    (11) init_declarator -> declarator = initializer .

    ,               reduce using rule 11 (init_declarator -> declarator = initializer .)
    ;               reduce using rule 11 (init_declarator -> declarator = initializer .)


state 58

    (5) initializer -> assignment_expression .

    ,               reduce using rule 5 (initializer -> assignment_expression .)
    ;               reduce using rule 5 (initializer -> assignment_expression .)
    }               reduce using rule 5 (initializer -> assignment_expression .)


state 59

    (6) initializer -> { . initializer_list_orempty }
    (7) initializer -> { . initializer_list , }
    (116) initializer_list_orempty -> . empty
    (117) initializer_list_orempty -> . initializer_list
    (8) initializer_list -> . initializer
    (9) initializer_list -> . initializer_list , initializer
    (16) empty -> .
    (5) initializer -> . assignment_expression
    (6) initializer -> . { initializer_list_orempty }
    (7) initializer -> . { initializer_list , }
    (60) assignment_expression -> . conditional_expression
    (61) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (75) conditional_expression -> . binary_expression
    (132) unary_expression -> . postfix_expression
    (133) unary_expression -> . unary_operator cast_expression
    (136) binary_expression -> . cast_expression
    (137) binary_expression -> . binary_expression * binary_expression
    (138) binary_expression -> . binary_expression / binary_expression
    (139) binary_expression -> . binary_expression % binary_expression
    (140) binary_expression -> . binary_expression + binary_expression
    (141) binary_expression -> . binary_expression - binary_expression
    (142) binary_expression -> . binary_expression RIGHT_OP binary_expression
    (143) binary_expression -> . binary_expression LEFT_OP binary_expression
    (144) binary_expression -> . binary_expression < binary_expression
    (145) binary_expression -> . binary_expression LTE binary_expression
    (146) binary_expression -> . binary_expression GTE binary_expression
    (147) binary_expression -> . binary_expression > binary_expression
    (148) binary_expression -> . binary_expression EQ_OP binary_expression
    (149) binary_expression -> . binary_expression NEQ_OP binary_expression
    (150) binary_expression -> . binary_expression & binary_expression
    (151) binary_expression -> . binary_expression | binary_expression
    (152) binary_expression -> . binary_expression ^ binary_expression
    (153) binary_expression -> . binary_expression AND_OP binary_expression
    (154) binary_expression -> . binary_expression OR_OP binary_expression
    (97) postfix_expression -> . primary_expression
    (98) postfix_expression -> . postfix_expression [ expression ]
    (99) postfix_expression -> . postfix_expression ( argument_expression_list )
    (100) postfix_expression -> . postfix_expression ( )
    (101) postfix_expression -> . postfix_expression PTR_OP identifier
    (126) unary_operator -> . &
    (127) unary_operator -> . *
    (128) unary_operator -> . +
    (129) unary_operator -> . -
    (130) unary_operator -> . ~
    (131) unary_operator -> . !
    (155) cast_expression -> . unary_expression
    (102) primary_expression -> . identifier
    (103) primary_expression -> . constant
    (104) primary_expression -> . unified_string_literal
    (105) primary_expression -> . ( expression )
    (38) identifier -> . IDENTIFIER
    (76) constant -> . INTEGER_CONSTANT
    (77) constant -> . CHAR_CONSTANT
    (78) constant -> . FLOAT_CONSTANT
    (79) constant -> . BOOL_CONSTANT
    (134) unified_string_literal -> . STRING_CONSTANT
    (135) unified_string_literal -> . unified_string_literal STRING_CONSTANT

    }               reduce using rule 16 (empty -> .)
    {               shift and go to state 59
    &               shift and go to state 69
    *               shift and go to state 66
    +               shift and go to state 67
    -               shift and go to state 68
    ~               shift and go to state 73
    !               shift and go to state 74
    (               shift and go to state 71
    IDENTIFIER      shift and go to state 31
    INTEGER_CONSTANT shift and go to state 77
    CHAR_CONSTANT   shift and go to state 78
    FLOAT_CONSTANT  shift and go to state 79
    BOOL_CONSTANT   shift and go to state 80
    STRING_CONSTANT shift and go to state 81

    initializer_list_orempty       shift and go to state 121
    initializer_list               shift and go to state 122
    empty                          shift and go to state 123
    initializer                    shift and go to state 124
    assignment_expression          shift and go to state 58
    conditional_expression         shift and go to state 60
    unary_expression               shift and go to state 61
    binary_expression              shift and go to state 62
    postfix_expression             shift and go to state 63
    unary_operator                 shift and go to state 64
    cast_expression                shift and go to state 65
    primary_expression             shift and go to state 70
    identifier                     shift and go to state 72
    constant                       shift and go to state 75
    unified_string_literal         shift and go to state 76

state 60

    (60) assignment_expression -> conditional_expression .

    ,               reduce using rule 60 (assignment_expression -> conditional_expression .)
    ;               reduce using rule 60 (assignment_expression -> conditional_expression .)
    ]               reduce using rule 60 (assignment_expression -> conditional_expression .)
    }               reduce using rule 60 (assignment_expression -> conditional_expression .)
    )               reduce using rule 60 (assignment_expression -> conditional_expression .)


state 61

    (61) assignment_expression -> unary_expression . assignment_operator assignment_expression
    (155) cast_expression -> unary_expression .
    (47) assignment_operator -> . =
    (48) assignment_operator -> . MUL_ASSIGN
    (49) assignment_operator -> . DIV_ASSIGN
    (50) assignment_operator -> . MOD_ASSIGN
    (51) assignment_operator -> . ADD_ASSIGN
    (52) assignment_operator -> . SUB_ASSIGN
    (53) assignment_operator -> . LEFT_ASSIGN
    (54) assignment_operator -> . RIGHT_ASSIGN
    (55) assignment_operator -> . AND_ASSIGN
    (56) assignment_operator -> . XOR_ASSIGN
    (57) assignment_operator -> . OR_ASSIGN

    *               reduce using rule 155 (cast_expression -> unary_expression .)
    /               reduce using rule 155 (cast_expression -> unary_expression .)
    %               reduce using rule 155 (cast_expression -> unary_expression .)
    +               reduce using rule 155 (cast_expression -> unary_expression .)
    -               reduce using rule 155 (cast_expression -> unary_expression .)
    RIGHT_OP        reduce using rule 155 (cast_expression -> unary_expression .)
    LEFT_OP         reduce using rule 155 (cast_expression -> unary_expression .)
    <               reduce using rule 155 (cast_expression -> unary_expression .)
    LTE             reduce using rule 155 (cast_expression -> unary_expression .)
    GTE             reduce using rule 155 (cast_expression -> unary_expression .)
    >               reduce using rule 155 (cast_expression -> unary_expression .)
    EQ_OP           reduce using rule 155 (cast_expression -> unary_expression .)
    NEQ_OP          reduce using rule 155 (cast_expression -> unary_expression .)
    &               reduce using rule 155 (cast_expression -> unary_expression .)
    |               reduce using rule 155 (cast_expression -> unary_expression .)
    ^               reduce using rule 155 (cast_expression -> unary_expression .)
    AND_OP          reduce using rule 155 (cast_expression -> unary_expression .)
    OR_OP           reduce using rule 155 (cast_expression -> unary_expression .)
    ,               reduce using rule 155 (cast_expression -> unary_expression .)
    ;               reduce using rule 155 (cast_expression -> unary_expression .)
    ]               reduce using rule 155 (cast_expression -> unary_expression .)
    }               reduce using rule 155 (cast_expression -> unary_expression .)
    )               reduce using rule 155 (cast_expression -> unary_expression .)
    =               shift and go to state 126
    MUL_ASSIGN      shift and go to state 127
    DIV_ASSIGN      shift and go to state 128
    MOD_ASSIGN      shift and go to state 129
    ADD_ASSIGN      shift and go to state 130
    SUB_ASSIGN      shift and go to state 131
    LEFT_ASSIGN     shift and go to state 132
    RIGHT_ASSIGN    shift and go to state 133
    AND_ASSIGN      shift and go to state 134
    XOR_ASSIGN      shift and go to state 135
    OR_ASSIGN       shift and go to state 136

    assignment_operator            shift and go to state 125

state 62

    (75) conditional_expression -> binary_expression .
    (137) binary_expression -> binary_expression . * binary_expression
    (138) binary_expression -> binary_expression . / binary_expression
    (139) binary_expression -> binary_expression . % binary_expression
    (140) binary_expression -> binary_expression . + binary_expression
    (141) binary_expression -> binary_expression . - binary_expression
    (142) binary_expression -> binary_expression . RIGHT_OP binary_expression
    (143) binary_expression -> binary_expression . LEFT_OP binary_expression
    (144) binary_expression -> binary_expression . < binary_expression
    (145) binary_expression -> binary_expression . LTE binary_expression
    (146) binary_expression -> binary_expression . GTE binary_expression
    (147) binary_expression -> binary_expression . > binary_expression
    (148) binary_expression -> binary_expression . EQ_OP binary_expression
    (149) binary_expression -> binary_expression . NEQ_OP binary_expression
    (150) binary_expression -> binary_expression . & binary_expression
    (151) binary_expression -> binary_expression . | binary_expression
    (152) binary_expression -> binary_expression . ^ binary_expression
    (153) binary_expression -> binary_expression . AND_OP binary_expression
    (154) binary_expression -> binary_expression . OR_OP binary_expression

    ,               reduce using rule 75 (conditional_expression -> binary_expression .)
    ;               reduce using rule 75 (conditional_expression -> binary_expression .)
    ]               reduce using rule 75 (conditional_expression -> binary_expression .)
    }               reduce using rule 75 (conditional_expression -> binary_expression .)
    )               reduce using rule 75 (conditional_expression -> binary_expression .)
    *               shift and go to state 137
    /               shift and go to state 138
    %               shift and go to state 139
    +               shift and go to state 140
    -               shift and go to state 141
    RIGHT_OP        shift and go to state 142
    LEFT_OP         shift and go to state 143
    <               shift and go to state 144
    LTE             shift and go to state 145
    GTE             shift and go to state 146
    >               shift and go to state 147
    EQ_OP           shift and go to state 148
    NEQ_OP          shift and go to state 149
    &               shift and go to state 150
    |               shift and go to state 151
    ^               shift and go to state 152
    AND_OP          shift and go to state 153
    OR_OP           shift and go to state 154


state 63

    (132) unary_expression -> postfix_expression .
    (98) postfix_expression -> postfix_expression . [ expression ]
    (99) postfix_expression -> postfix_expression . ( argument_expression_list )
    (100) postfix_expression -> postfix_expression . ( )
    (101) postfix_expression -> postfix_expression . PTR_OP identifier

    =               reduce using rule 132 (unary_expression -> postfix_expression .)
    MUL_ASSIGN      reduce using rule 132 (unary_expression -> postfix_expression .)
    DIV_ASSIGN      reduce using rule 132 (unary_expression -> postfix_expression .)
    MOD_ASSIGN      reduce using rule 132 (unary_expression -> postfix_expression .)
    ADD_ASSIGN      reduce using rule 132 (unary_expression -> postfix_expression .)
    SUB_ASSIGN      reduce using rule 132 (unary_expression -> postfix_expression .)
    LEFT_ASSIGN     reduce using rule 132 (unary_expression -> postfix_expression .)
    RIGHT_ASSIGN    reduce using rule 132 (unary_expression -> postfix_expression .)
    AND_ASSIGN      reduce using rule 132 (unary_expression -> postfix_expression .)
    XOR_ASSIGN      reduce using rule 132 (unary_expression -> postfix_expression .)
    OR_ASSIGN       reduce using rule 132 (unary_expression -> postfix_expression .)
    *               reduce using rule 132 (unary_expression -> postfix_expression .)
    /               reduce using rule 132 (unary_expression -> postfix_expression .)
    %               reduce using rule 132 (unary_expression -> postfix_expression .)
    +               reduce using rule 132 (unary_expression -> postfix_expression .)
    -               reduce using rule 132 (unary_expression -> postfix_expression .)
    RIGHT_OP        reduce using rule 132 (unary_expression -> postfix_expression .)
    LEFT_OP         reduce using rule 132 (unary_expression -> postfix_expression .)
    <               reduce using rule 132 (unary_expression -> postfix_expression .)
    LTE             reduce using rule 132 (unary_expression -> postfix_expression .)
    GTE             reduce using rule 132 (unary_expression -> postfix_expression .)
    >               reduce using rule 132 (unary_expression -> postfix_expression .)
    EQ_OP           reduce using rule 132 (unary_expression -> postfix_expression .)
    NEQ_OP          reduce using rule 132 (unary_expression -> postfix_expression .)
    &               reduce using rule 132 (unary_expression -> postfix_expression .)
    |               reduce using rule 132 (unary_expression -> postfix_expression .)
    ^               reduce using rule 132 (unary_expression -> postfix_expression .)
    AND_OP          reduce using rule 132 (unary_expression -> postfix_expression .)
    OR_OP           reduce using rule 132 (unary_expression -> postfix_expression .)
    ,               reduce using rule 132 (unary_expression -> postfix_expression .)
    ;               reduce using rule 132 (unary_expression -> postfix_expression .)
    ]               reduce using rule 132 (unary_expression -> postfix_expression .)
    }               reduce using rule 132 (unary_expression -> postfix_expression .)
    )               reduce using rule 132 (unary_expression -> postfix_expression .)
    [               shift and go to state 155
    (               shift and go to state 156
    PTR_OP          shift and go to state 157


state 64

    (133) unary_expression -> unary_operator . cast_expression
    (155) cast_expression -> . unary_expression
    (132) unary_expression -> . postfix_expression
    (133) unary_expression -> . unary_operator cast_expression
    (97) postfix_expression -> . primary_expression
    (98) postfix_expression -> . postfix_expression [ expression ]
    (99) postfix_expression -> . postfix_expression ( argument_expression_list )
    (100) postfix_expression -> . postfix_expression ( )
    (101) postfix_expression -> . postfix_expression PTR_OP identifier
    (126) unary_operator -> . &
    (127) unary_operator -> . *
    (128) unary_operator -> . +
    (129) unary_operator -> . -
    (130) unary_operator -> . ~
    (131) unary_operator -> . !
    (102) primary_expression -> . identifier
    (103) primary_expression -> . constant
    (104) primary_expression -> . unified_string_literal
    (105) primary_expression -> . ( expression )
    (38) identifier -> . IDENTIFIER
    (76) constant -> . INTEGER_CONSTANT
    (77) constant -> . CHAR_CONSTANT
    (78) constant -> . FLOAT_CONSTANT
    (79) constant -> . BOOL_CONSTANT
    (134) unified_string_literal -> . STRING_CONSTANT
    (135) unified_string_literal -> . unified_string_literal STRING_CONSTANT

    &               shift and go to state 69
    *               shift and go to state 66
    +               shift and go to state 67
    -               shift and go to state 68
    ~               shift and go to state 73
    !               shift and go to state 74
    (               shift and go to state 71
    IDENTIFIER      shift and go to state 31
    INTEGER_CONSTANT shift and go to state 77
    CHAR_CONSTANT   shift and go to state 78
    FLOAT_CONSTANT  shift and go to state 79
    BOOL_CONSTANT   shift and go to state 80
    STRING_CONSTANT shift and go to state 81

    unary_operator                 shift and go to state 64
    cast_expression                shift and go to state 158
    unary_expression               shift and go to state 159
    postfix_expression             shift and go to state 63
    primary_expression             shift and go to state 70
    identifier                     shift and go to state 72
    constant                       shift and go to state 75
    unified_string_literal         shift and go to state 76

state 65

    (136) binary_expression -> cast_expression .

    *               reduce using rule 136 (binary_expression -> cast_expression .)
    /               reduce using rule 136 (binary_expression -> cast_expression .)
    %               reduce using rule 136 (binary_expression -> cast_expression .)
    +               reduce using rule 136 (binary_expression -> cast_expression .)
    -               reduce using rule 136 (binary_expression -> cast_expression .)
    RIGHT_OP        reduce using rule 136 (binary_expression -> cast_expression .)
    LEFT_OP         reduce using rule 136 (binary_expression -> cast_expression .)
    <               reduce using rule 136 (binary_expression -> cast_expression .)
    LTE             reduce using rule 136 (binary_expression -> cast_expression .)
    GTE             reduce using rule 136 (binary_expression -> cast_expression .)
    >               reduce using rule 136 (binary_expression -> cast_expression .)
    EQ_OP           reduce using rule 136 (binary_expression -> cast_expression .)
    NEQ_OP          reduce using rule 136 (binary_expression -> cast_expression .)
    &               reduce using rule 136 (binary_expression -> cast_expression .)
    |               reduce using rule 136 (binary_expression -> cast_expression .)
    ^               reduce using rule 136 (binary_expression -> cast_expression .)
    AND_OP          reduce using rule 136 (binary_expression -> cast_expression .)
    OR_OP           reduce using rule 136 (binary_expression -> cast_expression .)
    ,               reduce using rule 136 (binary_expression -> cast_expression .)
    ;               reduce using rule 136 (binary_expression -> cast_expression .)
    ]               reduce using rule 136 (binary_expression -> cast_expression .)
    }               reduce using rule 136 (binary_expression -> cast_expression .)
    )               reduce using rule 136 (binary_expression -> cast_expression .)


state 66

    (127) unary_operator -> * .

    &               reduce using rule 127 (unary_operator -> * .)
    *               reduce using rule 127 (unary_operator -> * .)
    +               reduce using rule 127 (unary_operator -> * .)
    -               reduce using rule 127 (unary_operator -> * .)
    ~               reduce using rule 127 (unary_operator -> * .)
    !               reduce using rule 127 (unary_operator -> * .)
    (               reduce using rule 127 (unary_operator -> * .)
    IDENTIFIER      reduce using rule 127 (unary_operator -> * .)
    INTEGER_CONSTANT reduce using rule 127 (unary_operator -> * .)
    CHAR_CONSTANT   reduce using rule 127 (unary_operator -> * .)
    FLOAT_CONSTANT  reduce using rule 127 (unary_operator -> * .)
    BOOL_CONSTANT   reduce using rule 127 (unary_operator -> * .)
    STRING_CONSTANT reduce using rule 127 (unary_operator -> * .)


state 67

    (128) unary_operator -> + .

    &               reduce using rule 128 (unary_operator -> + .)
    *               reduce using rule 128 (unary_operator -> + .)
    +               reduce using rule 128 (unary_operator -> + .)
    -               reduce using rule 128 (unary_operator -> + .)
    ~               reduce using rule 128 (unary_operator -> + .)
    !               reduce using rule 128 (unary_operator -> + .)
    (               reduce using rule 128 (unary_operator -> + .)
    IDENTIFIER      reduce using rule 128 (unary_operator -> + .)
    INTEGER_CONSTANT reduce using rule 128 (unary_operator -> + .)
    CHAR_CONSTANT   reduce using rule 128 (unary_operator -> + .)
    FLOAT_CONSTANT  reduce using rule 128 (unary_operator -> + .)
    BOOL_CONSTANT   reduce using rule 128 (unary_operator -> + .)
    STRING_CONSTANT reduce using rule 128 (unary_operator -> + .)


state 68

    (129) unary_operator -> - .

    &               reduce using rule 129 (unary_operator -> - .)
    *               reduce using rule 129 (unary_operator -> - .)
    +               reduce using rule 129 (unary_operator -> - .)
    -               reduce using rule 129 (unary_operator -> - .)
    ~               reduce using rule 129 (unary_operator -> - .)
    !               reduce using rule 129 (unary_operator -> - .)
    (               reduce using rule 129 (unary_operator -> - .)
    IDENTIFIER      reduce using rule 129 (unary_operator -> - .)
    INTEGER_CONSTANT reduce using rule 129 (unary_operator -> - .)
    CHAR_CONSTANT   reduce using rule 129 (unary_operator -> - .)
    FLOAT_CONSTANT  reduce using rule 129 (unary_operator -> - .)
    BOOL_CONSTANT   reduce using rule 129 (unary_operator -> - .)
    STRING_CONSTANT reduce using rule 129 (unary_operator -> - .)


state 69

    (126) unary_operator -> & .

    &               reduce using rule 126 (unary_operator -> & .)
    *               reduce using rule 126 (unary_operator -> & .)
    +               reduce using rule 126 (unary_operator -> & .)
    -               reduce using rule 126 (unary_operator -> & .)
    ~               reduce using rule 126 (unary_operator -> & .)
    !               reduce using rule 126 (unary_operator -> & .)
    (               reduce using rule 126 (unary_operator -> & .)
    IDENTIFIER      reduce using rule 126 (unary_operator -> & .)
    INTEGER_CONSTANT reduce using rule 126 (unary_operator -> & .)
    CHAR_CONSTANT   reduce using rule 126 (unary_operator -> & .)
    FLOAT_CONSTANT  reduce using rule 126 (unary_operator -> & .)
    BOOL_CONSTANT   reduce using rule 126 (unary_operator -> & .)
    STRING_CONSTANT reduce using rule 126 (unary_operator -> & .)


state 70

    (97) postfix_expression -> primary_expression .

    [               reduce using rule 97 (postfix_expression -> primary_expression .)
    (               reduce using rule 97 (postfix_expression -> primary_expression .)
    PTR_OP          reduce using rule 97 (postfix_expression -> primary_expression .)
    =               reduce using rule 97 (postfix_expression -> primary_expression .)
    MUL_ASSIGN      reduce using rule 97 (postfix_expression -> primary_expression .)
    DIV_ASSIGN      reduce using rule 97 (postfix_expression -> primary_expression .)
    MOD_ASSIGN      reduce using rule 97 (postfix_expression -> primary_expression .)
    ADD_ASSIGN      reduce using rule 97 (postfix_expression -> primary_expression .)
    SUB_ASSIGN      reduce using rule 97 (postfix_expression -> primary_expression .)
    LEFT_ASSIGN     reduce using rule 97 (postfix_expression -> primary_expression .)
    RIGHT_ASSIGN    reduce using rule 97 (postfix_expression -> primary_expression .)
    AND_ASSIGN      reduce using rule 97 (postfix_expression -> primary_expression .)
    XOR_ASSIGN      reduce using rule 97 (postfix_expression -> primary_expression .)
    OR_ASSIGN       reduce using rule 97 (postfix_expression -> primary_expression .)
    *               reduce using rule 97 (postfix_expression -> primary_expression .)
    /               reduce using rule 97 (postfix_expression -> primary_expression .)
    %               reduce using rule 97 (postfix_expression -> primary_expression .)
    +               reduce using rule 97 (postfix_expression -> primary_expression .)
    -               reduce using rule 97 (postfix_expression -> primary_expression .)
    RIGHT_OP        reduce using rule 97 (postfix_expression -> primary_expression .)
    LEFT_OP         reduce using rule 97 (postfix_expression -> primary_expression .)
    <               reduce using rule 97 (postfix_expression -> primary_expression .)
    LTE             reduce using rule 97 (postfix_expression -> primary_expression .)
    GTE             reduce using rule 97 (postfix_expression -> primary_expression .)
    >               reduce using rule 97 (postfix_expression -> primary_expression .)
    EQ_OP           reduce using rule 97 (postfix_expression -> primary_expression .)
    NEQ_OP          reduce using rule 97 (postfix_expression -> primary_expression .)
    &               reduce using rule 97 (postfix_expression -> primary_expression .)
    |               reduce using rule 97 (postfix_expression -> primary_expression .)
    ^               reduce using rule 97 (postfix_expression -> primary_expression .)
    AND_OP          reduce using rule 97 (postfix_expression -> primary_expression .)
    OR_OP           reduce using rule 97 (postfix_expression -> primary_expression .)
    ,               reduce using rule 97 (postfix_expression -> primary_expression .)
    ;               reduce using rule 97 (postfix_expression -> primary_expression .)
    ]               reduce using rule 97 (postfix_expression -> primary_expression .)
    }               reduce using rule 97 (postfix_expression -> primary_expression .)
    )               reduce using rule 97 (postfix_expression -> primary_expression .)


state 71

    (105) primary_expression -> ( . expression )
    (90) expression -> . assignment_expression
    (91) expression -> . expression , assignment_expression
    (60) assignment_expression -> . conditional_expression
    (61) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (75) conditional_expression -> . binary_expression
    (132) unary_expression -> . postfix_expression
    (133) unary_expression -> . unary_operator cast_expression
    (136) binary_expression -> . cast_expression
    (137) binary_expression -> . binary_expression * binary_expression
    (138) binary_expression -> . binary_expression / binary_expression
    (139) binary_expression -> . binary_expression % binary_expression
    (140) binary_expression -> . binary_expression + binary_expression
    (141) binary_expression -> . binary_expression - binary_expression
    (142) binary_expression -> . binary_expression RIGHT_OP binary_expression
    (143) binary_expression -> . binary_expression LEFT_OP binary_expression
    (144) binary_expression -> . binary_expression < binary_expression
    (145) binary_expression -> . binary_expression LTE binary_expression
    (146) binary_expression -> . binary_expression GTE binary_expression
    (147) binary_expression -> . binary_expression > binary_expression
    (148) binary_expression -> . binary_expression EQ_OP binary_expression
    (149) binary_expression -> . binary_expression NEQ_OP binary_expression
    (150) binary_expression -> . binary_expression & binary_expression
    (151) binary_expression -> . binary_expression | binary_expression
    (152) binary_expression -> . binary_expression ^ binary_expression
    (153) binary_expression -> . binary_expression AND_OP binary_expression
    (154) binary_expression -> . binary_expression OR_OP binary_expression
    (97) postfix_expression -> . primary_expression
    (98) postfix_expression -> . postfix_expression [ expression ]
    (99) postfix_expression -> . postfix_expression ( argument_expression_list )
    (100) postfix_expression -> . postfix_expression ( )
    (101) postfix_expression -> . postfix_expression PTR_OP identifier
    (126) unary_operator -> . &
    (127) unary_operator -> . *
    (128) unary_operator -> . +
    (129) unary_operator -> . -
    (130) unary_operator -> . ~
    (131) unary_operator -> . !
    (155) cast_expression -> . unary_expression
    (102) primary_expression -> . identifier
    (103) primary_expression -> . constant
    (104) primary_expression -> . unified_string_literal
    (105) primary_expression -> . ( expression )
    (38) identifier -> . IDENTIFIER
    (76) constant -> . INTEGER_CONSTANT
    (77) constant -> . CHAR_CONSTANT
    (78) constant -> . FLOAT_CONSTANT
    (79) constant -> . BOOL_CONSTANT
    (134) unified_string_literal -> . STRING_CONSTANT
    (135) unified_string_literal -> . unified_string_literal STRING_CONSTANT

    &               shift and go to state 69
    *               shift and go to state 66
    +               shift and go to state 67
    -               shift and go to state 68
    ~               shift and go to state 73
    !               shift and go to state 74
    (               shift and go to state 71
    IDENTIFIER      shift and go to state 31
    INTEGER_CONSTANT shift and go to state 77
    CHAR_CONSTANT   shift and go to state 78
    FLOAT_CONSTANT  shift and go to state 79
    BOOL_CONSTANT   shift and go to state 80
    STRING_CONSTANT shift and go to state 81

    expression                     shift and go to state 160
    assignment_expression          shift and go to state 120
    conditional_expression         shift and go to state 60
    unary_expression               shift and go to state 61
    binary_expression              shift and go to state 62
    postfix_expression             shift and go to state 63
    unary_operator                 shift and go to state 64
    cast_expression                shift and go to state 65
    primary_expression             shift and go to state 70
    identifier                     shift and go to state 72
    constant                       shift and go to state 75
    unified_string_literal         shift and go to state 76

state 72

    (102) primary_expression -> identifier .

    [               reduce using rule 102 (primary_expression -> identifier .)
    (               reduce using rule 102 (primary_expression -> identifier .)
    PTR_OP          reduce using rule 102 (primary_expression -> identifier .)
    =               reduce using rule 102 (primary_expression -> identifier .)
    MUL_ASSIGN      reduce using rule 102 (primary_expression -> identifier .)
    DIV_ASSIGN      reduce using rule 102 (primary_expression -> identifier .)
    MOD_ASSIGN      reduce using rule 102 (primary_expression -> identifier .)
    ADD_ASSIGN      reduce using rule 102 (primary_expression -> identifier .)
    SUB_ASSIGN      reduce using rule 102 (primary_expression -> identifier .)
    LEFT_ASSIGN     reduce using rule 102 (primary_expression -> identifier .)
    RIGHT_ASSIGN    reduce using rule 102 (primary_expression -> identifier .)
    AND_ASSIGN      reduce using rule 102 (primary_expression -> identifier .)
    XOR_ASSIGN      reduce using rule 102 (primary_expression -> identifier .)
    OR_ASSIGN       reduce using rule 102 (primary_expression -> identifier .)
    *               reduce using rule 102 (primary_expression -> identifier .)
    /               reduce using rule 102 (primary_expression -> identifier .)
    %               reduce using rule 102 (primary_expression -> identifier .)
    +               reduce using rule 102 (primary_expression -> identifier .)
    -               reduce using rule 102 (primary_expression -> identifier .)
    RIGHT_OP        reduce using rule 102 (primary_expression -> identifier .)
    LEFT_OP         reduce using rule 102 (primary_expression -> identifier .)
    <               reduce using rule 102 (primary_expression -> identifier .)
    LTE             reduce using rule 102 (primary_expression -> identifier .)
    GTE             reduce using rule 102 (primary_expression -> identifier .)
    >               reduce using rule 102 (primary_expression -> identifier .)
    EQ_OP           reduce using rule 102 (primary_expression -> identifier .)
    NEQ_OP          reduce using rule 102 (primary_expression -> identifier .)
    &               reduce using rule 102 (primary_expression -> identifier .)
    |               reduce using rule 102 (primary_expression -> identifier .)
    ^               reduce using rule 102 (primary_expression -> identifier .)
    AND_OP          reduce using rule 102 (primary_expression -> identifier .)
    OR_OP           reduce using rule 102 (primary_expression -> identifier .)
    ,               reduce using rule 102 (primary_expression -> identifier .)
    ;               reduce using rule 102 (primary_expression -> identifier .)
    ]               reduce using rule 102 (primary_expression -> identifier .)
    }               reduce using rule 102 (primary_expression -> identifier .)
    )               reduce using rule 102 (primary_expression -> identifier .)


state 73

    (130) unary_operator -> ~ .

    &               reduce using rule 130 (unary_operator -> ~ .)
    *               reduce using rule 130 (unary_operator -> ~ .)
    +               reduce using rule 130 (unary_operator -> ~ .)
    -               reduce using rule 130 (unary_operator -> ~ .)
    ~               reduce using rule 130 (unary_operator -> ~ .)
    !               reduce using rule 130 (unary_operator -> ~ .)
    (               reduce using rule 130 (unary_operator -> ~ .)
    IDENTIFIER      reduce using rule 130 (unary_operator -> ~ .)
    INTEGER_CONSTANT reduce using rule 130 (unary_operator -> ~ .)
    CHAR_CONSTANT   reduce using rule 130 (unary_operator -> ~ .)
    FLOAT_CONSTANT  reduce using rule 130 (unary_operator -> ~ .)
    BOOL_CONSTANT   reduce using rule 130 (unary_operator -> ~ .)
    STRING_CONSTANT reduce using rule 130 (unary_operator -> ~ .)


state 74

    (131) unary_operator -> ! .

    &               reduce using rule 131 (unary_operator -> ! .)
    *               reduce using rule 131 (unary_operator -> ! .)
    +               reduce using rule 131 (unary_operator -> ! .)
    -               reduce using rule 131 (unary_operator -> ! .)
    ~               reduce using rule 131 (unary_operator -> ! .)
    !               reduce using rule 131 (unary_operator -> ! .)
    (               reduce using rule 131 (unary_operator -> ! .)
    IDENTIFIER      reduce using rule 131 (unary_operator -> ! .)
    INTEGER_CONSTANT reduce using rule 131 (unary_operator -> ! .)
    CHAR_CONSTANT   reduce using rule 131 (unary_operator -> ! .)
    FLOAT_CONSTANT  reduce using rule 131 (unary_operator -> ! .)
    BOOL_CONSTANT   reduce using rule 131 (unary_operator -> ! .)
    STRING_CONSTANT reduce using rule 131 (unary_operator -> ! .)


state 75

    (103) primary_expression -> constant .

    [               reduce using rule 103 (primary_expression -> constant .)
    (               reduce using rule 103 (primary_expression -> constant .)
    PTR_OP          reduce using rule 103 (primary_expression -> constant .)
    =               reduce using rule 103 (primary_expression -> constant .)
    MUL_ASSIGN      reduce using rule 103 (primary_expression -> constant .)
    DIV_ASSIGN      reduce using rule 103 (primary_expression -> constant .)
    MOD_ASSIGN      reduce using rule 103 (primary_expression -> constant .)
    ADD_ASSIGN      reduce using rule 103 (primary_expression -> constant .)
    SUB_ASSIGN      reduce using rule 103 (primary_expression -> constant .)
    LEFT_ASSIGN     reduce using rule 103 (primary_expression -> constant .)
    RIGHT_ASSIGN    reduce using rule 103 (primary_expression -> constant .)
    AND_ASSIGN      reduce using rule 103 (primary_expression -> constant .)
    XOR_ASSIGN      reduce using rule 103 (primary_expression -> constant .)
    OR_ASSIGN       reduce using rule 103 (primary_expression -> constant .)
    *               reduce using rule 103 (primary_expression -> constant .)
    /               reduce using rule 103 (primary_expression -> constant .)
    %               reduce using rule 103 (primary_expression -> constant .)
    +               reduce using rule 103 (primary_expression -> constant .)
    -               reduce using rule 103 (primary_expression -> constant .)
    RIGHT_OP        reduce using rule 103 (primary_expression -> constant .)
    LEFT_OP         reduce using rule 103 (primary_expression -> constant .)
    <               reduce using rule 103 (primary_expression -> constant .)
    LTE             reduce using rule 103 (primary_expression -> constant .)
    GTE             reduce using rule 103 (primary_expression -> constant .)
    >               reduce using rule 103 (primary_expression -> constant .)
    EQ_OP           reduce using rule 103 (primary_expression -> constant .)
    NEQ_OP          reduce using rule 103 (primary_expression -> constant .)
    &               reduce using rule 103 (primary_expression -> constant .)
    |               reduce using rule 103 (primary_expression -> constant .)
    ^               reduce using rule 103 (primary_expression -> constant .)
    AND_OP          reduce using rule 103 (primary_expression -> constant .)
    OR_OP           reduce using rule 103 (primary_expression -> constant .)
    ,               reduce using rule 103 (primary_expression -> constant .)
    ;               reduce using rule 103 (primary_expression -> constant .)
    ]               reduce using rule 103 (primary_expression -> constant .)
    }               reduce using rule 103 (primary_expression -> constant .)
    )               reduce using rule 103 (primary_expression -> constant .)


state 76

    (104) primary_expression -> unified_string_literal .
    (135) unified_string_literal -> unified_string_literal . STRING_CONSTANT

    [               reduce using rule 104 (primary_expression -> unified_string_literal .)
    (               reduce using rule 104 (primary_expression -> unified_string_literal .)
    PTR_OP          reduce using rule 104 (primary_expression -> unified_string_literal .)
    =               reduce using rule 104 (primary_expression -> unified_string_literal .)
    MUL_ASSIGN      reduce using rule 104 (primary_expression -> unified_string_literal .)
    DIV_ASSIGN      reduce using rule 104 (primary_expression -> unified_string_literal .)
    MOD_ASSIGN      reduce using rule 104 (primary_expression -> unified_string_literal .)
    ADD_ASSIGN      reduce using rule 104 (primary_expression -> unified_string_literal .)
    SUB_ASSIGN      reduce using rule 104 (primary_expression -> unified_string_literal .)
    LEFT_ASSIGN     reduce using rule 104 (primary_expression -> unified_string_literal .)
    RIGHT_ASSIGN    reduce using rule 104 (primary_expression -> unified_string_literal .)
    AND_ASSIGN      reduce using rule 104 (primary_expression -> unified_string_literal .)
    XOR_ASSIGN      reduce using rule 104 (primary_expression -> unified_string_literal .)
    OR_ASSIGN       reduce using rule 104 (primary_expression -> unified_string_literal .)
    *               reduce using rule 104 (primary_expression -> unified_string_literal .)
    /               reduce using rule 104 (primary_expression -> unified_string_literal .)
    %               reduce using rule 104 (primary_expression -> unified_string_literal .)
    +               reduce using rule 104 (primary_expression -> unified_string_literal .)
    -               reduce using rule 104 (primary_expression -> unified_string_literal .)
    RIGHT_OP        reduce using rule 104 (primary_expression -> unified_string_literal .)
    LEFT_OP         reduce using rule 104 (primary_expression -> unified_string_literal .)
    <               reduce using rule 104 (primary_expression -> unified_string_literal .)
    LTE             reduce using rule 104 (primary_expression -> unified_string_literal .)
    GTE             reduce using rule 104 (primary_expression -> unified_string_literal .)
    >               reduce using rule 104 (primary_expression -> unified_string_literal .)
    EQ_OP           reduce using rule 104 (primary_expression -> unified_string_literal .)
    NEQ_OP          reduce using rule 104 (primary_expression -> unified_string_literal .)
    &               reduce using rule 104 (primary_expression -> unified_string_literal .)
    |               reduce using rule 104 (primary_expression -> unified_string_literal .)
    ^               reduce using rule 104 (primary_expression -> unified_string_literal .)
    AND_OP          reduce using rule 104 (primary_expression -> unified_string_literal .)
    OR_OP           reduce using rule 104 (primary_expression -> unified_string_literal .)
    ,               reduce using rule 104 (primary_expression -> unified_string_literal .)
    ;               reduce using rule 104 (primary_expression -> unified_string_literal .)
    ]               reduce using rule 104 (primary_expression -> unified_string_literal .)
    }               reduce using rule 104 (primary_expression -> unified_string_literal .)
    )               reduce using rule 104 (primary_expression -> unified_string_literal .)
    STRING_CONSTANT shift and go to state 161


state 77

    (76) constant -> INTEGER_CONSTANT .

    [               reduce using rule 76 (constant -> INTEGER_CONSTANT .)
    (               reduce using rule 76 (constant -> INTEGER_CONSTANT .)
    PTR_OP          reduce using rule 76 (constant -> INTEGER_CONSTANT .)
    =               reduce using rule 76 (constant -> INTEGER_CONSTANT .)
    MUL_ASSIGN      reduce using rule 76 (constant -> INTEGER_CONSTANT .)
    DIV_ASSIGN      reduce using rule 76 (constant -> INTEGER_CONSTANT .)
    MOD_ASSIGN      reduce using rule 76 (constant -> INTEGER_CONSTANT .)
    ADD_ASSIGN      reduce using rule 76 (constant -> INTEGER_CONSTANT .)
    SUB_ASSIGN      reduce using rule 76 (constant -> INTEGER_CONSTANT .)
    LEFT_ASSIGN     reduce using rule 76 (constant -> INTEGER_CONSTANT .)
    RIGHT_ASSIGN    reduce using rule 76 (constant -> INTEGER_CONSTANT .)
    AND_ASSIGN      reduce using rule 76 (constant -> INTEGER_CONSTANT .)
    XOR_ASSIGN      reduce using rule 76 (constant -> INTEGER_CONSTANT .)
    OR_ASSIGN       reduce using rule 76 (constant -> INTEGER_CONSTANT .)
    *               reduce using rule 76 (constant -> INTEGER_CONSTANT .)
    /               reduce using rule 76 (constant -> INTEGER_CONSTANT .)
    %               reduce using rule 76 (constant -> INTEGER_CONSTANT .)
    +               reduce using rule 76 (constant -> INTEGER_CONSTANT .)
    -               reduce using rule 76 (constant -> INTEGER_CONSTANT .)
    RIGHT_OP        reduce using rule 76 (constant -> INTEGER_CONSTANT .)
    LEFT_OP         reduce using rule 76 (constant -> INTEGER_CONSTANT .)
    <               reduce using rule 76 (constant -> INTEGER_CONSTANT .)
    LTE             reduce using rule 76 (constant -> INTEGER_CONSTANT .)
    GTE             reduce using rule 76 (constant -> INTEGER_CONSTANT .)
    >               reduce using rule 76 (constant -> INTEGER_CONSTANT .)
    EQ_OP           reduce using rule 76 (constant -> INTEGER_CONSTANT .)
    NEQ_OP          reduce using rule 76 (constant -> INTEGER_CONSTANT .)
    &               reduce using rule 76 (constant -> INTEGER_CONSTANT .)
    |               reduce using rule 76 (constant -> INTEGER_CONSTANT .)
    ^               reduce using rule 76 (constant -> INTEGER_CONSTANT .)
    AND_OP          reduce using rule 76 (constant -> INTEGER_CONSTANT .)
    OR_OP           reduce using rule 76 (constant -> INTEGER_CONSTANT .)
    ,               reduce using rule 76 (constant -> INTEGER_CONSTANT .)
    ;               reduce using rule 76 (constant -> INTEGER_CONSTANT .)
    ]               reduce using rule 76 (constant -> INTEGER_CONSTANT .)
    }               reduce using rule 76 (constant -> INTEGER_CONSTANT .)
    )               reduce using rule 76 (constant -> INTEGER_CONSTANT .)


state 78

    (77) constant -> CHAR_CONSTANT .

    [               reduce using rule 77 (constant -> CHAR_CONSTANT .)
    (               reduce using rule 77 (constant -> CHAR_CONSTANT .)
    PTR_OP          reduce using rule 77 (constant -> CHAR_CONSTANT .)
    =               reduce using rule 77 (constant -> CHAR_CONSTANT .)
    MUL_ASSIGN      reduce using rule 77 (constant -> CHAR_CONSTANT .)
    DIV_ASSIGN      reduce using rule 77 (constant -> CHAR_CONSTANT .)
    MOD_ASSIGN      reduce using rule 77 (constant -> CHAR_CONSTANT .)
    ADD_ASSIGN      reduce using rule 77 (constant -> CHAR_CONSTANT .)
    SUB_ASSIGN      reduce using rule 77 (constant -> CHAR_CONSTANT .)
    LEFT_ASSIGN     reduce using rule 77 (constant -> CHAR_CONSTANT .)
    RIGHT_ASSIGN    reduce using rule 77 (constant -> CHAR_CONSTANT .)
    AND_ASSIGN      reduce using rule 77 (constant -> CHAR_CONSTANT .)
    XOR_ASSIGN      reduce using rule 77 (constant -> CHAR_CONSTANT .)
    OR_ASSIGN       reduce using rule 77 (constant -> CHAR_CONSTANT .)
    *               reduce using rule 77 (constant -> CHAR_CONSTANT .)
    /               reduce using rule 77 (constant -> CHAR_CONSTANT .)
    %               reduce using rule 77 (constant -> CHAR_CONSTANT .)
    +               reduce using rule 77 (constant -> CHAR_CONSTANT .)
    -               reduce using rule 77 (constant -> CHAR_CONSTANT .)
    RIGHT_OP        reduce using rule 77 (constant -> CHAR_CONSTANT .)
    LEFT_OP         reduce using rule 77 (constant -> CHAR_CONSTANT .)
    <               reduce using rule 77 (constant -> CHAR_CONSTANT .)
    LTE             reduce using rule 77 (constant -> CHAR_CONSTANT .)
    GTE             reduce using rule 77 (constant -> CHAR_CONSTANT .)
    >               reduce using rule 77 (constant -> CHAR_CONSTANT .)
    EQ_OP           reduce using rule 77 (constant -> CHAR_CONSTANT .)
    NEQ_OP          reduce using rule 77 (constant -> CHAR_CONSTANT .)
    &               reduce using rule 77 (constant -> CHAR_CONSTANT .)
    |               reduce using rule 77 (constant -> CHAR_CONSTANT .)
    ^               reduce using rule 77 (constant -> CHAR_CONSTANT .)
    AND_OP          reduce using rule 77 (constant -> CHAR_CONSTANT .)
    OR_OP           reduce using rule 77 (constant -> CHAR_CONSTANT .)
    ,               reduce using rule 77 (constant -> CHAR_CONSTANT .)
    ;               reduce using rule 77 (constant -> CHAR_CONSTANT .)
    ]               reduce using rule 77 (constant -> CHAR_CONSTANT .)
    }               reduce using rule 77 (constant -> CHAR_CONSTANT .)
    )               reduce using rule 77 (constant -> CHAR_CONSTANT .)


state 79

    (78) constant -> FLOAT_CONSTANT .

    [               reduce using rule 78 (constant -> FLOAT_CONSTANT .)
    (               reduce using rule 78 (constant -> FLOAT_CONSTANT .)
    PTR_OP          reduce using rule 78 (constant -> FLOAT_CONSTANT .)
    =               reduce using rule 78 (constant -> FLOAT_CONSTANT .)
    MUL_ASSIGN      reduce using rule 78 (constant -> FLOAT_CONSTANT .)
    DIV_ASSIGN      reduce using rule 78 (constant -> FLOAT_CONSTANT .)
    MOD_ASSIGN      reduce using rule 78 (constant -> FLOAT_CONSTANT .)
    ADD_ASSIGN      reduce using rule 78 (constant -> FLOAT_CONSTANT .)
    SUB_ASSIGN      reduce using rule 78 (constant -> FLOAT_CONSTANT .)
    LEFT_ASSIGN     reduce using rule 78 (constant -> FLOAT_CONSTANT .)
    RIGHT_ASSIGN    reduce using rule 78 (constant -> FLOAT_CONSTANT .)
    AND_ASSIGN      reduce using rule 78 (constant -> FLOAT_CONSTANT .)
    XOR_ASSIGN      reduce using rule 78 (constant -> FLOAT_CONSTANT .)
    OR_ASSIGN       reduce using rule 78 (constant -> FLOAT_CONSTANT .)
    *               reduce using rule 78 (constant -> FLOAT_CONSTANT .)
    /               reduce using rule 78 (constant -> FLOAT_CONSTANT .)
    %               reduce using rule 78 (constant -> FLOAT_CONSTANT .)
    +               reduce using rule 78 (constant -> FLOAT_CONSTANT .)
    -               reduce using rule 78 (constant -> FLOAT_CONSTANT .)
    RIGHT_OP        reduce using rule 78 (constant -> FLOAT_CONSTANT .)
    LEFT_OP         reduce using rule 78 (constant -> FLOAT_CONSTANT .)
    <               reduce using rule 78 (constant -> FLOAT_CONSTANT .)
    LTE             reduce using rule 78 (constant -> FLOAT_CONSTANT .)
    GTE             reduce using rule 78 (constant -> FLOAT_CONSTANT .)
    >               reduce using rule 78 (constant -> FLOAT_CONSTANT .)
    EQ_OP           reduce using rule 78 (constant -> FLOAT_CONSTANT .)
    NEQ_OP          reduce using rule 78 (constant -> FLOAT_CONSTANT .)
    &               reduce using rule 78 (constant -> FLOAT_CONSTANT .)
    |               reduce using rule 78 (constant -> FLOAT_CONSTANT .)
    ^               reduce using rule 78 (constant -> FLOAT_CONSTANT .)
    AND_OP          reduce using rule 78 (constant -> FLOAT_CONSTANT .)
    OR_OP           reduce using rule 78 (constant -> FLOAT_CONSTANT .)
    ,               reduce using rule 78 (constant -> FLOAT_CONSTANT .)
    ;               reduce using rule 78 (constant -> FLOAT_CONSTANT .)
    ]               reduce using rule 78 (constant -> FLOAT_CONSTANT .)
    }               reduce using rule 78 (constant -> FLOAT_CONSTANT .)
    )               reduce using rule 78 (constant -> FLOAT_CONSTANT .)


state 80

    (79) constant -> BOOL_CONSTANT .

    [               reduce using rule 79 (constant -> BOOL_CONSTANT .)
    (               reduce using rule 79 (constant -> BOOL_CONSTANT .)
    PTR_OP          reduce using rule 79 (constant -> BOOL_CONSTANT .)
    =               reduce using rule 79 (constant -> BOOL_CONSTANT .)
    MUL_ASSIGN      reduce using rule 79 (constant -> BOOL_CONSTANT .)
    DIV_ASSIGN      reduce using rule 79 (constant -> BOOL_CONSTANT .)
    MOD_ASSIGN      reduce using rule 79 (constant -> BOOL_CONSTANT .)
    ADD_ASSIGN      reduce using rule 79 (constant -> BOOL_CONSTANT .)
    SUB_ASSIGN      reduce using rule 79 (constant -> BOOL_CONSTANT .)
    LEFT_ASSIGN     reduce using rule 79 (constant -> BOOL_CONSTANT .)
    RIGHT_ASSIGN    reduce using rule 79 (constant -> BOOL_CONSTANT .)
    AND_ASSIGN      reduce using rule 79 (constant -> BOOL_CONSTANT .)
    XOR_ASSIGN      reduce using rule 79 (constant -> BOOL_CONSTANT .)
    OR_ASSIGN       reduce using rule 79 (constant -> BOOL_CONSTANT .)
    *               reduce using rule 79 (constant -> BOOL_CONSTANT .)
    /               reduce using rule 79 (constant -> BOOL_CONSTANT .)
    %               reduce using rule 79 (constant -> BOOL_CONSTANT .)
    +               reduce using rule 79 (constant -> BOOL_CONSTANT .)
    -               reduce using rule 79 (constant -> BOOL_CONSTANT .)
    RIGHT_OP        reduce using rule 79 (constant -> BOOL_CONSTANT .)
    LEFT_OP         reduce using rule 79 (constant -> BOOL_CONSTANT .)
    <               reduce using rule 79 (constant -> BOOL_CONSTANT .)
    LTE             reduce using rule 79 (constant -> BOOL_CONSTANT .)
    GTE             reduce using rule 79 (constant -> BOOL_CONSTANT .)
    >               reduce using rule 79 (constant -> BOOL_CONSTANT .)
    EQ_OP           reduce using rule 79 (constant -> BOOL_CONSTANT .)
    NEQ_OP          reduce using rule 79 (constant -> BOOL_CONSTANT .)
    &               reduce using rule 79 (constant -> BOOL_CONSTANT .)
    |               reduce using rule 79 (constant -> BOOL_CONSTANT .)
    ^               reduce using rule 79 (constant -> BOOL_CONSTANT .)
    AND_OP          reduce using rule 79 (constant -> BOOL_CONSTANT .)
    OR_OP           reduce using rule 79 (constant -> BOOL_CONSTANT .)
    ,               reduce using rule 79 (constant -> BOOL_CONSTANT .)
    ;               reduce using rule 79 (constant -> BOOL_CONSTANT .)
    ]               reduce using rule 79 (constant -> BOOL_CONSTANT .)
    }               reduce using rule 79 (constant -> BOOL_CONSTANT .)
    )               reduce using rule 79 (constant -> BOOL_CONSTANT .)


state 81

    (134) unified_string_literal -> STRING_CONSTANT .

    STRING_CONSTANT reduce using rule 134 (unified_string_literal -> STRING_CONSTANT .)
    [               reduce using rule 134 (unified_string_literal -> STRING_CONSTANT .)
    (               reduce using rule 134 (unified_string_literal -> STRING_CONSTANT .)
    PTR_OP          reduce using rule 134 (unified_string_literal -> STRING_CONSTANT .)
    =               reduce using rule 134 (unified_string_literal -> STRING_CONSTANT .)
    MUL_ASSIGN      reduce using rule 134 (unified_string_literal -> STRING_CONSTANT .)
    DIV_ASSIGN      reduce using rule 134 (unified_string_literal -> STRING_CONSTANT .)
    MOD_ASSIGN      reduce using rule 134 (unified_string_literal -> STRING_CONSTANT .)
    ADD_ASSIGN      reduce using rule 134 (unified_string_literal -> STRING_CONSTANT .)
    SUB_ASSIGN      reduce using rule 134 (unified_string_literal -> STRING_CONSTANT .)
    LEFT_ASSIGN     reduce using rule 134 (unified_string_literal -> STRING_CONSTANT .)
    RIGHT_ASSIGN    reduce using rule 134 (unified_string_literal -> STRING_CONSTANT .)
    AND_ASSIGN      reduce using rule 134 (unified_string_literal -> STRING_CONSTANT .)
    XOR_ASSIGN      reduce using rule 134 (unified_string_literal -> STRING_CONSTANT .)
    OR_ASSIGN       reduce using rule 134 (unified_string_literal -> STRING_CONSTANT .)
    *               reduce using rule 134 (unified_string_literal -> STRING_CONSTANT .)
    /               reduce using rule 134 (unified_string_literal -> STRING_CONSTANT .)
    %               reduce using rule 134 (unified_string_literal -> STRING_CONSTANT .)
    +               reduce using rule 134 (unified_string_literal -> STRING_CONSTANT .)
    -               reduce using rule 134 (unified_string_literal -> STRING_CONSTANT .)
    RIGHT_OP        reduce using rule 134 (unified_string_literal -> STRING_CONSTANT .)
    LEFT_OP         reduce using rule 134 (unified_string_literal -> STRING_CONSTANT .)
    <               reduce using rule 134 (unified_string_literal -> STRING_CONSTANT .)
    LTE             reduce using rule 134 (unified_string_literal -> STRING_CONSTANT .)
    GTE             reduce using rule 134 (unified_string_literal -> STRING_CONSTANT .)
    >               reduce using rule 134 (unified_string_literal -> STRING_CONSTANT .)
    EQ_OP           reduce using rule 134 (unified_string_literal -> STRING_CONSTANT .)
    NEQ_OP          reduce using rule 134 (unified_string_literal -> STRING_CONSTANT .)
    &               reduce using rule 134 (unified_string_literal -> STRING_CONSTANT .)
    |               reduce using rule 134 (unified_string_literal -> STRING_CONSTANT .)
    ^               reduce using rule 134 (unified_string_literal -> STRING_CONSTANT .)
    AND_OP          reduce using rule 134 (unified_string_literal -> STRING_CONSTANT .)
    OR_OP           reduce using rule 134 (unified_string_literal -> STRING_CONSTANT .)
    ,               reduce using rule 134 (unified_string_literal -> STRING_CONSTANT .)
    ;               reduce using rule 134 (unified_string_literal -> STRING_CONSTANT .)
    ]               reduce using rule 134 (unified_string_literal -> STRING_CONSTANT .)
    }               reduce using rule 134 (unified_string_literal -> STRING_CONSTANT .)
    )               reduce using rule 134 (unified_string_literal -> STRING_CONSTANT .)


state 82

    (33) declaration_list -> declaration_list declaration .

    VOID            reduce using rule 33 (declaration_list -> declaration_list declaration .)
    CHAR            reduce using rule 33 (declaration_list -> declaration_list declaration .)
    SHORT           reduce using rule 33 (declaration_list -> declaration_list declaration .)
    INT             reduce using rule 33 (declaration_list -> declaration_list declaration .)
    LONG            reduce using rule 33 (declaration_list -> declaration_list declaration .)
    FLOAT           reduce using rule 33 (declaration_list -> declaration_list declaration .)
    DOUBLE          reduce using rule 33 (declaration_list -> declaration_list declaration .)
    SIGNED          reduce using rule 33 (declaration_list -> declaration_list declaration .)
    UNSIGNED        reduce using rule 33 (declaration_list -> declaration_list declaration .)
    BOOL            reduce using rule 33 (declaration_list -> declaration_list declaration .)
    STRUCT          reduce using rule 33 (declaration_list -> declaration_list declaration .)
    {               reduce using rule 33 (declaration_list -> declaration_list declaration .)


state 83

    (85) direct_declarator -> direct_declarator [ assignment_expression_orempty . ]

    ]               shift and go to state 162


state 84

    (45) assignment_expression_orempty -> empty .

    ]               reduce using rule 45 (assignment_expression_orempty -> empty .)


state 85

    (46) assignment_expression_orempty -> assignment_expression .

    ]               reduce using rule 46 (assignment_expression_orempty -> assignment_expression .)


state 86

    (86) direct_declarator -> direct_declarator ( parameter_list . )
    (95) parameter_list -> parameter_list . , parameter_declaration

    )               shift and go to state 163
    ,               shift and go to state 164


state 87

    (87) direct_declarator -> direct_declarator ( identifier_list_orempty . )

    )               shift and go to state 165


state 88

    (94) parameter_list -> parameter_declaration .

    )               reduce using rule 94 (parameter_list -> parameter_declaration .)
    ,               reduce using rule 94 (parameter_list -> parameter_declaration .)


state 89

    (34) identifier_list_orempty -> empty .

    )               reduce using rule 34 (identifier_list_orempty -> empty .)


state 90

    (35) identifier_list_orempty -> identifier_list .
    (37) identifier_list -> identifier_list . , identifier

    )               reduce using rule 35 (identifier_list_orempty -> identifier_list .)
    ,               shift and go to state 166


state 91

    (96) parameter_declaration -> declaration_specifiers . declarator
    (81) declarator -> . direct_declarator
    (82) declarator -> . pointer direct_declarator
    (84) direct_declarator -> . identifier
    (85) direct_declarator -> . direct_declarator [ assignment_expression_orempty ]
    (86) direct_declarator -> . direct_declarator ( parameter_list )
    (87) direct_declarator -> . direct_declarator ( identifier_list_orempty )
    (124) pointer -> . *
    (125) pointer -> . * pointer
    (38) identifier -> . IDENTIFIER

    *               shift and go to state 29
    IDENTIFIER      shift and go to state 31

    declarator                     shift and go to state 167
    direct_declarator              shift and go to state 24
    pointer                        shift and go to state 25
    identifier                     shift and go to state 28

state 92

    (36) identifier_list -> identifier .

    ,               reduce using rule 36 (identifier_list -> identifier .)
    )               reduce using rule 36 (identifier_list -> identifier .)


state 93

    (13) init_declarator_list -> init_declarator_list , init_declarator .

    ,               reduce using rule 13 (init_declarator_list -> init_declarator_list , init_declarator .)
    ;               reduce using rule 13 (init_declarator_list -> init_declarator_list , init_declarator .)


state 94

    (118) struct_specifier -> STRUCT identifier { struct_declaration_list . }
    (120) struct_declaration_list -> struct_declaration_list . struct_declaration
    (121) struct_declaration -> . specifier_qualifier_list struct_declarator_list ;
    (83) specifier_qualifier_list -> . type_specifier specifier_qualifier_list_orempty
    (18) type_specifier -> . VOID
    (19) type_specifier -> . CHAR
    (20) type_specifier -> . SHORT
    (21) type_specifier -> . INT
    (22) type_specifier -> . LONG
    (23) type_specifier -> . FLOAT
    (24) type_specifier -> . DOUBLE
    (25) type_specifier -> . SIGNED
    (26) type_specifier -> . UNSIGNED
    (27) type_specifier -> . BOOL
    (28) type_specifier -> . struct_specifier
    (114) struct_specifier -> . STRUCT identifier
    (115) struct_specifier -> . STRUCT { struct_declaration_list }
    (118) struct_specifier -> . STRUCT identifier { struct_declaration_list }

    }               shift and go to state 168
    VOID            shift and go to state 9
    CHAR            shift and go to state 10
    SHORT           shift and go to state 11
    INT             shift and go to state 12
    LONG            shift and go to state 13
    FLOAT           shift and go to state 14
    DOUBLE          shift and go to state 15
    SIGNED          shift and go to state 16
    UNSIGNED        shift and go to state 17
    BOOL            shift and go to state 18
    STRUCT          shift and go to state 20

    struct_declaration             shift and go to state 96
    specifier_qualifier_list       shift and go to state 52
    type_specifier                 shift and go to state 53
    struct_specifier               shift and go to state 19

state 95

    (115) struct_specifier -> STRUCT { struct_declaration_list } .

    VOID            reduce using rule 115 (struct_specifier -> STRUCT { struct_declaration_list } .)
    CHAR            reduce using rule 115 (struct_specifier -> STRUCT { struct_declaration_list } .)
    SHORT           reduce using rule 115 (struct_specifier -> STRUCT { struct_declaration_list } .)
    INT             reduce using rule 115 (struct_specifier -> STRUCT { struct_declaration_list } .)
    LONG            reduce using rule 115 (struct_specifier -> STRUCT { struct_declaration_list } .)
    FLOAT           reduce using rule 115 (struct_specifier -> STRUCT { struct_declaration_list } .)
    DOUBLE          reduce using rule 115 (struct_specifier -> STRUCT { struct_declaration_list } .)
    SIGNED          reduce using rule 115 (struct_specifier -> STRUCT { struct_declaration_list } .)
    UNSIGNED        reduce using rule 115 (struct_specifier -> STRUCT { struct_declaration_list } .)
    BOOL            reduce using rule 115 (struct_specifier -> STRUCT { struct_declaration_list } .)
    STRUCT          reduce using rule 115 (struct_specifier -> STRUCT { struct_declaration_list } .)
    *               reduce using rule 115 (struct_specifier -> STRUCT { struct_declaration_list } .)
    IDENTIFIER      reduce using rule 115 (struct_specifier -> STRUCT { struct_declaration_list } .)
    ;               reduce using rule 115 (struct_specifier -> STRUCT { struct_declaration_list } .)


state 96

    (120) struct_declaration_list -> struct_declaration_list struct_declaration .

    }               reduce using rule 120 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    VOID            reduce using rule 120 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    CHAR            reduce using rule 120 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    SHORT           reduce using rule 120 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    INT             reduce using rule 120 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    LONG            reduce using rule 120 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    FLOAT           reduce using rule 120 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    DOUBLE          reduce using rule 120 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    SIGNED          reduce using rule 120 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    UNSIGNED        reduce using rule 120 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    BOOL            reduce using rule 120 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    STRUCT          reduce using rule 120 (struct_declaration_list -> struct_declaration_list struct_declaration .)


state 97

    (121) struct_declaration -> specifier_qualifier_list struct_declarator_list . ;
    (123) struct_declarator_list -> struct_declarator_list . , declarator

    ;               shift and go to state 169
    ,               shift and go to state 170


state 98

    (122) struct_declarator_list -> declarator .

    ;               reduce using rule 122 (struct_declarator_list -> declarator .)
    ,               reduce using rule 122 (struct_declarator_list -> declarator .)


state 99

    (83) specifier_qualifier_list -> type_specifier specifier_qualifier_list_orempty .

    *               reduce using rule 83 (specifier_qualifier_list -> type_specifier specifier_qualifier_list_orempty .)
    IDENTIFIER      reduce using rule 83 (specifier_qualifier_list -> type_specifier specifier_qualifier_list_orempty .)


state 100

    (66) specifier_qualifier_list_orempty -> empty .

    *               reduce using rule 66 (specifier_qualifier_list_orempty -> empty .)
    IDENTIFIER      reduce using rule 66 (specifier_qualifier_list_orempty -> empty .)


state 101

    (67) specifier_qualifier_list_orempty -> specifier_qualifier_list .

    *               reduce using rule 67 (specifier_qualifier_list_orempty -> specifier_qualifier_list .)
    IDENTIFIER      reduce using rule 67 (specifier_qualifier_list_orempty -> specifier_qualifier_list .)


state 102

    (74) compound_statement -> { block_item_list_orempty . }

    }               shift and go to state 171


state 103

    (62) block_item_list_orempty -> empty .
    (72) expression_orempty -> empty .

    }               reduce using rule 62 (block_item_list_orempty -> empty .)
    ;               reduce using rule 72 (expression_orempty -> empty .)


state 104

    (63) block_item_list_orempty -> block_item_list .
    (71) block_item_list -> block_item_list . block_item
    (68) block_item -> . declaration
    (69) block_item -> . statement
    (31) declaration -> . declaration_specifiers init_declarator_list_orempty ;
    (109) statement -> . compound_statement
    (110) statement -> . selection_statement
    (111) statement -> . expression_statement
    (112) statement -> . iteration_statement
    (113) statement -> . jump_statement
    (17) declaration_specifiers -> . type_specifier declaration_specifiers_orempty
    (74) compound_statement -> . { block_item_list_orempty }
    (106) selection_statement -> . IF ( expression ) statement
    (107) selection_statement -> . IF ( expression ) statement ELSE statement
    (92) expression_statement -> . expression_orempty ;
    (108) iteration_statement -> . WHILE ( expression ) statement
    (39) jump_statement -> . BREAK ;
    (40) jump_statement -> . CONTINUE ;
    (41) jump_statement -> . RETURN ;
    (42) jump_statement -> . RETURN expression ;
    (18) type_specifier -> . VOID
    (19) type_specifier -> . CHAR
    (20) type_specifier -> . SHORT
    (21) type_specifier -> . INT
    (22) type_specifier -> . LONG
    (23) type_specifier -> . FLOAT
    (24) type_specifier -> . DOUBLE
    (25) type_specifier -> . SIGNED
    (26) type_specifier -> . UNSIGNED
    (27) type_specifier -> . BOOL
    (28) type_specifier -> . struct_specifier
    (72) expression_orempty -> . empty
    (73) expression_orempty -> . expression
    (114) struct_specifier -> . STRUCT identifier
    (115) struct_specifier -> . STRUCT { struct_declaration_list }
    (118) struct_specifier -> . STRUCT identifier { struct_declaration_list }
    (16) empty -> .
    (90) expression -> . assignment_expression
    (91) expression -> . expression , assignment_expression
    (60) assignment_expression -> . conditional_expression
    (61) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (75) conditional_expression -> . binary_expression
    (132) unary_expression -> . postfix_expression
    (133) unary_expression -> . unary_operator cast_expression
    (136) binary_expression -> . cast_expression
    (137) binary_expression -> . binary_expression * binary_expression
    (138) binary_expression -> . binary_expression / binary_expression
    (139) binary_expression -> . binary_expression % binary_expression
    (140) binary_expression -> . binary_expression + binary_expression
    (141) binary_expression -> . binary_expression - binary_expression
    (142) binary_expression -> . binary_expression RIGHT_OP binary_expression
    (143) binary_expression -> . binary_expression LEFT_OP binary_expression
    (144) binary_expression -> . binary_expression < binary_expression
    (145) binary_expression -> . binary_expression LTE binary_expression
    (146) binary_expression -> . binary_expression GTE binary_expression
    (147) binary_expression -> . binary_expression > binary_expression
    (148) binary_expression -> . binary_expression EQ_OP binary_expression
    (149) binary_expression -> . binary_expression NEQ_OP binary_expression
    (150) binary_expression -> . binary_expression & binary_expression
    (151) binary_expression -> . binary_expression | binary_expression
    (152) binary_expression -> . binary_expression ^ binary_expression
    (153) binary_expression -> . binary_expression AND_OP binary_expression
    (154) binary_expression -> . binary_expression OR_OP binary_expression
    (97) postfix_expression -> . primary_expression
    (98) postfix_expression -> . postfix_expression [ expression ]
    (99) postfix_expression -> . postfix_expression ( argument_expression_list )
    (100) postfix_expression -> . postfix_expression ( )
    (101) postfix_expression -> . postfix_expression PTR_OP identifier
    (126) unary_operator -> . &
    (127) unary_operator -> . *
    (128) unary_operator -> . +
    (129) unary_operator -> . -
    (130) unary_operator -> . ~
    (131) unary_operator -> . !
    (155) cast_expression -> . unary_expression
    (102) primary_expression -> . identifier
    (103) primary_expression -> . constant
    (104) primary_expression -> . unified_string_literal
    (105) primary_expression -> . ( expression )
    (38) identifier -> . IDENTIFIER
    (76) constant -> . INTEGER_CONSTANT
    (77) constant -> . CHAR_CONSTANT
    (78) constant -> . FLOAT_CONSTANT
    (79) constant -> . BOOL_CONSTANT
    (134) unified_string_literal -> . STRING_CONSTANT
    (135) unified_string_literal -> . unified_string_literal STRING_CONSTANT

    }               reduce using rule 63 (block_item_list_orempty -> block_item_list .)
    {               shift and go to state 56
    IF              shift and go to state 113
    WHILE           shift and go to state 116
    BREAK           shift and go to state 117
    CONTINUE        shift and go to state 118
    RETURN          shift and go to state 119
    VOID            shift and go to state 9
    CHAR            shift and go to state 10
    SHORT           shift and go to state 11
    INT             shift and go to state 12
    LONG            shift and go to state 13
    FLOAT           shift and go to state 14
    DOUBLE          shift and go to state 15
    SIGNED          shift and go to state 16
    UNSIGNED        shift and go to state 17
    BOOL            shift and go to state 18
    STRUCT          shift and go to state 20
    ;               reduce using rule 16 (empty -> .)
    &               shift and go to state 69
    *               shift and go to state 66
    +               shift and go to state 67
    -               shift and go to state 68
    ~               shift and go to state 73
    !               shift and go to state 74
    (               shift and go to state 71
    IDENTIFIER      shift and go to state 31
    INTEGER_CONSTANT shift and go to state 77
    CHAR_CONSTANT   shift and go to state 78
    FLOAT_CONSTANT  shift and go to state 79
    BOOL_CONSTANT   shift and go to state 80
    STRING_CONSTANT shift and go to state 81

    block_item                     shift and go to state 172
    declaration                    shift and go to state 106
    statement                      shift and go to state 107
    declaration_specifiers         shift and go to state 37
    compound_statement             shift and go to state 108
    selection_statement            shift and go to state 109
    expression_statement           shift and go to state 110
    iteration_statement            shift and go to state 111
    jump_statement                 shift and go to state 112
    type_specifier                 shift and go to state 8
    expression                     shift and go to state 114
    expression_orempty             shift and go to state 115
    struct_specifier               shift and go to state 19
    empty                          shift and go to state 173
    identifier                     shift and go to state 72
    assignment_expression          shift and go to state 120
    conditional_expression         shift and go to state 60
    unary_expression               shift and go to state 61
    binary_expression              shift and go to state 62
    postfix_expression             shift and go to state 63
    unary_operator                 shift and go to state 64
    cast_expression                shift and go to state 65
    primary_expression             shift and go to state 70
    constant                       shift and go to state 75
    unified_string_literal         shift and go to state 76

state 105

    (70) block_item_list -> block_item .

    {               reduce using rule 70 (block_item_list -> block_item .)
    IF              reduce using rule 70 (block_item_list -> block_item .)
    WHILE           reduce using rule 70 (block_item_list -> block_item .)
    BREAK           reduce using rule 70 (block_item_list -> block_item .)
    CONTINUE        reduce using rule 70 (block_item_list -> block_item .)
    RETURN          reduce using rule 70 (block_item_list -> block_item .)
    VOID            reduce using rule 70 (block_item_list -> block_item .)
    CHAR            reduce using rule 70 (block_item_list -> block_item .)
    SHORT           reduce using rule 70 (block_item_list -> block_item .)
    INT             reduce using rule 70 (block_item_list -> block_item .)
    LONG            reduce using rule 70 (block_item_list -> block_item .)
    FLOAT           reduce using rule 70 (block_item_list -> block_item .)
    DOUBLE          reduce using rule 70 (block_item_list -> block_item .)
    SIGNED          reduce using rule 70 (block_item_list -> block_item .)
    UNSIGNED        reduce using rule 70 (block_item_list -> block_item .)
    BOOL            reduce using rule 70 (block_item_list -> block_item .)
    STRUCT          reduce using rule 70 (block_item_list -> block_item .)
    &               reduce using rule 70 (block_item_list -> block_item .)
    *               reduce using rule 70 (block_item_list -> block_item .)
    +               reduce using rule 70 (block_item_list -> block_item .)
    -               reduce using rule 70 (block_item_list -> block_item .)
    ~               reduce using rule 70 (block_item_list -> block_item .)
    !               reduce using rule 70 (block_item_list -> block_item .)
    (               reduce using rule 70 (block_item_list -> block_item .)
    IDENTIFIER      reduce using rule 70 (block_item_list -> block_item .)
    INTEGER_CONSTANT reduce using rule 70 (block_item_list -> block_item .)
    CHAR_CONSTANT   reduce using rule 70 (block_item_list -> block_item .)
    FLOAT_CONSTANT  reduce using rule 70 (block_item_list -> block_item .)
    BOOL_CONSTANT   reduce using rule 70 (block_item_list -> block_item .)
    STRING_CONSTANT reduce using rule 70 (block_item_list -> block_item .)
    ;               reduce using rule 70 (block_item_list -> block_item .)
    }               reduce using rule 70 (block_item_list -> block_item .)


state 106

    (68) block_item -> declaration .

    {               reduce using rule 68 (block_item -> declaration .)
    IF              reduce using rule 68 (block_item -> declaration .)
    WHILE           reduce using rule 68 (block_item -> declaration .)
    BREAK           reduce using rule 68 (block_item -> declaration .)
    CONTINUE        reduce using rule 68 (block_item -> declaration .)
    RETURN          reduce using rule 68 (block_item -> declaration .)
    VOID            reduce using rule 68 (block_item -> declaration .)
    CHAR            reduce using rule 68 (block_item -> declaration .)
    SHORT           reduce using rule 68 (block_item -> declaration .)
    INT             reduce using rule 68 (block_item -> declaration .)
    LONG            reduce using rule 68 (block_item -> declaration .)
    FLOAT           reduce using rule 68 (block_item -> declaration .)
    DOUBLE          reduce using rule 68 (block_item -> declaration .)
    SIGNED          reduce using rule 68 (block_item -> declaration .)
    UNSIGNED        reduce using rule 68 (block_item -> declaration .)
    BOOL            reduce using rule 68 (block_item -> declaration .)
    STRUCT          reduce using rule 68 (block_item -> declaration .)
    &               reduce using rule 68 (block_item -> declaration .)
    *               reduce using rule 68 (block_item -> declaration .)
    +               reduce using rule 68 (block_item -> declaration .)
    -               reduce using rule 68 (block_item -> declaration .)
    ~               reduce using rule 68 (block_item -> declaration .)
    !               reduce using rule 68 (block_item -> declaration .)
    (               reduce using rule 68 (block_item -> declaration .)
    IDENTIFIER      reduce using rule 68 (block_item -> declaration .)
    INTEGER_CONSTANT reduce using rule 68 (block_item -> declaration .)
    CHAR_CONSTANT   reduce using rule 68 (block_item -> declaration .)
    FLOAT_CONSTANT  reduce using rule 68 (block_item -> declaration .)
    BOOL_CONSTANT   reduce using rule 68 (block_item -> declaration .)
    STRING_CONSTANT reduce using rule 68 (block_item -> declaration .)
    ;               reduce using rule 68 (block_item -> declaration .)
    }               reduce using rule 68 (block_item -> declaration .)


state 107

    (69) block_item -> statement .

    {               reduce using rule 69 (block_item -> statement .)
    IF              reduce using rule 69 (block_item -> statement .)
    WHILE           reduce using rule 69 (block_item -> statement .)
    BREAK           reduce using rule 69 (block_item -> statement .)
    CONTINUE        reduce using rule 69 (block_item -> statement .)
    RETURN          reduce using rule 69 (block_item -> statement .)
    VOID            reduce using rule 69 (block_item -> statement .)
    CHAR            reduce using rule 69 (block_item -> statement .)
    SHORT           reduce using rule 69 (block_item -> statement .)
    INT             reduce using rule 69 (block_item -> statement .)
    LONG            reduce using rule 69 (block_item -> statement .)
    FLOAT           reduce using rule 69 (block_item -> statement .)
    DOUBLE          reduce using rule 69 (block_item -> statement .)
    SIGNED          reduce using rule 69 (block_item -> statement .)
    UNSIGNED        reduce using rule 69 (block_item -> statement .)
    BOOL            reduce using rule 69 (block_item -> statement .)
    STRUCT          reduce using rule 69 (block_item -> statement .)
    &               reduce using rule 69 (block_item -> statement .)
    *               reduce using rule 69 (block_item -> statement .)
    +               reduce using rule 69 (block_item -> statement .)
    -               reduce using rule 69 (block_item -> statement .)
    ~               reduce using rule 69 (block_item -> statement .)
    !               reduce using rule 69 (block_item -> statement .)
    (               reduce using rule 69 (block_item -> statement .)
    IDENTIFIER      reduce using rule 69 (block_item -> statement .)
    INTEGER_CONSTANT reduce using rule 69 (block_item -> statement .)
    CHAR_CONSTANT   reduce using rule 69 (block_item -> statement .)
    FLOAT_CONSTANT  reduce using rule 69 (block_item -> statement .)
    BOOL_CONSTANT   reduce using rule 69 (block_item -> statement .)
    STRING_CONSTANT reduce using rule 69 (block_item -> statement .)
    ;               reduce using rule 69 (block_item -> statement .)
    }               reduce using rule 69 (block_item -> statement .)


state 108

    (109) statement -> compound_statement .

    {               reduce using rule 109 (statement -> compound_statement .)
    IF              reduce using rule 109 (statement -> compound_statement .)
    WHILE           reduce using rule 109 (statement -> compound_statement .)
    BREAK           reduce using rule 109 (statement -> compound_statement .)
    CONTINUE        reduce using rule 109 (statement -> compound_statement .)
    RETURN          reduce using rule 109 (statement -> compound_statement .)
    VOID            reduce using rule 109 (statement -> compound_statement .)
    CHAR            reduce using rule 109 (statement -> compound_statement .)
    SHORT           reduce using rule 109 (statement -> compound_statement .)
    INT             reduce using rule 109 (statement -> compound_statement .)
    LONG            reduce using rule 109 (statement -> compound_statement .)
    FLOAT           reduce using rule 109 (statement -> compound_statement .)
    DOUBLE          reduce using rule 109 (statement -> compound_statement .)
    SIGNED          reduce using rule 109 (statement -> compound_statement .)
    UNSIGNED        reduce using rule 109 (statement -> compound_statement .)
    BOOL            reduce using rule 109 (statement -> compound_statement .)
    STRUCT          reduce using rule 109 (statement -> compound_statement .)
    &               reduce using rule 109 (statement -> compound_statement .)
    *               reduce using rule 109 (statement -> compound_statement .)
    +               reduce using rule 109 (statement -> compound_statement .)
    -               reduce using rule 109 (statement -> compound_statement .)
    ~               reduce using rule 109 (statement -> compound_statement .)
    !               reduce using rule 109 (statement -> compound_statement .)
    (               reduce using rule 109 (statement -> compound_statement .)
    IDENTIFIER      reduce using rule 109 (statement -> compound_statement .)
    INTEGER_CONSTANT reduce using rule 109 (statement -> compound_statement .)
    CHAR_CONSTANT   reduce using rule 109 (statement -> compound_statement .)
    FLOAT_CONSTANT  reduce using rule 109 (statement -> compound_statement .)
    BOOL_CONSTANT   reduce using rule 109 (statement -> compound_statement .)
    STRING_CONSTANT reduce using rule 109 (statement -> compound_statement .)
    ;               reduce using rule 109 (statement -> compound_statement .)
    }               reduce using rule 109 (statement -> compound_statement .)
    ELSE            reduce using rule 109 (statement -> compound_statement .)


state 109

    (110) statement -> selection_statement .

    {               reduce using rule 110 (statement -> selection_statement .)
    IF              reduce using rule 110 (statement -> selection_statement .)
    WHILE           reduce using rule 110 (statement -> selection_statement .)
    BREAK           reduce using rule 110 (statement -> selection_statement .)
    CONTINUE        reduce using rule 110 (statement -> selection_statement .)
    RETURN          reduce using rule 110 (statement -> selection_statement .)
    VOID            reduce using rule 110 (statement -> selection_statement .)
    CHAR            reduce using rule 110 (statement -> selection_statement .)
    SHORT           reduce using rule 110 (statement -> selection_statement .)
    INT             reduce using rule 110 (statement -> selection_statement .)
    LONG            reduce using rule 110 (statement -> selection_statement .)
    FLOAT           reduce using rule 110 (statement -> selection_statement .)
    DOUBLE          reduce using rule 110 (statement -> selection_statement .)
    SIGNED          reduce using rule 110 (statement -> selection_statement .)
    UNSIGNED        reduce using rule 110 (statement -> selection_statement .)
    BOOL            reduce using rule 110 (statement -> selection_statement .)
    STRUCT          reduce using rule 110 (statement -> selection_statement .)
    &               reduce using rule 110 (statement -> selection_statement .)
    *               reduce using rule 110 (statement -> selection_statement .)
    +               reduce using rule 110 (statement -> selection_statement .)
    -               reduce using rule 110 (statement -> selection_statement .)
    ~               reduce using rule 110 (statement -> selection_statement .)
    !               reduce using rule 110 (statement -> selection_statement .)
    (               reduce using rule 110 (statement -> selection_statement .)
    IDENTIFIER      reduce using rule 110 (statement -> selection_statement .)
    INTEGER_CONSTANT reduce using rule 110 (statement -> selection_statement .)
    CHAR_CONSTANT   reduce using rule 110 (statement -> selection_statement .)
    FLOAT_CONSTANT  reduce using rule 110 (statement -> selection_statement .)
    BOOL_CONSTANT   reduce using rule 110 (statement -> selection_statement .)
    STRING_CONSTANT reduce using rule 110 (statement -> selection_statement .)
    ;               reduce using rule 110 (statement -> selection_statement .)
    }               reduce using rule 110 (statement -> selection_statement .)
    ELSE            reduce using rule 110 (statement -> selection_statement .)


state 110

    (111) statement -> expression_statement .

    {               reduce using rule 111 (statement -> expression_statement .)
    IF              reduce using rule 111 (statement -> expression_statement .)
    WHILE           reduce using rule 111 (statement -> expression_statement .)
    BREAK           reduce using rule 111 (statement -> expression_statement .)
    CONTINUE        reduce using rule 111 (statement -> expression_statement .)
    RETURN          reduce using rule 111 (statement -> expression_statement .)
    VOID            reduce using rule 111 (statement -> expression_statement .)
    CHAR            reduce using rule 111 (statement -> expression_statement .)
    SHORT           reduce using rule 111 (statement -> expression_statement .)
    INT             reduce using rule 111 (statement -> expression_statement .)
    LONG            reduce using rule 111 (statement -> expression_statement .)
    FLOAT           reduce using rule 111 (statement -> expression_statement .)
    DOUBLE          reduce using rule 111 (statement -> expression_statement .)
    SIGNED          reduce using rule 111 (statement -> expression_statement .)
    UNSIGNED        reduce using rule 111 (statement -> expression_statement .)
    BOOL            reduce using rule 111 (statement -> expression_statement .)
    STRUCT          reduce using rule 111 (statement -> expression_statement .)
    &               reduce using rule 111 (statement -> expression_statement .)
    *               reduce using rule 111 (statement -> expression_statement .)
    +               reduce using rule 111 (statement -> expression_statement .)
    -               reduce using rule 111 (statement -> expression_statement .)
    ~               reduce using rule 111 (statement -> expression_statement .)
    !               reduce using rule 111 (statement -> expression_statement .)
    (               reduce using rule 111 (statement -> expression_statement .)
    IDENTIFIER      reduce using rule 111 (statement -> expression_statement .)
    INTEGER_CONSTANT reduce using rule 111 (statement -> expression_statement .)
    CHAR_CONSTANT   reduce using rule 111 (statement -> expression_statement .)
    FLOAT_CONSTANT  reduce using rule 111 (statement -> expression_statement .)
    BOOL_CONSTANT   reduce using rule 111 (statement -> expression_statement .)
    STRING_CONSTANT reduce using rule 111 (statement -> expression_statement .)
    ;               reduce using rule 111 (statement -> expression_statement .)
    }               reduce using rule 111 (statement -> expression_statement .)
    ELSE            reduce using rule 111 (statement -> expression_statement .)


state 111

    (112) statement -> iteration_statement .

    {               reduce using rule 112 (statement -> iteration_statement .)
    IF              reduce using rule 112 (statement -> iteration_statement .)
    WHILE           reduce using rule 112 (statement -> iteration_statement .)
    BREAK           reduce using rule 112 (statement -> iteration_statement .)
    CONTINUE        reduce using rule 112 (statement -> iteration_statement .)
    RETURN          reduce using rule 112 (statement -> iteration_statement .)
    VOID            reduce using rule 112 (statement -> iteration_statement .)
    CHAR            reduce using rule 112 (statement -> iteration_statement .)
    SHORT           reduce using rule 112 (statement -> iteration_statement .)
    INT             reduce using rule 112 (statement -> iteration_statement .)
    LONG            reduce using rule 112 (statement -> iteration_statement .)
    FLOAT           reduce using rule 112 (statement -> iteration_statement .)
    DOUBLE          reduce using rule 112 (statement -> iteration_statement .)
    SIGNED          reduce using rule 112 (statement -> iteration_statement .)
    UNSIGNED        reduce using rule 112 (statement -> iteration_statement .)
    BOOL            reduce using rule 112 (statement -> iteration_statement .)
    STRUCT          reduce using rule 112 (statement -> iteration_statement .)
    &               reduce using rule 112 (statement -> iteration_statement .)
    *               reduce using rule 112 (statement -> iteration_statement .)
    +               reduce using rule 112 (statement -> iteration_statement .)
    -               reduce using rule 112 (statement -> iteration_statement .)
    ~               reduce using rule 112 (statement -> iteration_statement .)
    !               reduce using rule 112 (statement -> iteration_statement .)
    (               reduce using rule 112 (statement -> iteration_statement .)
    IDENTIFIER      reduce using rule 112 (statement -> iteration_statement .)
    INTEGER_CONSTANT reduce using rule 112 (statement -> iteration_statement .)
    CHAR_CONSTANT   reduce using rule 112 (statement -> iteration_statement .)
    FLOAT_CONSTANT  reduce using rule 112 (statement -> iteration_statement .)
    BOOL_CONSTANT   reduce using rule 112 (statement -> iteration_statement .)
    STRING_CONSTANT reduce using rule 112 (statement -> iteration_statement .)
    ;               reduce using rule 112 (statement -> iteration_statement .)
    }               reduce using rule 112 (statement -> iteration_statement .)
    ELSE            reduce using rule 112 (statement -> iteration_statement .)


state 112

    (113) statement -> jump_statement .

    {               reduce using rule 113 (statement -> jump_statement .)
    IF              reduce using rule 113 (statement -> jump_statement .)
    WHILE           reduce using rule 113 (statement -> jump_statement .)
    BREAK           reduce using rule 113 (statement -> jump_statement .)
    CONTINUE        reduce using rule 113 (statement -> jump_statement .)
    RETURN          reduce using rule 113 (statement -> jump_statement .)
    VOID            reduce using rule 113 (statement -> jump_statement .)
    CHAR            reduce using rule 113 (statement -> jump_statement .)
    SHORT           reduce using rule 113 (statement -> jump_statement .)
    INT             reduce using rule 113 (statement -> jump_statement .)
    LONG            reduce using rule 113 (statement -> jump_statement .)
    FLOAT           reduce using rule 113 (statement -> jump_statement .)
    DOUBLE          reduce using rule 113 (statement -> jump_statement .)
    SIGNED          reduce using rule 113 (statement -> jump_statement .)
    UNSIGNED        reduce using rule 113 (statement -> jump_statement .)
    BOOL            reduce using rule 113 (statement -> jump_statement .)
    STRUCT          reduce using rule 113 (statement -> jump_statement .)
    &               reduce using rule 113 (statement -> jump_statement .)
    *               reduce using rule 113 (statement -> jump_statement .)
    +               reduce using rule 113 (statement -> jump_statement .)
    -               reduce using rule 113 (statement -> jump_statement .)
    ~               reduce using rule 113 (statement -> jump_statement .)
    !               reduce using rule 113 (statement -> jump_statement .)
    (               reduce using rule 113 (statement -> jump_statement .)
    IDENTIFIER      reduce using rule 113 (statement -> jump_statement .)
    INTEGER_CONSTANT reduce using rule 113 (statement -> jump_statement .)
    CHAR_CONSTANT   reduce using rule 113 (statement -> jump_statement .)
    FLOAT_CONSTANT  reduce using rule 113 (statement -> jump_statement .)
    BOOL_CONSTANT   reduce using rule 113 (statement -> jump_statement .)
    STRING_CONSTANT reduce using rule 113 (statement -> jump_statement .)
    ;               reduce using rule 113 (statement -> jump_statement .)
    }               reduce using rule 113 (statement -> jump_statement .)
    ELSE            reduce using rule 113 (statement -> jump_statement .)


state 113

    (106) selection_statement -> IF . ( expression ) statement
    (107) selection_statement -> IF . ( expression ) statement ELSE statement

    (               shift and go to state 174


state 114

    (73) expression_orempty -> expression .
    (91) expression -> expression . , assignment_expression

    ;               reduce using rule 73 (expression_orempty -> expression .)
    ,               shift and go to state 175


state 115

    (92) expression_statement -> expression_orempty . ;

    ;               shift and go to state 176


state 116

    (108) iteration_statement -> WHILE . ( expression ) statement

    (               shift and go to state 177


state 117

    (39) jump_statement -> BREAK . ;

    ;               shift and go to state 178


state 118

    (40) jump_statement -> CONTINUE . ;

    ;               shift and go to state 179


state 119

    (41) jump_statement -> RETURN . ;
    (42) jump_statement -> RETURN . expression ;
    (90) expression -> . assignment_expression
    (91) expression -> . expression , assignment_expression
    (60) assignment_expression -> . conditional_expression
    (61) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (75) conditional_expression -> . binary_expression
    (132) unary_expression -> . postfix_expression
    (133) unary_expression -> . unary_operator cast_expression
    (136) binary_expression -> . cast_expression
    (137) binary_expression -> . binary_expression * binary_expression
    (138) binary_expression -> . binary_expression / binary_expression
    (139) binary_expression -> . binary_expression % binary_expression
    (140) binary_expression -> . binary_expression + binary_expression
    (141) binary_expression -> . binary_expression - binary_expression
    (142) binary_expression -> . binary_expression RIGHT_OP binary_expression
    (143) binary_expression -> . binary_expression LEFT_OP binary_expression
    (144) binary_expression -> . binary_expression < binary_expression
    (145) binary_expression -> . binary_expression LTE binary_expression
    (146) binary_expression -> . binary_expression GTE binary_expression
    (147) binary_expression -> . binary_expression > binary_expression
    (148) binary_expression -> . binary_expression EQ_OP binary_expression
    (149) binary_expression -> . binary_expression NEQ_OP binary_expression
    (150) binary_expression -> . binary_expression & binary_expression
    (151) binary_expression -> . binary_expression | binary_expression
    (152) binary_expression -> . binary_expression ^ binary_expression
    (153) binary_expression -> . binary_expression AND_OP binary_expression
    (154) binary_expression -> . binary_expression OR_OP binary_expression
    (97) postfix_expression -> . primary_expression
    (98) postfix_expression -> . postfix_expression [ expression ]
    (99) postfix_expression -> . postfix_expression ( argument_expression_list )
    (100) postfix_expression -> . postfix_expression ( )
    (101) postfix_expression -> . postfix_expression PTR_OP identifier
    (126) unary_operator -> . &
    (127) unary_operator -> . *
    (128) unary_operator -> . +
    (129) unary_operator -> . -
    (130) unary_operator -> . ~
    (131) unary_operator -> . !
    (155) cast_expression -> . unary_expression
    (102) primary_expression -> . identifier
    (103) primary_expression -> . constant
    (104) primary_expression -> . unified_string_literal
    (105) primary_expression -> . ( expression )
    (38) identifier -> . IDENTIFIER
    (76) constant -> . INTEGER_CONSTANT
    (77) constant -> . CHAR_CONSTANT
    (78) constant -> . FLOAT_CONSTANT
    (79) constant -> . BOOL_CONSTANT
    (134) unified_string_literal -> . STRING_CONSTANT
    (135) unified_string_literal -> . unified_string_literal STRING_CONSTANT

    ;               shift and go to state 180
    &               shift and go to state 69
    *               shift and go to state 66
    +               shift and go to state 67
    -               shift and go to state 68
    ~               shift and go to state 73
    !               shift and go to state 74
    (               shift and go to state 71
    IDENTIFIER      shift and go to state 31
    INTEGER_CONSTANT shift and go to state 77
    CHAR_CONSTANT   shift and go to state 78
    FLOAT_CONSTANT  shift and go to state 79
    BOOL_CONSTANT   shift and go to state 80
    STRING_CONSTANT shift and go to state 81

    expression                     shift and go to state 181
    assignment_expression          shift and go to state 120
    conditional_expression         shift and go to state 60
    unary_expression               shift and go to state 61
    binary_expression              shift and go to state 62
    postfix_expression             shift and go to state 63
    unary_operator                 shift and go to state 64
    cast_expression                shift and go to state 65
    primary_expression             shift and go to state 70
    identifier                     shift and go to state 72
    constant                       shift and go to state 75
    unified_string_literal         shift and go to state 76

state 120

    (90) expression -> assignment_expression .

    ,               reduce using rule 90 (expression -> assignment_expression .)
    ;               reduce using rule 90 (expression -> assignment_expression .)
    )               reduce using rule 90 (expression -> assignment_expression .)
    ]               reduce using rule 90 (expression -> assignment_expression .)


state 121

    (6) initializer -> { initializer_list_orempty . }

    }               shift and go to state 182


state 122

    (7) initializer -> { initializer_list . , }
    (117) initializer_list_orempty -> initializer_list .
    (9) initializer_list -> initializer_list . , initializer

    ,               shift and go to state 183
    }               reduce using rule 117 (initializer_list_orempty -> initializer_list .)


state 123

    (116) initializer_list_orempty -> empty .

    }               reduce using rule 116 (initializer_list_orempty -> empty .)


state 124

    (8) initializer_list -> initializer .

    ,               reduce using rule 8 (initializer_list -> initializer .)
    }               reduce using rule 8 (initializer_list -> initializer .)


state 125

    (61) assignment_expression -> unary_expression assignment_operator . assignment_expression
    (60) assignment_expression -> . conditional_expression
    (61) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (75) conditional_expression -> . binary_expression
    (132) unary_expression -> . postfix_expression
    (133) unary_expression -> . unary_operator cast_expression
    (136) binary_expression -> . cast_expression
    (137) binary_expression -> . binary_expression * binary_expression
    (138) binary_expression -> . binary_expression / binary_expression
    (139) binary_expression -> . binary_expression % binary_expression
    (140) binary_expression -> . binary_expression + binary_expression
    (141) binary_expression -> . binary_expression - binary_expression
    (142) binary_expression -> . binary_expression RIGHT_OP binary_expression
    (143) binary_expression -> . binary_expression LEFT_OP binary_expression
    (144) binary_expression -> . binary_expression < binary_expression
    (145) binary_expression -> . binary_expression LTE binary_expression
    (146) binary_expression -> . binary_expression GTE binary_expression
    (147) binary_expression -> . binary_expression > binary_expression
    (148) binary_expression -> . binary_expression EQ_OP binary_expression
    (149) binary_expression -> . binary_expression NEQ_OP binary_expression
    (150) binary_expression -> . binary_expression & binary_expression
    (151) binary_expression -> . binary_expression | binary_expression
    (152) binary_expression -> . binary_expression ^ binary_expression
    (153) binary_expression -> . binary_expression AND_OP binary_expression
    (154) binary_expression -> . binary_expression OR_OP binary_expression
    (97) postfix_expression -> . primary_expression
    (98) postfix_expression -> . postfix_expression [ expression ]
    (99) postfix_expression -> . postfix_expression ( argument_expression_list )
    (100) postfix_expression -> . postfix_expression ( )
    (101) postfix_expression -> . postfix_expression PTR_OP identifier
    (126) unary_operator -> . &
    (127) unary_operator -> . *
    (128) unary_operator -> . +
    (129) unary_operator -> . -
    (130) unary_operator -> . ~
    (131) unary_operator -> . !
    (155) cast_expression -> . unary_expression
    (102) primary_expression -> . identifier
    (103) primary_expression -> . constant
    (104) primary_expression -> . unified_string_literal
    (105) primary_expression -> . ( expression )
    (38) identifier -> . IDENTIFIER
    (76) constant -> . INTEGER_CONSTANT
    (77) constant -> . CHAR_CONSTANT
    (78) constant -> . FLOAT_CONSTANT
    (79) constant -> . BOOL_CONSTANT
    (134) unified_string_literal -> . STRING_CONSTANT
    (135) unified_string_literal -> . unified_string_literal STRING_CONSTANT

    &               shift and go to state 69
    *               shift and go to state 66
    +               shift and go to state 67
    -               shift and go to state 68
    ~               shift and go to state 73
    !               shift and go to state 74
    (               shift and go to state 71
    IDENTIFIER      shift and go to state 31
    INTEGER_CONSTANT shift and go to state 77
    CHAR_CONSTANT   shift and go to state 78
    FLOAT_CONSTANT  shift and go to state 79
    BOOL_CONSTANT   shift and go to state 80
    STRING_CONSTANT shift and go to state 81

    unary_expression               shift and go to state 61
    assignment_expression          shift and go to state 184
    conditional_expression         shift and go to state 60
    binary_expression              shift and go to state 62
    postfix_expression             shift and go to state 63
    unary_operator                 shift and go to state 64
    cast_expression                shift and go to state 65
    primary_expression             shift and go to state 70
    identifier                     shift and go to state 72
    constant                       shift and go to state 75
    unified_string_literal         shift and go to state 76

state 126

    (47) assignment_operator -> = .

    &               reduce using rule 47 (assignment_operator -> = .)
    *               reduce using rule 47 (assignment_operator -> = .)
    +               reduce using rule 47 (assignment_operator -> = .)
    -               reduce using rule 47 (assignment_operator -> = .)
    ~               reduce using rule 47 (assignment_operator -> = .)
    !               reduce using rule 47 (assignment_operator -> = .)
    (               reduce using rule 47 (assignment_operator -> = .)
    IDENTIFIER      reduce using rule 47 (assignment_operator -> = .)
    INTEGER_CONSTANT reduce using rule 47 (assignment_operator -> = .)
    CHAR_CONSTANT   reduce using rule 47 (assignment_operator -> = .)
    FLOAT_CONSTANT  reduce using rule 47 (assignment_operator -> = .)
    BOOL_CONSTANT   reduce using rule 47 (assignment_operator -> = .)
    STRING_CONSTANT reduce using rule 47 (assignment_operator -> = .)


state 127

    (48) assignment_operator -> MUL_ASSIGN .

    &               reduce using rule 48 (assignment_operator -> MUL_ASSIGN .)
    *               reduce using rule 48 (assignment_operator -> MUL_ASSIGN .)
    +               reduce using rule 48 (assignment_operator -> MUL_ASSIGN .)
    -               reduce using rule 48 (assignment_operator -> MUL_ASSIGN .)
    ~               reduce using rule 48 (assignment_operator -> MUL_ASSIGN .)
    !               reduce using rule 48 (assignment_operator -> MUL_ASSIGN .)
    (               reduce using rule 48 (assignment_operator -> MUL_ASSIGN .)
    IDENTIFIER      reduce using rule 48 (assignment_operator -> MUL_ASSIGN .)
    INTEGER_CONSTANT reduce using rule 48 (assignment_operator -> MUL_ASSIGN .)
    CHAR_CONSTANT   reduce using rule 48 (assignment_operator -> MUL_ASSIGN .)
    FLOAT_CONSTANT  reduce using rule 48 (assignment_operator -> MUL_ASSIGN .)
    BOOL_CONSTANT   reduce using rule 48 (assignment_operator -> MUL_ASSIGN .)
    STRING_CONSTANT reduce using rule 48 (assignment_operator -> MUL_ASSIGN .)


state 128

    (49) assignment_operator -> DIV_ASSIGN .

    &               reduce using rule 49 (assignment_operator -> DIV_ASSIGN .)
    *               reduce using rule 49 (assignment_operator -> DIV_ASSIGN .)
    +               reduce using rule 49 (assignment_operator -> DIV_ASSIGN .)
    -               reduce using rule 49 (assignment_operator -> DIV_ASSIGN .)
    ~               reduce using rule 49 (assignment_operator -> DIV_ASSIGN .)
    !               reduce using rule 49 (assignment_operator -> DIV_ASSIGN .)
    (               reduce using rule 49 (assignment_operator -> DIV_ASSIGN .)
    IDENTIFIER      reduce using rule 49 (assignment_operator -> DIV_ASSIGN .)
    INTEGER_CONSTANT reduce using rule 49 (assignment_operator -> DIV_ASSIGN .)
    CHAR_CONSTANT   reduce using rule 49 (assignment_operator -> DIV_ASSIGN .)
    FLOAT_CONSTANT  reduce using rule 49 (assignment_operator -> DIV_ASSIGN .)
    BOOL_CONSTANT   reduce using rule 49 (assignment_operator -> DIV_ASSIGN .)
    STRING_CONSTANT reduce using rule 49 (assignment_operator -> DIV_ASSIGN .)


state 129

    (50) assignment_operator -> MOD_ASSIGN .

    &               reduce using rule 50 (assignment_operator -> MOD_ASSIGN .)
    *               reduce using rule 50 (assignment_operator -> MOD_ASSIGN .)
    +               reduce using rule 50 (assignment_operator -> MOD_ASSIGN .)
    -               reduce using rule 50 (assignment_operator -> MOD_ASSIGN .)
    ~               reduce using rule 50 (assignment_operator -> MOD_ASSIGN .)
    !               reduce using rule 50 (assignment_operator -> MOD_ASSIGN .)
    (               reduce using rule 50 (assignment_operator -> MOD_ASSIGN .)
    IDENTIFIER      reduce using rule 50 (assignment_operator -> MOD_ASSIGN .)
    INTEGER_CONSTANT reduce using rule 50 (assignment_operator -> MOD_ASSIGN .)
    CHAR_CONSTANT   reduce using rule 50 (assignment_operator -> MOD_ASSIGN .)
    FLOAT_CONSTANT  reduce using rule 50 (assignment_operator -> MOD_ASSIGN .)
    BOOL_CONSTANT   reduce using rule 50 (assignment_operator -> MOD_ASSIGN .)
    STRING_CONSTANT reduce using rule 50 (assignment_operator -> MOD_ASSIGN .)


state 130

    (51) assignment_operator -> ADD_ASSIGN .

    &               reduce using rule 51 (assignment_operator -> ADD_ASSIGN .)
    *               reduce using rule 51 (assignment_operator -> ADD_ASSIGN .)
    +               reduce using rule 51 (assignment_operator -> ADD_ASSIGN .)
    -               reduce using rule 51 (assignment_operator -> ADD_ASSIGN .)
    ~               reduce using rule 51 (assignment_operator -> ADD_ASSIGN .)
    !               reduce using rule 51 (assignment_operator -> ADD_ASSIGN .)
    (               reduce using rule 51 (assignment_operator -> ADD_ASSIGN .)
    IDENTIFIER      reduce using rule 51 (assignment_operator -> ADD_ASSIGN .)
    INTEGER_CONSTANT reduce using rule 51 (assignment_operator -> ADD_ASSIGN .)
    CHAR_CONSTANT   reduce using rule 51 (assignment_operator -> ADD_ASSIGN .)
    FLOAT_CONSTANT  reduce using rule 51 (assignment_operator -> ADD_ASSIGN .)
    BOOL_CONSTANT   reduce using rule 51 (assignment_operator -> ADD_ASSIGN .)
    STRING_CONSTANT reduce using rule 51 (assignment_operator -> ADD_ASSIGN .)


state 131

    (52) assignment_operator -> SUB_ASSIGN .

    &               reduce using rule 52 (assignment_operator -> SUB_ASSIGN .)
    *               reduce using rule 52 (assignment_operator -> SUB_ASSIGN .)
    +               reduce using rule 52 (assignment_operator -> SUB_ASSIGN .)
    -               reduce using rule 52 (assignment_operator -> SUB_ASSIGN .)
    ~               reduce using rule 52 (assignment_operator -> SUB_ASSIGN .)
    !               reduce using rule 52 (assignment_operator -> SUB_ASSIGN .)
    (               reduce using rule 52 (assignment_operator -> SUB_ASSIGN .)
    IDENTIFIER      reduce using rule 52 (assignment_operator -> SUB_ASSIGN .)
    INTEGER_CONSTANT reduce using rule 52 (assignment_operator -> SUB_ASSIGN .)
    CHAR_CONSTANT   reduce using rule 52 (assignment_operator -> SUB_ASSIGN .)
    FLOAT_CONSTANT  reduce using rule 52 (assignment_operator -> SUB_ASSIGN .)
    BOOL_CONSTANT   reduce using rule 52 (assignment_operator -> SUB_ASSIGN .)
    STRING_CONSTANT reduce using rule 52 (assignment_operator -> SUB_ASSIGN .)


state 132

    (53) assignment_operator -> LEFT_ASSIGN .

    &               reduce using rule 53 (assignment_operator -> LEFT_ASSIGN .)
    *               reduce using rule 53 (assignment_operator -> LEFT_ASSIGN .)
    +               reduce using rule 53 (assignment_operator -> LEFT_ASSIGN .)
    -               reduce using rule 53 (assignment_operator -> LEFT_ASSIGN .)
    ~               reduce using rule 53 (assignment_operator -> LEFT_ASSIGN .)
    !               reduce using rule 53 (assignment_operator -> LEFT_ASSIGN .)
    (               reduce using rule 53 (assignment_operator -> LEFT_ASSIGN .)
    IDENTIFIER      reduce using rule 53 (assignment_operator -> LEFT_ASSIGN .)
    INTEGER_CONSTANT reduce using rule 53 (assignment_operator -> LEFT_ASSIGN .)
    CHAR_CONSTANT   reduce using rule 53 (assignment_operator -> LEFT_ASSIGN .)
    FLOAT_CONSTANT  reduce using rule 53 (assignment_operator -> LEFT_ASSIGN .)
    BOOL_CONSTANT   reduce using rule 53 (assignment_operator -> LEFT_ASSIGN .)
    STRING_CONSTANT reduce using rule 53 (assignment_operator -> LEFT_ASSIGN .)


state 133

    (54) assignment_operator -> RIGHT_ASSIGN .

    &               reduce using rule 54 (assignment_operator -> RIGHT_ASSIGN .)
    *               reduce using rule 54 (assignment_operator -> RIGHT_ASSIGN .)
    +               reduce using rule 54 (assignment_operator -> RIGHT_ASSIGN .)
    -               reduce using rule 54 (assignment_operator -> RIGHT_ASSIGN .)
    ~               reduce using rule 54 (assignment_operator -> RIGHT_ASSIGN .)
    !               reduce using rule 54 (assignment_operator -> RIGHT_ASSIGN .)
    (               reduce using rule 54 (assignment_operator -> RIGHT_ASSIGN .)
    IDENTIFIER      reduce using rule 54 (assignment_operator -> RIGHT_ASSIGN .)
    INTEGER_CONSTANT reduce using rule 54 (assignment_operator -> RIGHT_ASSIGN .)
    CHAR_CONSTANT   reduce using rule 54 (assignment_operator -> RIGHT_ASSIGN .)
    FLOAT_CONSTANT  reduce using rule 54 (assignment_operator -> RIGHT_ASSIGN .)
    BOOL_CONSTANT   reduce using rule 54 (assignment_operator -> RIGHT_ASSIGN .)
    STRING_CONSTANT reduce using rule 54 (assignment_operator -> RIGHT_ASSIGN .)


state 134

    (55) assignment_operator -> AND_ASSIGN .

    &               reduce using rule 55 (assignment_operator -> AND_ASSIGN .)
    *               reduce using rule 55 (assignment_operator -> AND_ASSIGN .)
    +               reduce using rule 55 (assignment_operator -> AND_ASSIGN .)
    -               reduce using rule 55 (assignment_operator -> AND_ASSIGN .)
    ~               reduce using rule 55 (assignment_operator -> AND_ASSIGN .)
    !               reduce using rule 55 (assignment_operator -> AND_ASSIGN .)
    (               reduce using rule 55 (assignment_operator -> AND_ASSIGN .)
    IDENTIFIER      reduce using rule 55 (assignment_operator -> AND_ASSIGN .)
    INTEGER_CONSTANT reduce using rule 55 (assignment_operator -> AND_ASSIGN .)
    CHAR_CONSTANT   reduce using rule 55 (assignment_operator -> AND_ASSIGN .)
    FLOAT_CONSTANT  reduce using rule 55 (assignment_operator -> AND_ASSIGN .)
    BOOL_CONSTANT   reduce using rule 55 (assignment_operator -> AND_ASSIGN .)
    STRING_CONSTANT reduce using rule 55 (assignment_operator -> AND_ASSIGN .)


state 135

    (56) assignment_operator -> XOR_ASSIGN .

    &               reduce using rule 56 (assignment_operator -> XOR_ASSIGN .)
    *               reduce using rule 56 (assignment_operator -> XOR_ASSIGN .)
    +               reduce using rule 56 (assignment_operator -> XOR_ASSIGN .)
    -               reduce using rule 56 (assignment_operator -> XOR_ASSIGN .)
    ~               reduce using rule 56 (assignment_operator -> XOR_ASSIGN .)
    !               reduce using rule 56 (assignment_operator -> XOR_ASSIGN .)
    (               reduce using rule 56 (assignment_operator -> XOR_ASSIGN .)
    IDENTIFIER      reduce using rule 56 (assignment_operator -> XOR_ASSIGN .)
    INTEGER_CONSTANT reduce using rule 56 (assignment_operator -> XOR_ASSIGN .)
    CHAR_CONSTANT   reduce using rule 56 (assignment_operator -> XOR_ASSIGN .)
    FLOAT_CONSTANT  reduce using rule 56 (assignment_operator -> XOR_ASSIGN .)
    BOOL_CONSTANT   reduce using rule 56 (assignment_operator -> XOR_ASSIGN .)
    STRING_CONSTANT reduce using rule 56 (assignment_operator -> XOR_ASSIGN .)


state 136

    (57) assignment_operator -> OR_ASSIGN .

    &               reduce using rule 57 (assignment_operator -> OR_ASSIGN .)
    *               reduce using rule 57 (assignment_operator -> OR_ASSIGN .)
    +               reduce using rule 57 (assignment_operator -> OR_ASSIGN .)
    -               reduce using rule 57 (assignment_operator -> OR_ASSIGN .)
    ~               reduce using rule 57 (assignment_operator -> OR_ASSIGN .)
    !               reduce using rule 57 (assignment_operator -> OR_ASSIGN .)
    (               reduce using rule 57 (assignment_operator -> OR_ASSIGN .)
    IDENTIFIER      reduce using rule 57 (assignment_operator -> OR_ASSIGN .)
    INTEGER_CONSTANT reduce using rule 57 (assignment_operator -> OR_ASSIGN .)
    CHAR_CONSTANT   reduce using rule 57 (assignment_operator -> OR_ASSIGN .)
    FLOAT_CONSTANT  reduce using rule 57 (assignment_operator -> OR_ASSIGN .)
    BOOL_CONSTANT   reduce using rule 57 (assignment_operator -> OR_ASSIGN .)
    STRING_CONSTANT reduce using rule 57 (assignment_operator -> OR_ASSIGN .)


state 137

    (137) binary_expression -> binary_expression * . binary_expression
    (136) binary_expression -> . cast_expression
    (137) binary_expression -> . binary_expression * binary_expression
    (138) binary_expression -> . binary_expression / binary_expression
    (139) binary_expression -> . binary_expression % binary_expression
    (140) binary_expression -> . binary_expression + binary_expression
    (141) binary_expression -> . binary_expression - binary_expression
    (142) binary_expression -> . binary_expression RIGHT_OP binary_expression
    (143) binary_expression -> . binary_expression LEFT_OP binary_expression
    (144) binary_expression -> . binary_expression < binary_expression
    (145) binary_expression -> . binary_expression LTE binary_expression
    (146) binary_expression -> . binary_expression GTE binary_expression
    (147) binary_expression -> . binary_expression > binary_expression
    (148) binary_expression -> . binary_expression EQ_OP binary_expression
    (149) binary_expression -> . binary_expression NEQ_OP binary_expression
    (150) binary_expression -> . binary_expression & binary_expression
    (151) binary_expression -> . binary_expression | binary_expression
    (152) binary_expression -> . binary_expression ^ binary_expression
    (153) binary_expression -> . binary_expression AND_OP binary_expression
    (154) binary_expression -> . binary_expression OR_OP binary_expression
    (155) cast_expression -> . unary_expression
    (132) unary_expression -> . postfix_expression
    (133) unary_expression -> . unary_operator cast_expression
    (97) postfix_expression -> . primary_expression
    (98) postfix_expression -> . postfix_expression [ expression ]
    (99) postfix_expression -> . postfix_expression ( argument_expression_list )
    (100) postfix_expression -> . postfix_expression ( )
    (101) postfix_expression -> . postfix_expression PTR_OP identifier
    (126) unary_operator -> . &
    (127) unary_operator -> . *
    (128) unary_operator -> . +
    (129) unary_operator -> . -
    (130) unary_operator -> . ~
    (131) unary_operator -> . !
    (102) primary_expression -> . identifier
    (103) primary_expression -> . constant
    (104) primary_expression -> . unified_string_literal
    (105) primary_expression -> . ( expression )
    (38) identifier -> . IDENTIFIER
    (76) constant -> . INTEGER_CONSTANT
    (77) constant -> . CHAR_CONSTANT
    (78) constant -> . FLOAT_CONSTANT
    (79) constant -> . BOOL_CONSTANT
    (134) unified_string_literal -> . STRING_CONSTANT
    (135) unified_string_literal -> . unified_string_literal STRING_CONSTANT

    &               shift and go to state 69
    *               shift and go to state 66
    +               shift and go to state 67
    -               shift and go to state 68
    ~               shift and go to state 73
    !               shift and go to state 74
    (               shift and go to state 71
    IDENTIFIER      shift and go to state 31
    INTEGER_CONSTANT shift and go to state 77
    CHAR_CONSTANT   shift and go to state 78
    FLOAT_CONSTANT  shift and go to state 79
    BOOL_CONSTANT   shift and go to state 80
    STRING_CONSTANT shift and go to state 81

    binary_expression              shift and go to state 185
    cast_expression                shift and go to state 65
    unary_expression               shift and go to state 159
    postfix_expression             shift and go to state 63
    unary_operator                 shift and go to state 64
    primary_expression             shift and go to state 70
    identifier                     shift and go to state 72
    constant                       shift and go to state 75
    unified_string_literal         shift and go to state 76

state 138

    (138) binary_expression -> binary_expression / . binary_expression
    (136) binary_expression -> . cast_expression
    (137) binary_expression -> . binary_expression * binary_expression
    (138) binary_expression -> . binary_expression / binary_expression
    (139) binary_expression -> . binary_expression % binary_expression
    (140) binary_expression -> . binary_expression + binary_expression
    (141) binary_expression -> . binary_expression - binary_expression
    (142) binary_expression -> . binary_expression RIGHT_OP binary_expression
    (143) binary_expression -> . binary_expression LEFT_OP binary_expression
    (144) binary_expression -> . binary_expression < binary_expression
    (145) binary_expression -> . binary_expression LTE binary_expression
    (146) binary_expression -> . binary_expression GTE binary_expression
    (147) binary_expression -> . binary_expression > binary_expression
    (148) binary_expression -> . binary_expression EQ_OP binary_expression
    (149) binary_expression -> . binary_expression NEQ_OP binary_expression
    (150) binary_expression -> . binary_expression & binary_expression
    (151) binary_expression -> . binary_expression | binary_expression
    (152) binary_expression -> . binary_expression ^ binary_expression
    (153) binary_expression -> . binary_expression AND_OP binary_expression
    (154) binary_expression -> . binary_expression OR_OP binary_expression
    (155) cast_expression -> . unary_expression
    (132) unary_expression -> . postfix_expression
    (133) unary_expression -> . unary_operator cast_expression
    (97) postfix_expression -> . primary_expression
    (98) postfix_expression -> . postfix_expression [ expression ]
    (99) postfix_expression -> . postfix_expression ( argument_expression_list )
    (100) postfix_expression -> . postfix_expression ( )
    (101) postfix_expression -> . postfix_expression PTR_OP identifier
    (126) unary_operator -> . &
    (127) unary_operator -> . *
    (128) unary_operator -> . +
    (129) unary_operator -> . -
    (130) unary_operator -> . ~
    (131) unary_operator -> . !
    (102) primary_expression -> . identifier
    (103) primary_expression -> . constant
    (104) primary_expression -> . unified_string_literal
    (105) primary_expression -> . ( expression )
    (38) identifier -> . IDENTIFIER
    (76) constant -> . INTEGER_CONSTANT
    (77) constant -> . CHAR_CONSTANT
    (78) constant -> . FLOAT_CONSTANT
    (79) constant -> . BOOL_CONSTANT
    (134) unified_string_literal -> . STRING_CONSTANT
    (135) unified_string_literal -> . unified_string_literal STRING_CONSTANT

    &               shift and go to state 69
    *               shift and go to state 66
    +               shift and go to state 67
    -               shift and go to state 68
    ~               shift and go to state 73
    !               shift and go to state 74
    (               shift and go to state 71
    IDENTIFIER      shift and go to state 31
    INTEGER_CONSTANT shift and go to state 77
    CHAR_CONSTANT   shift and go to state 78
    FLOAT_CONSTANT  shift and go to state 79
    BOOL_CONSTANT   shift and go to state 80
    STRING_CONSTANT shift and go to state 81

    binary_expression              shift and go to state 186
    cast_expression                shift and go to state 65
    unary_expression               shift and go to state 159
    postfix_expression             shift and go to state 63
    unary_operator                 shift and go to state 64
    primary_expression             shift and go to state 70
    identifier                     shift and go to state 72
    constant                       shift and go to state 75
    unified_string_literal         shift and go to state 76

state 139

    (139) binary_expression -> binary_expression % . binary_expression
    (136) binary_expression -> . cast_expression
    (137) binary_expression -> . binary_expression * binary_expression
    (138) binary_expression -> . binary_expression / binary_expression
    (139) binary_expression -> . binary_expression % binary_expression
    (140) binary_expression -> . binary_expression + binary_expression
    (141) binary_expression -> . binary_expression - binary_expression
    (142) binary_expression -> . binary_expression RIGHT_OP binary_expression
    (143) binary_expression -> . binary_expression LEFT_OP binary_expression
    (144) binary_expression -> . binary_expression < binary_expression
    (145) binary_expression -> . binary_expression LTE binary_expression
    (146) binary_expression -> . binary_expression GTE binary_expression
    (147) binary_expression -> . binary_expression > binary_expression
    (148) binary_expression -> . binary_expression EQ_OP binary_expression
    (149) binary_expression -> . binary_expression NEQ_OP binary_expression
    (150) binary_expression -> . binary_expression & binary_expression
    (151) binary_expression -> . binary_expression | binary_expression
    (152) binary_expression -> . binary_expression ^ binary_expression
    (153) binary_expression -> . binary_expression AND_OP binary_expression
    (154) binary_expression -> . binary_expression OR_OP binary_expression
    (155) cast_expression -> . unary_expression
    (132) unary_expression -> . postfix_expression
    (133) unary_expression -> . unary_operator cast_expression
    (97) postfix_expression -> . primary_expression
    (98) postfix_expression -> . postfix_expression [ expression ]
    (99) postfix_expression -> . postfix_expression ( argument_expression_list )
    (100) postfix_expression -> . postfix_expression ( )
    (101) postfix_expression -> . postfix_expression PTR_OP identifier
    (126) unary_operator -> . &
    (127) unary_operator -> . *
    (128) unary_operator -> . +
    (129) unary_operator -> . -
    (130) unary_operator -> . ~
    (131) unary_operator -> . !
    (102) primary_expression -> . identifier
    (103) primary_expression -> . constant
    (104) primary_expression -> . unified_string_literal
    (105) primary_expression -> . ( expression )
    (38) identifier -> . IDENTIFIER
    (76) constant -> . INTEGER_CONSTANT
    (77) constant -> . CHAR_CONSTANT
    (78) constant -> . FLOAT_CONSTANT
    (79) constant -> . BOOL_CONSTANT
    (134) unified_string_literal -> . STRING_CONSTANT
    (135) unified_string_literal -> . unified_string_literal STRING_CONSTANT

    &               shift and go to state 69
    *               shift and go to state 66
    +               shift and go to state 67
    -               shift and go to state 68
    ~               shift and go to state 73
    !               shift and go to state 74
    (               shift and go to state 71
    IDENTIFIER      shift and go to state 31
    INTEGER_CONSTANT shift and go to state 77
    CHAR_CONSTANT   shift and go to state 78
    FLOAT_CONSTANT  shift and go to state 79
    BOOL_CONSTANT   shift and go to state 80
    STRING_CONSTANT shift and go to state 81

    binary_expression              shift and go to state 187
    cast_expression                shift and go to state 65
    unary_expression               shift and go to state 159
    postfix_expression             shift and go to state 63
    unary_operator                 shift and go to state 64
    primary_expression             shift and go to state 70
    identifier                     shift and go to state 72
    constant                       shift and go to state 75
    unified_string_literal         shift and go to state 76

state 140

    (140) binary_expression -> binary_expression + . binary_expression
    (136) binary_expression -> . cast_expression
    (137) binary_expression -> . binary_expression * binary_expression
    (138) binary_expression -> . binary_expression / binary_expression
    (139) binary_expression -> . binary_expression % binary_expression
    (140) binary_expression -> . binary_expression + binary_expression
    (141) binary_expression -> . binary_expression - binary_expression
    (142) binary_expression -> . binary_expression RIGHT_OP binary_expression
    (143) binary_expression -> . binary_expression LEFT_OP binary_expression
    (144) binary_expression -> . binary_expression < binary_expression
    (145) binary_expression -> . binary_expression LTE binary_expression
    (146) binary_expression -> . binary_expression GTE binary_expression
    (147) binary_expression -> . binary_expression > binary_expression
    (148) binary_expression -> . binary_expression EQ_OP binary_expression
    (149) binary_expression -> . binary_expression NEQ_OP binary_expression
    (150) binary_expression -> . binary_expression & binary_expression
    (151) binary_expression -> . binary_expression | binary_expression
    (152) binary_expression -> . binary_expression ^ binary_expression
    (153) binary_expression -> . binary_expression AND_OP binary_expression
    (154) binary_expression -> . binary_expression OR_OP binary_expression
    (155) cast_expression -> . unary_expression
    (132) unary_expression -> . postfix_expression
    (133) unary_expression -> . unary_operator cast_expression
    (97) postfix_expression -> . primary_expression
    (98) postfix_expression -> . postfix_expression [ expression ]
    (99) postfix_expression -> . postfix_expression ( argument_expression_list )
    (100) postfix_expression -> . postfix_expression ( )
    (101) postfix_expression -> . postfix_expression PTR_OP identifier
    (126) unary_operator -> . &
    (127) unary_operator -> . *
    (128) unary_operator -> . +
    (129) unary_operator -> . -
    (130) unary_operator -> . ~
    (131) unary_operator -> . !
    (102) primary_expression -> . identifier
    (103) primary_expression -> . constant
    (104) primary_expression -> . unified_string_literal
    (105) primary_expression -> . ( expression )
    (38) identifier -> . IDENTIFIER
    (76) constant -> . INTEGER_CONSTANT
    (77) constant -> . CHAR_CONSTANT
    (78) constant -> . FLOAT_CONSTANT
    (79) constant -> . BOOL_CONSTANT
    (134) unified_string_literal -> . STRING_CONSTANT
    (135) unified_string_literal -> . unified_string_literal STRING_CONSTANT

    &               shift and go to state 69
    *               shift and go to state 66
    +               shift and go to state 67
    -               shift and go to state 68
    ~               shift and go to state 73
    !               shift and go to state 74
    (               shift and go to state 71
    IDENTIFIER      shift and go to state 31
    INTEGER_CONSTANT shift and go to state 77
    CHAR_CONSTANT   shift and go to state 78
    FLOAT_CONSTANT  shift and go to state 79
    BOOL_CONSTANT   shift and go to state 80
    STRING_CONSTANT shift and go to state 81

    binary_expression              shift and go to state 188
    cast_expression                shift and go to state 65
    unary_expression               shift and go to state 159
    postfix_expression             shift and go to state 63
    unary_operator                 shift and go to state 64
    primary_expression             shift and go to state 70
    identifier                     shift and go to state 72
    constant                       shift and go to state 75
    unified_string_literal         shift and go to state 76

state 141

    (141) binary_expression -> binary_expression - . binary_expression
    (136) binary_expression -> . cast_expression
    (137) binary_expression -> . binary_expression * binary_expression
    (138) binary_expression -> . binary_expression / binary_expression
    (139) binary_expression -> . binary_expression % binary_expression
    (140) binary_expression -> . binary_expression + binary_expression
    (141) binary_expression -> . binary_expression - binary_expression
    (142) binary_expression -> . binary_expression RIGHT_OP binary_expression
    (143) binary_expression -> . binary_expression LEFT_OP binary_expression
    (144) binary_expression -> . binary_expression < binary_expression
    (145) binary_expression -> . binary_expression LTE binary_expression
    (146) binary_expression -> . binary_expression GTE binary_expression
    (147) binary_expression -> . binary_expression > binary_expression
    (148) binary_expression -> . binary_expression EQ_OP binary_expression
    (149) binary_expression -> . binary_expression NEQ_OP binary_expression
    (150) binary_expression -> . binary_expression & binary_expression
    (151) binary_expression -> . binary_expression | binary_expression
    (152) binary_expression -> . binary_expression ^ binary_expression
    (153) binary_expression -> . binary_expression AND_OP binary_expression
    (154) binary_expression -> . binary_expression OR_OP binary_expression
    (155) cast_expression -> . unary_expression
    (132) unary_expression -> . postfix_expression
    (133) unary_expression -> . unary_operator cast_expression
    (97) postfix_expression -> . primary_expression
    (98) postfix_expression -> . postfix_expression [ expression ]
    (99) postfix_expression -> . postfix_expression ( argument_expression_list )
    (100) postfix_expression -> . postfix_expression ( )
    (101) postfix_expression -> . postfix_expression PTR_OP identifier
    (126) unary_operator -> . &
    (127) unary_operator -> . *
    (128) unary_operator -> . +
    (129) unary_operator -> . -
    (130) unary_operator -> . ~
    (131) unary_operator -> . !
    (102) primary_expression -> . identifier
    (103) primary_expression -> . constant
    (104) primary_expression -> . unified_string_literal
    (105) primary_expression -> . ( expression )
    (38) identifier -> . IDENTIFIER
    (76) constant -> . INTEGER_CONSTANT
    (77) constant -> . CHAR_CONSTANT
    (78) constant -> . FLOAT_CONSTANT
    (79) constant -> . BOOL_CONSTANT
    (134) unified_string_literal -> . STRING_CONSTANT
    (135) unified_string_literal -> . unified_string_literal STRING_CONSTANT

    &               shift and go to state 69
    *               shift and go to state 66
    +               shift and go to state 67
    -               shift and go to state 68
    ~               shift and go to state 73
    !               shift and go to state 74
    (               shift and go to state 71
    IDENTIFIER      shift and go to state 31
    INTEGER_CONSTANT shift and go to state 77
    CHAR_CONSTANT   shift and go to state 78
    FLOAT_CONSTANT  shift and go to state 79
    BOOL_CONSTANT   shift and go to state 80
    STRING_CONSTANT shift and go to state 81

    binary_expression              shift and go to state 189
    cast_expression                shift and go to state 65
    unary_expression               shift and go to state 159
    postfix_expression             shift and go to state 63
    unary_operator                 shift and go to state 64
    primary_expression             shift and go to state 70
    identifier                     shift and go to state 72
    constant                       shift and go to state 75
    unified_string_literal         shift and go to state 76

state 142

    (142) binary_expression -> binary_expression RIGHT_OP . binary_expression
    (136) binary_expression -> . cast_expression
    (137) binary_expression -> . binary_expression * binary_expression
    (138) binary_expression -> . binary_expression / binary_expression
    (139) binary_expression -> . binary_expression % binary_expression
    (140) binary_expression -> . binary_expression + binary_expression
    (141) binary_expression -> . binary_expression - binary_expression
    (142) binary_expression -> . binary_expression RIGHT_OP binary_expression
    (143) binary_expression -> . binary_expression LEFT_OP binary_expression
    (144) binary_expression -> . binary_expression < binary_expression
    (145) binary_expression -> . binary_expression LTE binary_expression
    (146) binary_expression -> . binary_expression GTE binary_expression
    (147) binary_expression -> . binary_expression > binary_expression
    (148) binary_expression -> . binary_expression EQ_OP binary_expression
    (149) binary_expression -> . binary_expression NEQ_OP binary_expression
    (150) binary_expression -> . binary_expression & binary_expression
    (151) binary_expression -> . binary_expression | binary_expression
    (152) binary_expression -> . binary_expression ^ binary_expression
    (153) binary_expression -> . binary_expression AND_OP binary_expression
    (154) binary_expression -> . binary_expression OR_OP binary_expression
    (155) cast_expression -> . unary_expression
    (132) unary_expression -> . postfix_expression
    (133) unary_expression -> . unary_operator cast_expression
    (97) postfix_expression -> . primary_expression
    (98) postfix_expression -> . postfix_expression [ expression ]
    (99) postfix_expression -> . postfix_expression ( argument_expression_list )
    (100) postfix_expression -> . postfix_expression ( )
    (101) postfix_expression -> . postfix_expression PTR_OP identifier
    (126) unary_operator -> . &
    (127) unary_operator -> . *
    (128) unary_operator -> . +
    (129) unary_operator -> . -
    (130) unary_operator -> . ~
    (131) unary_operator -> . !
    (102) primary_expression -> . identifier
    (103) primary_expression -> . constant
    (104) primary_expression -> . unified_string_literal
    (105) primary_expression -> . ( expression )
    (38) identifier -> . IDENTIFIER
    (76) constant -> . INTEGER_CONSTANT
    (77) constant -> . CHAR_CONSTANT
    (78) constant -> . FLOAT_CONSTANT
    (79) constant -> . BOOL_CONSTANT
    (134) unified_string_literal -> . STRING_CONSTANT
    (135) unified_string_literal -> . unified_string_literal STRING_CONSTANT

    &               shift and go to state 69
    *               shift and go to state 66
    +               shift and go to state 67
    -               shift and go to state 68
    ~               shift and go to state 73
    !               shift and go to state 74
    (               shift and go to state 71
    IDENTIFIER      shift and go to state 31
    INTEGER_CONSTANT shift and go to state 77
    CHAR_CONSTANT   shift and go to state 78
    FLOAT_CONSTANT  shift and go to state 79
    BOOL_CONSTANT   shift and go to state 80
    STRING_CONSTANT shift and go to state 81

    binary_expression              shift and go to state 190
    cast_expression                shift and go to state 65
    unary_expression               shift and go to state 159
    postfix_expression             shift and go to state 63
    unary_operator                 shift and go to state 64
    primary_expression             shift and go to state 70
    identifier                     shift and go to state 72
    constant                       shift and go to state 75
    unified_string_literal         shift and go to state 76

state 143

    (143) binary_expression -> binary_expression LEFT_OP . binary_expression
    (136) binary_expression -> . cast_expression
    (137) binary_expression -> . binary_expression * binary_expression
    (138) binary_expression -> . binary_expression / binary_expression
    (139) binary_expression -> . binary_expression % binary_expression
    (140) binary_expression -> . binary_expression + binary_expression
    (141) binary_expression -> . binary_expression - binary_expression
    (142) binary_expression -> . binary_expression RIGHT_OP binary_expression
    (143) binary_expression -> . binary_expression LEFT_OP binary_expression
    (144) binary_expression -> . binary_expression < binary_expression
    (145) binary_expression -> . binary_expression LTE binary_expression
    (146) binary_expression -> . binary_expression GTE binary_expression
    (147) binary_expression -> . binary_expression > binary_expression
    (148) binary_expression -> . binary_expression EQ_OP binary_expression
    (149) binary_expression -> . binary_expression NEQ_OP binary_expression
    (150) binary_expression -> . binary_expression & binary_expression
    (151) binary_expression -> . binary_expression | binary_expression
    (152) binary_expression -> . binary_expression ^ binary_expression
    (153) binary_expression -> . binary_expression AND_OP binary_expression
    (154) binary_expression -> . binary_expression OR_OP binary_expression
    (155) cast_expression -> . unary_expression
    (132) unary_expression -> . postfix_expression
    (133) unary_expression -> . unary_operator cast_expression
    (97) postfix_expression -> . primary_expression
    (98) postfix_expression -> . postfix_expression [ expression ]
    (99) postfix_expression -> . postfix_expression ( argument_expression_list )
    (100) postfix_expression -> . postfix_expression ( )
    (101) postfix_expression -> . postfix_expression PTR_OP identifier
    (126) unary_operator -> . &
    (127) unary_operator -> . *
    (128) unary_operator -> . +
    (129) unary_operator -> . -
    (130) unary_operator -> . ~
    (131) unary_operator -> . !
    (102) primary_expression -> . identifier
    (103) primary_expression -> . constant
    (104) primary_expression -> . unified_string_literal
    (105) primary_expression -> . ( expression )
    (38) identifier -> . IDENTIFIER
    (76) constant -> . INTEGER_CONSTANT
    (77) constant -> . CHAR_CONSTANT
    (78) constant -> . FLOAT_CONSTANT
    (79) constant -> . BOOL_CONSTANT
    (134) unified_string_literal -> . STRING_CONSTANT
    (135) unified_string_literal -> . unified_string_literal STRING_CONSTANT

    &               shift and go to state 69
    *               shift and go to state 66
    +               shift and go to state 67
    -               shift and go to state 68
    ~               shift and go to state 73
    !               shift and go to state 74
    (               shift and go to state 71
    IDENTIFIER      shift and go to state 31
    INTEGER_CONSTANT shift and go to state 77
    CHAR_CONSTANT   shift and go to state 78
    FLOAT_CONSTANT  shift and go to state 79
    BOOL_CONSTANT   shift and go to state 80
    STRING_CONSTANT shift and go to state 81

    binary_expression              shift and go to state 191
    cast_expression                shift and go to state 65
    unary_expression               shift and go to state 159
    postfix_expression             shift and go to state 63
    unary_operator                 shift and go to state 64
    primary_expression             shift and go to state 70
    identifier                     shift and go to state 72
    constant                       shift and go to state 75
    unified_string_literal         shift and go to state 76

state 144

    (144) binary_expression -> binary_expression < . binary_expression
    (136) binary_expression -> . cast_expression
    (137) binary_expression -> . binary_expression * binary_expression
    (138) binary_expression -> . binary_expression / binary_expression
    (139) binary_expression -> . binary_expression % binary_expression
    (140) binary_expression -> . binary_expression + binary_expression
    (141) binary_expression -> . binary_expression - binary_expression
    (142) binary_expression -> . binary_expression RIGHT_OP binary_expression
    (143) binary_expression -> . binary_expression LEFT_OP binary_expression
    (144) binary_expression -> . binary_expression < binary_expression
    (145) binary_expression -> . binary_expression LTE binary_expression
    (146) binary_expression -> . binary_expression GTE binary_expression
    (147) binary_expression -> . binary_expression > binary_expression
    (148) binary_expression -> . binary_expression EQ_OP binary_expression
    (149) binary_expression -> . binary_expression NEQ_OP binary_expression
    (150) binary_expression -> . binary_expression & binary_expression
    (151) binary_expression -> . binary_expression | binary_expression
    (152) binary_expression -> . binary_expression ^ binary_expression
    (153) binary_expression -> . binary_expression AND_OP binary_expression
    (154) binary_expression -> . binary_expression OR_OP binary_expression
    (155) cast_expression -> . unary_expression
    (132) unary_expression -> . postfix_expression
    (133) unary_expression -> . unary_operator cast_expression
    (97) postfix_expression -> . primary_expression
    (98) postfix_expression -> . postfix_expression [ expression ]
    (99) postfix_expression -> . postfix_expression ( argument_expression_list )
    (100) postfix_expression -> . postfix_expression ( )
    (101) postfix_expression -> . postfix_expression PTR_OP identifier
    (126) unary_operator -> . &
    (127) unary_operator -> . *
    (128) unary_operator -> . +
    (129) unary_operator -> . -
    (130) unary_operator -> . ~
    (131) unary_operator -> . !
    (102) primary_expression -> . identifier
    (103) primary_expression -> . constant
    (104) primary_expression -> . unified_string_literal
    (105) primary_expression -> . ( expression )
    (38) identifier -> . IDENTIFIER
    (76) constant -> . INTEGER_CONSTANT
    (77) constant -> . CHAR_CONSTANT
    (78) constant -> . FLOAT_CONSTANT
    (79) constant -> . BOOL_CONSTANT
    (134) unified_string_literal -> . STRING_CONSTANT
    (135) unified_string_literal -> . unified_string_literal STRING_CONSTANT

    &               shift and go to state 69
    *               shift and go to state 66
    +               shift and go to state 67
    -               shift and go to state 68
    ~               shift and go to state 73
    !               shift and go to state 74
    (               shift and go to state 71
    IDENTIFIER      shift and go to state 31
    INTEGER_CONSTANT shift and go to state 77
    CHAR_CONSTANT   shift and go to state 78
    FLOAT_CONSTANT  shift and go to state 79
    BOOL_CONSTANT   shift and go to state 80
    STRING_CONSTANT shift and go to state 81

    binary_expression              shift and go to state 192
    cast_expression                shift and go to state 65
    unary_expression               shift and go to state 159
    postfix_expression             shift and go to state 63
    unary_operator                 shift and go to state 64
    primary_expression             shift and go to state 70
    identifier                     shift and go to state 72
    constant                       shift and go to state 75
    unified_string_literal         shift and go to state 76

state 145

    (145) binary_expression -> binary_expression LTE . binary_expression
    (136) binary_expression -> . cast_expression
    (137) binary_expression -> . binary_expression * binary_expression
    (138) binary_expression -> . binary_expression / binary_expression
    (139) binary_expression -> . binary_expression % binary_expression
    (140) binary_expression -> . binary_expression + binary_expression
    (141) binary_expression -> . binary_expression - binary_expression
    (142) binary_expression -> . binary_expression RIGHT_OP binary_expression
    (143) binary_expression -> . binary_expression LEFT_OP binary_expression
    (144) binary_expression -> . binary_expression < binary_expression
    (145) binary_expression -> . binary_expression LTE binary_expression
    (146) binary_expression -> . binary_expression GTE binary_expression
    (147) binary_expression -> . binary_expression > binary_expression
    (148) binary_expression -> . binary_expression EQ_OP binary_expression
    (149) binary_expression -> . binary_expression NEQ_OP binary_expression
    (150) binary_expression -> . binary_expression & binary_expression
    (151) binary_expression -> . binary_expression | binary_expression
    (152) binary_expression -> . binary_expression ^ binary_expression
    (153) binary_expression -> . binary_expression AND_OP binary_expression
    (154) binary_expression -> . binary_expression OR_OP binary_expression
    (155) cast_expression -> . unary_expression
    (132) unary_expression -> . postfix_expression
    (133) unary_expression -> . unary_operator cast_expression
    (97) postfix_expression -> . primary_expression
    (98) postfix_expression -> . postfix_expression [ expression ]
    (99) postfix_expression -> . postfix_expression ( argument_expression_list )
    (100) postfix_expression -> . postfix_expression ( )
    (101) postfix_expression -> . postfix_expression PTR_OP identifier
    (126) unary_operator -> . &
    (127) unary_operator -> . *
    (128) unary_operator -> . +
    (129) unary_operator -> . -
    (130) unary_operator -> . ~
    (131) unary_operator -> . !
    (102) primary_expression -> . identifier
    (103) primary_expression -> . constant
    (104) primary_expression -> . unified_string_literal
    (105) primary_expression -> . ( expression )
    (38) identifier -> . IDENTIFIER
    (76) constant -> . INTEGER_CONSTANT
    (77) constant -> . CHAR_CONSTANT
    (78) constant -> . FLOAT_CONSTANT
    (79) constant -> . BOOL_CONSTANT
    (134) unified_string_literal -> . STRING_CONSTANT
    (135) unified_string_literal -> . unified_string_literal STRING_CONSTANT

    &               shift and go to state 69
    *               shift and go to state 66
    +               shift and go to state 67
    -               shift and go to state 68
    ~               shift and go to state 73
    !               shift and go to state 74
    (               shift and go to state 71
    IDENTIFIER      shift and go to state 31
    INTEGER_CONSTANT shift and go to state 77
    CHAR_CONSTANT   shift and go to state 78
    FLOAT_CONSTANT  shift and go to state 79
    BOOL_CONSTANT   shift and go to state 80
    STRING_CONSTANT shift and go to state 81

    binary_expression              shift and go to state 193
    cast_expression                shift and go to state 65
    unary_expression               shift and go to state 159
    postfix_expression             shift and go to state 63
    unary_operator                 shift and go to state 64
    primary_expression             shift and go to state 70
    identifier                     shift and go to state 72
    constant                       shift and go to state 75
    unified_string_literal         shift and go to state 76

state 146

    (146) binary_expression -> binary_expression GTE . binary_expression
    (136) binary_expression -> . cast_expression
    (137) binary_expression -> . binary_expression * binary_expression
    (138) binary_expression -> . binary_expression / binary_expression
    (139) binary_expression -> . binary_expression % binary_expression
    (140) binary_expression -> . binary_expression + binary_expression
    (141) binary_expression -> . binary_expression - binary_expression
    (142) binary_expression -> . binary_expression RIGHT_OP binary_expression
    (143) binary_expression -> . binary_expression LEFT_OP binary_expression
    (144) binary_expression -> . binary_expression < binary_expression
    (145) binary_expression -> . binary_expression LTE binary_expression
    (146) binary_expression -> . binary_expression GTE binary_expression
    (147) binary_expression -> . binary_expression > binary_expression
    (148) binary_expression -> . binary_expression EQ_OP binary_expression
    (149) binary_expression -> . binary_expression NEQ_OP binary_expression
    (150) binary_expression -> . binary_expression & binary_expression
    (151) binary_expression -> . binary_expression | binary_expression
    (152) binary_expression -> . binary_expression ^ binary_expression
    (153) binary_expression -> . binary_expression AND_OP binary_expression
    (154) binary_expression -> . binary_expression OR_OP binary_expression
    (155) cast_expression -> . unary_expression
    (132) unary_expression -> . postfix_expression
    (133) unary_expression -> . unary_operator cast_expression
    (97) postfix_expression -> . primary_expression
    (98) postfix_expression -> . postfix_expression [ expression ]
    (99) postfix_expression -> . postfix_expression ( argument_expression_list )
    (100) postfix_expression -> . postfix_expression ( )
    (101) postfix_expression -> . postfix_expression PTR_OP identifier
    (126) unary_operator -> . &
    (127) unary_operator -> . *
    (128) unary_operator -> . +
    (129) unary_operator -> . -
    (130) unary_operator -> . ~
    (131) unary_operator -> . !
    (102) primary_expression -> . identifier
    (103) primary_expression -> . constant
    (104) primary_expression -> . unified_string_literal
    (105) primary_expression -> . ( expression )
    (38) identifier -> . IDENTIFIER
    (76) constant -> . INTEGER_CONSTANT
    (77) constant -> . CHAR_CONSTANT
    (78) constant -> . FLOAT_CONSTANT
    (79) constant -> . BOOL_CONSTANT
    (134) unified_string_literal -> . STRING_CONSTANT
    (135) unified_string_literal -> . unified_string_literal STRING_CONSTANT

    &               shift and go to state 69
    *               shift and go to state 66
    +               shift and go to state 67
    -               shift and go to state 68
    ~               shift and go to state 73
    !               shift and go to state 74
    (               shift and go to state 71
    IDENTIFIER      shift and go to state 31
    INTEGER_CONSTANT shift and go to state 77
    CHAR_CONSTANT   shift and go to state 78
    FLOAT_CONSTANT  shift and go to state 79
    BOOL_CONSTANT   shift and go to state 80
    STRING_CONSTANT shift and go to state 81

    binary_expression              shift and go to state 194
    cast_expression                shift and go to state 65
    unary_expression               shift and go to state 159
    postfix_expression             shift and go to state 63
    unary_operator                 shift and go to state 64
    primary_expression             shift and go to state 70
    identifier                     shift and go to state 72
    constant                       shift and go to state 75
    unified_string_literal         shift and go to state 76

state 147

    (147) binary_expression -> binary_expression > . binary_expression
    (136) binary_expression -> . cast_expression
    (137) binary_expression -> . binary_expression * binary_expression
    (138) binary_expression -> . binary_expression / binary_expression
    (139) binary_expression -> . binary_expression % binary_expression
    (140) binary_expression -> . binary_expression + binary_expression
    (141) binary_expression -> . binary_expression - binary_expression
    (142) binary_expression -> . binary_expression RIGHT_OP binary_expression
    (143) binary_expression -> . binary_expression LEFT_OP binary_expression
    (144) binary_expression -> . binary_expression < binary_expression
    (145) binary_expression -> . binary_expression LTE binary_expression
    (146) binary_expression -> . binary_expression GTE binary_expression
    (147) binary_expression -> . binary_expression > binary_expression
    (148) binary_expression -> . binary_expression EQ_OP binary_expression
    (149) binary_expression -> . binary_expression NEQ_OP binary_expression
    (150) binary_expression -> . binary_expression & binary_expression
    (151) binary_expression -> . binary_expression | binary_expression
    (152) binary_expression -> . binary_expression ^ binary_expression
    (153) binary_expression -> . binary_expression AND_OP binary_expression
    (154) binary_expression -> . binary_expression OR_OP binary_expression
    (155) cast_expression -> . unary_expression
    (132) unary_expression -> . postfix_expression
    (133) unary_expression -> . unary_operator cast_expression
    (97) postfix_expression -> . primary_expression
    (98) postfix_expression -> . postfix_expression [ expression ]
    (99) postfix_expression -> . postfix_expression ( argument_expression_list )
    (100) postfix_expression -> . postfix_expression ( )
    (101) postfix_expression -> . postfix_expression PTR_OP identifier
    (126) unary_operator -> . &
    (127) unary_operator -> . *
    (128) unary_operator -> . +
    (129) unary_operator -> . -
    (130) unary_operator -> . ~
    (131) unary_operator -> . !
    (102) primary_expression -> . identifier
    (103) primary_expression -> . constant
    (104) primary_expression -> . unified_string_literal
    (105) primary_expression -> . ( expression )
    (38) identifier -> . IDENTIFIER
    (76) constant -> . INTEGER_CONSTANT
    (77) constant -> . CHAR_CONSTANT
    (78) constant -> . FLOAT_CONSTANT
    (79) constant -> . BOOL_CONSTANT
    (134) unified_string_literal -> . STRING_CONSTANT
    (135) unified_string_literal -> . unified_string_literal STRING_CONSTANT

    &               shift and go to state 69
    *               shift and go to state 66
    +               shift and go to state 67
    -               shift and go to state 68
    ~               shift and go to state 73
    !               shift and go to state 74
    (               shift and go to state 71
    IDENTIFIER      shift and go to state 31
    INTEGER_CONSTANT shift and go to state 77
    CHAR_CONSTANT   shift and go to state 78
    FLOAT_CONSTANT  shift and go to state 79
    BOOL_CONSTANT   shift and go to state 80
    STRING_CONSTANT shift and go to state 81

    binary_expression              shift and go to state 195
    cast_expression                shift and go to state 65
    unary_expression               shift and go to state 159
    postfix_expression             shift and go to state 63
    unary_operator                 shift and go to state 64
    primary_expression             shift and go to state 70
    identifier                     shift and go to state 72
    constant                       shift and go to state 75
    unified_string_literal         shift and go to state 76

state 148

    (148) binary_expression -> binary_expression EQ_OP . binary_expression
    (136) binary_expression -> . cast_expression
    (137) binary_expression -> . binary_expression * binary_expression
    (138) binary_expression -> . binary_expression / binary_expression
    (139) binary_expression -> . binary_expression % binary_expression
    (140) binary_expression -> . binary_expression + binary_expression
    (141) binary_expression -> . binary_expression - binary_expression
    (142) binary_expression -> . binary_expression RIGHT_OP binary_expression
    (143) binary_expression -> . binary_expression LEFT_OP binary_expression
    (144) binary_expression -> . binary_expression < binary_expression
    (145) binary_expression -> . binary_expression LTE binary_expression
    (146) binary_expression -> . binary_expression GTE binary_expression
    (147) binary_expression -> . binary_expression > binary_expression
    (148) binary_expression -> . binary_expression EQ_OP binary_expression
    (149) binary_expression -> . binary_expression NEQ_OP binary_expression
    (150) binary_expression -> . binary_expression & binary_expression
    (151) binary_expression -> . binary_expression | binary_expression
    (152) binary_expression -> . binary_expression ^ binary_expression
    (153) binary_expression -> . binary_expression AND_OP binary_expression
    (154) binary_expression -> . binary_expression OR_OP binary_expression
    (155) cast_expression -> . unary_expression
    (132) unary_expression -> . postfix_expression
    (133) unary_expression -> . unary_operator cast_expression
    (97) postfix_expression -> . primary_expression
    (98) postfix_expression -> . postfix_expression [ expression ]
    (99) postfix_expression -> . postfix_expression ( argument_expression_list )
    (100) postfix_expression -> . postfix_expression ( )
    (101) postfix_expression -> . postfix_expression PTR_OP identifier
    (126) unary_operator -> . &
    (127) unary_operator -> . *
    (128) unary_operator -> . +
    (129) unary_operator -> . -
    (130) unary_operator -> . ~
    (131) unary_operator -> . !
    (102) primary_expression -> . identifier
    (103) primary_expression -> . constant
    (104) primary_expression -> . unified_string_literal
    (105) primary_expression -> . ( expression )
    (38) identifier -> . IDENTIFIER
    (76) constant -> . INTEGER_CONSTANT
    (77) constant -> . CHAR_CONSTANT
    (78) constant -> . FLOAT_CONSTANT
    (79) constant -> . BOOL_CONSTANT
    (134) unified_string_literal -> . STRING_CONSTANT
    (135) unified_string_literal -> . unified_string_literal STRING_CONSTANT

    &               shift and go to state 69
    *               shift and go to state 66
    +               shift and go to state 67
    -               shift and go to state 68
    ~               shift and go to state 73
    !               shift and go to state 74
    (               shift and go to state 71
    IDENTIFIER      shift and go to state 31
    INTEGER_CONSTANT shift and go to state 77
    CHAR_CONSTANT   shift and go to state 78
    FLOAT_CONSTANT  shift and go to state 79
    BOOL_CONSTANT   shift and go to state 80
    STRING_CONSTANT shift and go to state 81

    binary_expression              shift and go to state 196
    cast_expression                shift and go to state 65
    unary_expression               shift and go to state 159
    postfix_expression             shift and go to state 63
    unary_operator                 shift and go to state 64
    primary_expression             shift and go to state 70
    identifier                     shift and go to state 72
    constant                       shift and go to state 75
    unified_string_literal         shift and go to state 76

state 149

    (149) binary_expression -> binary_expression NEQ_OP . binary_expression
    (136) binary_expression -> . cast_expression
    (137) binary_expression -> . binary_expression * binary_expression
    (138) binary_expression -> . binary_expression / binary_expression
    (139) binary_expression -> . binary_expression % binary_expression
    (140) binary_expression -> . binary_expression + binary_expression
    (141) binary_expression -> . binary_expression - binary_expression
    (142) binary_expression -> . binary_expression RIGHT_OP binary_expression
    (143) binary_expression -> . binary_expression LEFT_OP binary_expression
    (144) binary_expression -> . binary_expression < binary_expression
    (145) binary_expression -> . binary_expression LTE binary_expression
    (146) binary_expression -> . binary_expression GTE binary_expression
    (147) binary_expression -> . binary_expression > binary_expression
    (148) binary_expression -> . binary_expression EQ_OP binary_expression
    (149) binary_expression -> . binary_expression NEQ_OP binary_expression
    (150) binary_expression -> . binary_expression & binary_expression
    (151) binary_expression -> . binary_expression | binary_expression
    (152) binary_expression -> . binary_expression ^ binary_expression
    (153) binary_expression -> . binary_expression AND_OP binary_expression
    (154) binary_expression -> . binary_expression OR_OP binary_expression
    (155) cast_expression -> . unary_expression
    (132) unary_expression -> . postfix_expression
    (133) unary_expression -> . unary_operator cast_expression
    (97) postfix_expression -> . primary_expression
    (98) postfix_expression -> . postfix_expression [ expression ]
    (99) postfix_expression -> . postfix_expression ( argument_expression_list )
    (100) postfix_expression -> . postfix_expression ( )
    (101) postfix_expression -> . postfix_expression PTR_OP identifier
    (126) unary_operator -> . &
    (127) unary_operator -> . *
    (128) unary_operator -> . +
    (129) unary_operator -> . -
    (130) unary_operator -> . ~
    (131) unary_operator -> . !
    (102) primary_expression -> . identifier
    (103) primary_expression -> . constant
    (104) primary_expression -> . unified_string_literal
    (105) primary_expression -> . ( expression )
    (38) identifier -> . IDENTIFIER
    (76) constant -> . INTEGER_CONSTANT
    (77) constant -> . CHAR_CONSTANT
    (78) constant -> . FLOAT_CONSTANT
    (79) constant -> . BOOL_CONSTANT
    (134) unified_string_literal -> . STRING_CONSTANT
    (135) unified_string_literal -> . unified_string_literal STRING_CONSTANT

    &               shift and go to state 69
    *               shift and go to state 66
    +               shift and go to state 67
    -               shift and go to state 68
    ~               shift and go to state 73
    !               shift and go to state 74
    (               shift and go to state 71
    IDENTIFIER      shift and go to state 31
    INTEGER_CONSTANT shift and go to state 77
    CHAR_CONSTANT   shift and go to state 78
    FLOAT_CONSTANT  shift and go to state 79
    BOOL_CONSTANT   shift and go to state 80
    STRING_CONSTANT shift and go to state 81

    binary_expression              shift and go to state 197
    cast_expression                shift and go to state 65
    unary_expression               shift and go to state 159
    postfix_expression             shift and go to state 63
    unary_operator                 shift and go to state 64
    primary_expression             shift and go to state 70
    identifier                     shift and go to state 72
    constant                       shift and go to state 75
    unified_string_literal         shift and go to state 76

state 150

    (150) binary_expression -> binary_expression & . binary_expression
    (136) binary_expression -> . cast_expression
    (137) binary_expression -> . binary_expression * binary_expression
    (138) binary_expression -> . binary_expression / binary_expression
    (139) binary_expression -> . binary_expression % binary_expression
    (140) binary_expression -> . binary_expression + binary_expression
    (141) binary_expression -> . binary_expression - binary_expression
    (142) binary_expression -> . binary_expression RIGHT_OP binary_expression
    (143) binary_expression -> . binary_expression LEFT_OP binary_expression
    (144) binary_expression -> . binary_expression < binary_expression
    (145) binary_expression -> . binary_expression LTE binary_expression
    (146) binary_expression -> . binary_expression GTE binary_expression
    (147) binary_expression -> . binary_expression > binary_expression
    (148) binary_expression -> . binary_expression EQ_OP binary_expression
    (149) binary_expression -> . binary_expression NEQ_OP binary_expression
    (150) binary_expression -> . binary_expression & binary_expression
    (151) binary_expression -> . binary_expression | binary_expression
    (152) binary_expression -> . binary_expression ^ binary_expression
    (153) binary_expression -> . binary_expression AND_OP binary_expression
    (154) binary_expression -> . binary_expression OR_OP binary_expression
    (155) cast_expression -> . unary_expression
    (132) unary_expression -> . postfix_expression
    (133) unary_expression -> . unary_operator cast_expression
    (97) postfix_expression -> . primary_expression
    (98) postfix_expression -> . postfix_expression [ expression ]
    (99) postfix_expression -> . postfix_expression ( argument_expression_list )
    (100) postfix_expression -> . postfix_expression ( )
    (101) postfix_expression -> . postfix_expression PTR_OP identifier
    (126) unary_operator -> . &
    (127) unary_operator -> . *
    (128) unary_operator -> . +
    (129) unary_operator -> . -
    (130) unary_operator -> . ~
    (131) unary_operator -> . !
    (102) primary_expression -> . identifier
    (103) primary_expression -> . constant
    (104) primary_expression -> . unified_string_literal
    (105) primary_expression -> . ( expression )
    (38) identifier -> . IDENTIFIER
    (76) constant -> . INTEGER_CONSTANT
    (77) constant -> . CHAR_CONSTANT
    (78) constant -> . FLOAT_CONSTANT
    (79) constant -> . BOOL_CONSTANT
    (134) unified_string_literal -> . STRING_CONSTANT
    (135) unified_string_literal -> . unified_string_literal STRING_CONSTANT

    &               shift and go to state 69
    *               shift and go to state 66
    +               shift and go to state 67
    -               shift and go to state 68
    ~               shift and go to state 73
    !               shift and go to state 74
    (               shift and go to state 71
    IDENTIFIER      shift and go to state 31
    INTEGER_CONSTANT shift and go to state 77
    CHAR_CONSTANT   shift and go to state 78
    FLOAT_CONSTANT  shift and go to state 79
    BOOL_CONSTANT   shift and go to state 80
    STRING_CONSTANT shift and go to state 81

    binary_expression              shift and go to state 198
    cast_expression                shift and go to state 65
    unary_expression               shift and go to state 159
    postfix_expression             shift and go to state 63
    unary_operator                 shift and go to state 64
    primary_expression             shift and go to state 70
    identifier                     shift and go to state 72
    constant                       shift and go to state 75
    unified_string_literal         shift and go to state 76

state 151

    (151) binary_expression -> binary_expression | . binary_expression
    (136) binary_expression -> . cast_expression
    (137) binary_expression -> . binary_expression * binary_expression
    (138) binary_expression -> . binary_expression / binary_expression
    (139) binary_expression -> . binary_expression % binary_expression
    (140) binary_expression -> . binary_expression + binary_expression
    (141) binary_expression -> . binary_expression - binary_expression
    (142) binary_expression -> . binary_expression RIGHT_OP binary_expression
    (143) binary_expression -> . binary_expression LEFT_OP binary_expression
    (144) binary_expression -> . binary_expression < binary_expression
    (145) binary_expression -> . binary_expression LTE binary_expression
    (146) binary_expression -> . binary_expression GTE binary_expression
    (147) binary_expression -> . binary_expression > binary_expression
    (148) binary_expression -> . binary_expression EQ_OP binary_expression
    (149) binary_expression -> . binary_expression NEQ_OP binary_expression
    (150) binary_expression -> . binary_expression & binary_expression
    (151) binary_expression -> . binary_expression | binary_expression
    (152) binary_expression -> . binary_expression ^ binary_expression
    (153) binary_expression -> . binary_expression AND_OP binary_expression
    (154) binary_expression -> . binary_expression OR_OP binary_expression
    (155) cast_expression -> . unary_expression
    (132) unary_expression -> . postfix_expression
    (133) unary_expression -> . unary_operator cast_expression
    (97) postfix_expression -> . primary_expression
    (98) postfix_expression -> . postfix_expression [ expression ]
    (99) postfix_expression -> . postfix_expression ( argument_expression_list )
    (100) postfix_expression -> . postfix_expression ( )
    (101) postfix_expression -> . postfix_expression PTR_OP identifier
    (126) unary_operator -> . &
    (127) unary_operator -> . *
    (128) unary_operator -> . +
    (129) unary_operator -> . -
    (130) unary_operator -> . ~
    (131) unary_operator -> . !
    (102) primary_expression -> . identifier
    (103) primary_expression -> . constant
    (104) primary_expression -> . unified_string_literal
    (105) primary_expression -> . ( expression )
    (38) identifier -> . IDENTIFIER
    (76) constant -> . INTEGER_CONSTANT
    (77) constant -> . CHAR_CONSTANT
    (78) constant -> . FLOAT_CONSTANT
    (79) constant -> . BOOL_CONSTANT
    (134) unified_string_literal -> . STRING_CONSTANT
    (135) unified_string_literal -> . unified_string_literal STRING_CONSTANT

    &               shift and go to state 69
    *               shift and go to state 66
    +               shift and go to state 67
    -               shift and go to state 68
    ~               shift and go to state 73
    !               shift and go to state 74
    (               shift and go to state 71
    IDENTIFIER      shift and go to state 31
    INTEGER_CONSTANT shift and go to state 77
    CHAR_CONSTANT   shift and go to state 78
    FLOAT_CONSTANT  shift and go to state 79
    BOOL_CONSTANT   shift and go to state 80
    STRING_CONSTANT shift and go to state 81

    binary_expression              shift and go to state 199
    cast_expression                shift and go to state 65
    unary_expression               shift and go to state 159
    postfix_expression             shift and go to state 63
    unary_operator                 shift and go to state 64
    primary_expression             shift and go to state 70
    identifier                     shift and go to state 72
    constant                       shift and go to state 75
    unified_string_literal         shift and go to state 76

state 152

    (152) binary_expression -> binary_expression ^ . binary_expression
    (136) binary_expression -> . cast_expression
    (137) binary_expression -> . binary_expression * binary_expression
    (138) binary_expression -> . binary_expression / binary_expression
    (139) binary_expression -> . binary_expression % binary_expression
    (140) binary_expression -> . binary_expression + binary_expression
    (141) binary_expression -> . binary_expression - binary_expression
    (142) binary_expression -> . binary_expression RIGHT_OP binary_expression
    (143) binary_expression -> . binary_expression LEFT_OP binary_expression
    (144) binary_expression -> . binary_expression < binary_expression
    (145) binary_expression -> . binary_expression LTE binary_expression
    (146) binary_expression -> . binary_expression GTE binary_expression
    (147) binary_expression -> . binary_expression > binary_expression
    (148) binary_expression -> . binary_expression EQ_OP binary_expression
    (149) binary_expression -> . binary_expression NEQ_OP binary_expression
    (150) binary_expression -> . binary_expression & binary_expression
    (151) binary_expression -> . binary_expression | binary_expression
    (152) binary_expression -> . binary_expression ^ binary_expression
    (153) binary_expression -> . binary_expression AND_OP binary_expression
    (154) binary_expression -> . binary_expression OR_OP binary_expression
    (155) cast_expression -> . unary_expression
    (132) unary_expression -> . postfix_expression
    (133) unary_expression -> . unary_operator cast_expression
    (97) postfix_expression -> . primary_expression
    (98) postfix_expression -> . postfix_expression [ expression ]
    (99) postfix_expression -> . postfix_expression ( argument_expression_list )
    (100) postfix_expression -> . postfix_expression ( )
    (101) postfix_expression -> . postfix_expression PTR_OP identifier
    (126) unary_operator -> . &
    (127) unary_operator -> . *
    (128) unary_operator -> . +
    (129) unary_operator -> . -
    (130) unary_operator -> . ~
    (131) unary_operator -> . !
    (102) primary_expression -> . identifier
    (103) primary_expression -> . constant
    (104) primary_expression -> . unified_string_literal
    (105) primary_expression -> . ( expression )
    (38) identifier -> . IDENTIFIER
    (76) constant -> . INTEGER_CONSTANT
    (77) constant -> . CHAR_CONSTANT
    (78) constant -> . FLOAT_CONSTANT
    (79) constant -> . BOOL_CONSTANT
    (134) unified_string_literal -> . STRING_CONSTANT
    (135) unified_string_literal -> . unified_string_literal STRING_CONSTANT

    &               shift and go to state 69
    *               shift and go to state 66
    +               shift and go to state 67
    -               shift and go to state 68
    ~               shift and go to state 73
    !               shift and go to state 74
    (               shift and go to state 71
    IDENTIFIER      shift and go to state 31
    INTEGER_CONSTANT shift and go to state 77
    CHAR_CONSTANT   shift and go to state 78
    FLOAT_CONSTANT  shift and go to state 79
    BOOL_CONSTANT   shift and go to state 80
    STRING_CONSTANT shift and go to state 81

    binary_expression              shift and go to state 200
    cast_expression                shift and go to state 65
    unary_expression               shift and go to state 159
    postfix_expression             shift and go to state 63
    unary_operator                 shift and go to state 64
    primary_expression             shift and go to state 70
    identifier                     shift and go to state 72
    constant                       shift and go to state 75
    unified_string_literal         shift and go to state 76

state 153

    (153) binary_expression -> binary_expression AND_OP . binary_expression
    (136) binary_expression -> . cast_expression
    (137) binary_expression -> . binary_expression * binary_expression
    (138) binary_expression -> . binary_expression / binary_expression
    (139) binary_expression -> . binary_expression % binary_expression
    (140) binary_expression -> . binary_expression + binary_expression
    (141) binary_expression -> . binary_expression - binary_expression
    (142) binary_expression -> . binary_expression RIGHT_OP binary_expression
    (143) binary_expression -> . binary_expression LEFT_OP binary_expression
    (144) binary_expression -> . binary_expression < binary_expression
    (145) binary_expression -> . binary_expression LTE binary_expression
    (146) binary_expression -> . binary_expression GTE binary_expression
    (147) binary_expression -> . binary_expression > binary_expression
    (148) binary_expression -> . binary_expression EQ_OP binary_expression
    (149) binary_expression -> . binary_expression NEQ_OP binary_expression
    (150) binary_expression -> . binary_expression & binary_expression
    (151) binary_expression -> . binary_expression | binary_expression
    (152) binary_expression -> . binary_expression ^ binary_expression
    (153) binary_expression -> . binary_expression AND_OP binary_expression
    (154) binary_expression -> . binary_expression OR_OP binary_expression
    (155) cast_expression -> . unary_expression
    (132) unary_expression -> . postfix_expression
    (133) unary_expression -> . unary_operator cast_expression
    (97) postfix_expression -> . primary_expression
    (98) postfix_expression -> . postfix_expression [ expression ]
    (99) postfix_expression -> . postfix_expression ( argument_expression_list )
    (100) postfix_expression -> . postfix_expression ( )
    (101) postfix_expression -> . postfix_expression PTR_OP identifier
    (126) unary_operator -> . &
    (127) unary_operator -> . *
    (128) unary_operator -> . +
    (129) unary_operator -> . -
    (130) unary_operator -> . ~
    (131) unary_operator -> . !
    (102) primary_expression -> . identifier
    (103) primary_expression -> . constant
    (104) primary_expression -> . unified_string_literal
    (105) primary_expression -> . ( expression )
    (38) identifier -> . IDENTIFIER
    (76) constant -> . INTEGER_CONSTANT
    (77) constant -> . CHAR_CONSTANT
    (78) constant -> . FLOAT_CONSTANT
    (79) constant -> . BOOL_CONSTANT
    (134) unified_string_literal -> . STRING_CONSTANT
    (135) unified_string_literal -> . unified_string_literal STRING_CONSTANT

    &               shift and go to state 69
    *               shift and go to state 66
    +               shift and go to state 67
    -               shift and go to state 68
    ~               shift and go to state 73
    !               shift and go to state 74
    (               shift and go to state 71
    IDENTIFIER      shift and go to state 31
    INTEGER_CONSTANT shift and go to state 77
    CHAR_CONSTANT   shift and go to state 78
    FLOAT_CONSTANT  shift and go to state 79
    BOOL_CONSTANT   shift and go to state 80
    STRING_CONSTANT shift and go to state 81

    binary_expression              shift and go to state 201
    cast_expression                shift and go to state 65
    unary_expression               shift and go to state 159
    postfix_expression             shift and go to state 63
    unary_operator                 shift and go to state 64
    primary_expression             shift and go to state 70
    identifier                     shift and go to state 72
    constant                       shift and go to state 75
    unified_string_literal         shift and go to state 76

state 154

    (154) binary_expression -> binary_expression OR_OP . binary_expression
    (136) binary_expression -> . cast_expression
    (137) binary_expression -> . binary_expression * binary_expression
    (138) binary_expression -> . binary_expression / binary_expression
    (139) binary_expression -> . binary_expression % binary_expression
    (140) binary_expression -> . binary_expression + binary_expression
    (141) binary_expression -> . binary_expression - binary_expression
    (142) binary_expression -> . binary_expression RIGHT_OP binary_expression
    (143) binary_expression -> . binary_expression LEFT_OP binary_expression
    (144) binary_expression -> . binary_expression < binary_expression
    (145) binary_expression -> . binary_expression LTE binary_expression
    (146) binary_expression -> . binary_expression GTE binary_expression
    (147) binary_expression -> . binary_expression > binary_expression
    (148) binary_expression -> . binary_expression EQ_OP binary_expression
    (149) binary_expression -> . binary_expression NEQ_OP binary_expression
    (150) binary_expression -> . binary_expression & binary_expression
    (151) binary_expression -> . binary_expression | binary_expression
    (152) binary_expression -> . binary_expression ^ binary_expression
    (153) binary_expression -> . binary_expression AND_OP binary_expression
    (154) binary_expression -> . binary_expression OR_OP binary_expression
    (155) cast_expression -> . unary_expression
    (132) unary_expression -> . postfix_expression
    (133) unary_expression -> . unary_operator cast_expression
    (97) postfix_expression -> . primary_expression
    (98) postfix_expression -> . postfix_expression [ expression ]
    (99) postfix_expression -> . postfix_expression ( argument_expression_list )
    (100) postfix_expression -> . postfix_expression ( )
    (101) postfix_expression -> . postfix_expression PTR_OP identifier
    (126) unary_operator -> . &
    (127) unary_operator -> . *
    (128) unary_operator -> . +
    (129) unary_operator -> . -
    (130) unary_operator -> . ~
    (131) unary_operator -> . !
    (102) primary_expression -> . identifier
    (103) primary_expression -> . constant
    (104) primary_expression -> . unified_string_literal
    (105) primary_expression -> . ( expression )
    (38) identifier -> . IDENTIFIER
    (76) constant -> . INTEGER_CONSTANT
    (77) constant -> . CHAR_CONSTANT
    (78) constant -> . FLOAT_CONSTANT
    (79) constant -> . BOOL_CONSTANT
    (134) unified_string_literal -> . STRING_CONSTANT
    (135) unified_string_literal -> . unified_string_literal STRING_CONSTANT

    &               shift and go to state 69
    *               shift and go to state 66
    +               shift and go to state 67
    -               shift and go to state 68
    ~               shift and go to state 73
    !               shift and go to state 74
    (               shift and go to state 71
    IDENTIFIER      shift and go to state 31
    INTEGER_CONSTANT shift and go to state 77
    CHAR_CONSTANT   shift and go to state 78
    FLOAT_CONSTANT  shift and go to state 79
    BOOL_CONSTANT   shift and go to state 80
    STRING_CONSTANT shift and go to state 81

    binary_expression              shift and go to state 202
    cast_expression                shift and go to state 65
    unary_expression               shift and go to state 159
    postfix_expression             shift and go to state 63
    unary_operator                 shift and go to state 64
    primary_expression             shift and go to state 70
    identifier                     shift and go to state 72
    constant                       shift and go to state 75
    unified_string_literal         shift and go to state 76

state 155

    (98) postfix_expression -> postfix_expression [ . expression ]
    (90) expression -> . assignment_expression
    (91) expression -> . expression , assignment_expression
    (60) assignment_expression -> . conditional_expression
    (61) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (75) conditional_expression -> . binary_expression
    (132) unary_expression -> . postfix_expression
    (133) unary_expression -> . unary_operator cast_expression
    (136) binary_expression -> . cast_expression
    (137) binary_expression -> . binary_expression * binary_expression
    (138) binary_expression -> . binary_expression / binary_expression
    (139) binary_expression -> . binary_expression % binary_expression
    (140) binary_expression -> . binary_expression + binary_expression
    (141) binary_expression -> . binary_expression - binary_expression
    (142) binary_expression -> . binary_expression RIGHT_OP binary_expression
    (143) binary_expression -> . binary_expression LEFT_OP binary_expression
    (144) binary_expression -> . binary_expression < binary_expression
    (145) binary_expression -> . binary_expression LTE binary_expression
    (146) binary_expression -> . binary_expression GTE binary_expression
    (147) binary_expression -> . binary_expression > binary_expression
    (148) binary_expression -> . binary_expression EQ_OP binary_expression
    (149) binary_expression -> . binary_expression NEQ_OP binary_expression
    (150) binary_expression -> . binary_expression & binary_expression
    (151) binary_expression -> . binary_expression | binary_expression
    (152) binary_expression -> . binary_expression ^ binary_expression
    (153) binary_expression -> . binary_expression AND_OP binary_expression
    (154) binary_expression -> . binary_expression OR_OP binary_expression
    (97) postfix_expression -> . primary_expression
    (98) postfix_expression -> . postfix_expression [ expression ]
    (99) postfix_expression -> . postfix_expression ( argument_expression_list )
    (100) postfix_expression -> . postfix_expression ( )
    (101) postfix_expression -> . postfix_expression PTR_OP identifier
    (126) unary_operator -> . &
    (127) unary_operator -> . *
    (128) unary_operator -> . +
    (129) unary_operator -> . -
    (130) unary_operator -> . ~
    (131) unary_operator -> . !
    (155) cast_expression -> . unary_expression
    (102) primary_expression -> . identifier
    (103) primary_expression -> . constant
    (104) primary_expression -> . unified_string_literal
    (105) primary_expression -> . ( expression )
    (38) identifier -> . IDENTIFIER
    (76) constant -> . INTEGER_CONSTANT
    (77) constant -> . CHAR_CONSTANT
    (78) constant -> . FLOAT_CONSTANT
    (79) constant -> . BOOL_CONSTANT
    (134) unified_string_literal -> . STRING_CONSTANT
    (135) unified_string_literal -> . unified_string_literal STRING_CONSTANT

    &               shift and go to state 69
    *               shift and go to state 66
    +               shift and go to state 67
    -               shift and go to state 68
    ~               shift and go to state 73
    !               shift and go to state 74
    (               shift and go to state 71
    IDENTIFIER      shift and go to state 31
    INTEGER_CONSTANT shift and go to state 77
    CHAR_CONSTANT   shift and go to state 78
    FLOAT_CONSTANT  shift and go to state 79
    BOOL_CONSTANT   shift and go to state 80
    STRING_CONSTANT shift and go to state 81

    postfix_expression             shift and go to state 63
    expression                     shift and go to state 203
    assignment_expression          shift and go to state 120
    conditional_expression         shift and go to state 60
    unary_expression               shift and go to state 61
    binary_expression              shift and go to state 62
    unary_operator                 shift and go to state 64
    cast_expression                shift and go to state 65
    primary_expression             shift and go to state 70
    identifier                     shift and go to state 72
    constant                       shift and go to state 75
    unified_string_literal         shift and go to state 76

state 156

    (99) postfix_expression -> postfix_expression ( . argument_expression_list )
    (100) postfix_expression -> postfix_expression ( . )
    (58) argument_expression_list -> . assignment_expression
    (59) argument_expression_list -> . argument_expression_list , assignment_expression
    (60) assignment_expression -> . conditional_expression
    (61) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (75) conditional_expression -> . binary_expression
    (132) unary_expression -> . postfix_expression
    (133) unary_expression -> . unary_operator cast_expression
    (136) binary_expression -> . cast_expression
    (137) binary_expression -> . binary_expression * binary_expression
    (138) binary_expression -> . binary_expression / binary_expression
    (139) binary_expression -> . binary_expression % binary_expression
    (140) binary_expression -> . binary_expression + binary_expression
    (141) binary_expression -> . binary_expression - binary_expression
    (142) binary_expression -> . binary_expression RIGHT_OP binary_expression
    (143) binary_expression -> . binary_expression LEFT_OP binary_expression
    (144) binary_expression -> . binary_expression < binary_expression
    (145) binary_expression -> . binary_expression LTE binary_expression
    (146) binary_expression -> . binary_expression GTE binary_expression
    (147) binary_expression -> . binary_expression > binary_expression
    (148) binary_expression -> . binary_expression EQ_OP binary_expression
    (149) binary_expression -> . binary_expression NEQ_OP binary_expression
    (150) binary_expression -> . binary_expression & binary_expression
    (151) binary_expression -> . binary_expression | binary_expression
    (152) binary_expression -> . binary_expression ^ binary_expression
    (153) binary_expression -> . binary_expression AND_OP binary_expression
    (154) binary_expression -> . binary_expression OR_OP binary_expression
    (97) postfix_expression -> . primary_expression
    (98) postfix_expression -> . postfix_expression [ expression ]
    (99) postfix_expression -> . postfix_expression ( argument_expression_list )
    (100) postfix_expression -> . postfix_expression ( )
    (101) postfix_expression -> . postfix_expression PTR_OP identifier
    (126) unary_operator -> . &
    (127) unary_operator -> . *
    (128) unary_operator -> . +
    (129) unary_operator -> . -
    (130) unary_operator -> . ~
    (131) unary_operator -> . !
    (155) cast_expression -> . unary_expression
    (102) primary_expression -> . identifier
    (103) primary_expression -> . constant
    (104) primary_expression -> . unified_string_literal
    (105) primary_expression -> . ( expression )
    (38) identifier -> . IDENTIFIER
    (76) constant -> . INTEGER_CONSTANT
    (77) constant -> . CHAR_CONSTANT
    (78) constant -> . FLOAT_CONSTANT
    (79) constant -> . BOOL_CONSTANT
    (134) unified_string_literal -> . STRING_CONSTANT
    (135) unified_string_literal -> . unified_string_literal STRING_CONSTANT

    )               shift and go to state 205
    &               shift and go to state 69
    *               shift and go to state 66
    +               shift and go to state 67
    -               shift and go to state 68
    ~               shift and go to state 73
    !               shift and go to state 74
    (               shift and go to state 71
    IDENTIFIER      shift and go to state 31
    INTEGER_CONSTANT shift and go to state 77
    CHAR_CONSTANT   shift and go to state 78
    FLOAT_CONSTANT  shift and go to state 79
    BOOL_CONSTANT   shift and go to state 80
    STRING_CONSTANT shift and go to state 81

    postfix_expression             shift and go to state 63
    argument_expression_list       shift and go to state 204
    assignment_expression          shift and go to state 206
    conditional_expression         shift and go to state 60
    unary_expression               shift and go to state 61
    binary_expression              shift and go to state 62
    unary_operator                 shift and go to state 64
    cast_expression                shift and go to state 65
    primary_expression             shift and go to state 70
    identifier                     shift and go to state 72
    constant                       shift and go to state 75
    unified_string_literal         shift and go to state 76

state 157

    (101) postfix_expression -> postfix_expression PTR_OP . identifier
    (38) identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 31

    identifier                     shift and go to state 207

state 158

    (133) unary_expression -> unary_operator cast_expression .

    =               reduce using rule 133 (unary_expression -> unary_operator cast_expression .)
    MUL_ASSIGN      reduce using rule 133 (unary_expression -> unary_operator cast_expression .)
    DIV_ASSIGN      reduce using rule 133 (unary_expression -> unary_operator cast_expression .)
    MOD_ASSIGN      reduce using rule 133 (unary_expression -> unary_operator cast_expression .)
    ADD_ASSIGN      reduce using rule 133 (unary_expression -> unary_operator cast_expression .)
    SUB_ASSIGN      reduce using rule 133 (unary_expression -> unary_operator cast_expression .)
    LEFT_ASSIGN     reduce using rule 133 (unary_expression -> unary_operator cast_expression .)
    RIGHT_ASSIGN    reduce using rule 133 (unary_expression -> unary_operator cast_expression .)
    AND_ASSIGN      reduce using rule 133 (unary_expression -> unary_operator cast_expression .)
    XOR_ASSIGN      reduce using rule 133 (unary_expression -> unary_operator cast_expression .)
    OR_ASSIGN       reduce using rule 133 (unary_expression -> unary_operator cast_expression .)
    *               reduce using rule 133 (unary_expression -> unary_operator cast_expression .)
    /               reduce using rule 133 (unary_expression -> unary_operator cast_expression .)
    %               reduce using rule 133 (unary_expression -> unary_operator cast_expression .)
    +               reduce using rule 133 (unary_expression -> unary_operator cast_expression .)
    -               reduce using rule 133 (unary_expression -> unary_operator cast_expression .)
    RIGHT_OP        reduce using rule 133 (unary_expression -> unary_operator cast_expression .)
    LEFT_OP         reduce using rule 133 (unary_expression -> unary_operator cast_expression .)
    <               reduce using rule 133 (unary_expression -> unary_operator cast_expression .)
    LTE             reduce using rule 133 (unary_expression -> unary_operator cast_expression .)
    GTE             reduce using rule 133 (unary_expression -> unary_operator cast_expression .)
    >               reduce using rule 133 (unary_expression -> unary_operator cast_expression .)
    EQ_OP           reduce using rule 133 (unary_expression -> unary_operator cast_expression .)
    NEQ_OP          reduce using rule 133 (unary_expression -> unary_operator cast_expression .)
    &               reduce using rule 133 (unary_expression -> unary_operator cast_expression .)
    |               reduce using rule 133 (unary_expression -> unary_operator cast_expression .)
    ^               reduce using rule 133 (unary_expression -> unary_operator cast_expression .)
    AND_OP          reduce using rule 133 (unary_expression -> unary_operator cast_expression .)
    OR_OP           reduce using rule 133 (unary_expression -> unary_operator cast_expression .)
    ,               reduce using rule 133 (unary_expression -> unary_operator cast_expression .)
    ;               reduce using rule 133 (unary_expression -> unary_operator cast_expression .)
    ]               reduce using rule 133 (unary_expression -> unary_operator cast_expression .)
    }               reduce using rule 133 (unary_expression -> unary_operator cast_expression .)
    )               reduce using rule 133 (unary_expression -> unary_operator cast_expression .)


state 159

    (155) cast_expression -> unary_expression .

    =               reduce using rule 155 (cast_expression -> unary_expression .)
    MUL_ASSIGN      reduce using rule 155 (cast_expression -> unary_expression .)
    DIV_ASSIGN      reduce using rule 155 (cast_expression -> unary_expression .)
    MOD_ASSIGN      reduce using rule 155 (cast_expression -> unary_expression .)
    ADD_ASSIGN      reduce using rule 155 (cast_expression -> unary_expression .)
    SUB_ASSIGN      reduce using rule 155 (cast_expression -> unary_expression .)
    LEFT_ASSIGN     reduce using rule 155 (cast_expression -> unary_expression .)
    RIGHT_ASSIGN    reduce using rule 155 (cast_expression -> unary_expression .)
    AND_ASSIGN      reduce using rule 155 (cast_expression -> unary_expression .)
    XOR_ASSIGN      reduce using rule 155 (cast_expression -> unary_expression .)
    OR_ASSIGN       reduce using rule 155 (cast_expression -> unary_expression .)
    *               reduce using rule 155 (cast_expression -> unary_expression .)
    /               reduce using rule 155 (cast_expression -> unary_expression .)
    %               reduce using rule 155 (cast_expression -> unary_expression .)
    +               reduce using rule 155 (cast_expression -> unary_expression .)
    -               reduce using rule 155 (cast_expression -> unary_expression .)
    RIGHT_OP        reduce using rule 155 (cast_expression -> unary_expression .)
    LEFT_OP         reduce using rule 155 (cast_expression -> unary_expression .)
    <               reduce using rule 155 (cast_expression -> unary_expression .)
    LTE             reduce using rule 155 (cast_expression -> unary_expression .)
    GTE             reduce using rule 155 (cast_expression -> unary_expression .)
    >               reduce using rule 155 (cast_expression -> unary_expression .)
    EQ_OP           reduce using rule 155 (cast_expression -> unary_expression .)
    NEQ_OP          reduce using rule 155 (cast_expression -> unary_expression .)
    &               reduce using rule 155 (cast_expression -> unary_expression .)
    |               reduce using rule 155 (cast_expression -> unary_expression .)
    ^               reduce using rule 155 (cast_expression -> unary_expression .)
    AND_OP          reduce using rule 155 (cast_expression -> unary_expression .)
    OR_OP           reduce using rule 155 (cast_expression -> unary_expression .)
    ,               reduce using rule 155 (cast_expression -> unary_expression .)
    ;               reduce using rule 155 (cast_expression -> unary_expression .)
    ]               reduce using rule 155 (cast_expression -> unary_expression .)
    }               reduce using rule 155 (cast_expression -> unary_expression .)
    )               reduce using rule 155 (cast_expression -> unary_expression .)


state 160

    (105) primary_expression -> ( expression . )
    (91) expression -> expression . , assignment_expression

    )               shift and go to state 208
    ,               shift and go to state 175


state 161

    (135) unified_string_literal -> unified_string_literal STRING_CONSTANT .

    STRING_CONSTANT reduce using rule 135 (unified_string_literal -> unified_string_literal STRING_CONSTANT .)
    [               reduce using rule 135 (unified_string_literal -> unified_string_literal STRING_CONSTANT .)
    (               reduce using rule 135 (unified_string_literal -> unified_string_literal STRING_CONSTANT .)
    PTR_OP          reduce using rule 135 (unified_string_literal -> unified_string_literal STRING_CONSTANT .)
    =               reduce using rule 135 (unified_string_literal -> unified_string_literal STRING_CONSTANT .)
    MUL_ASSIGN      reduce using rule 135 (unified_string_literal -> unified_string_literal STRING_CONSTANT .)
    DIV_ASSIGN      reduce using rule 135 (unified_string_literal -> unified_string_literal STRING_CONSTANT .)
    MOD_ASSIGN      reduce using rule 135 (unified_string_literal -> unified_string_literal STRING_CONSTANT .)
    ADD_ASSIGN      reduce using rule 135 (unified_string_literal -> unified_string_literal STRING_CONSTANT .)
    SUB_ASSIGN      reduce using rule 135 (unified_string_literal -> unified_string_literal STRING_CONSTANT .)
    LEFT_ASSIGN     reduce using rule 135 (unified_string_literal -> unified_string_literal STRING_CONSTANT .)
    RIGHT_ASSIGN    reduce using rule 135 (unified_string_literal -> unified_string_literal STRING_CONSTANT .)
    AND_ASSIGN      reduce using rule 135 (unified_string_literal -> unified_string_literal STRING_CONSTANT .)
    XOR_ASSIGN      reduce using rule 135 (unified_string_literal -> unified_string_literal STRING_CONSTANT .)
    OR_ASSIGN       reduce using rule 135 (unified_string_literal -> unified_string_literal STRING_CONSTANT .)
    *               reduce using rule 135 (unified_string_literal -> unified_string_literal STRING_CONSTANT .)
    /               reduce using rule 135 (unified_string_literal -> unified_string_literal STRING_CONSTANT .)
    %               reduce using rule 135 (unified_string_literal -> unified_string_literal STRING_CONSTANT .)
    +               reduce using rule 135 (unified_string_literal -> unified_string_literal STRING_CONSTANT .)
    -               reduce using rule 135 (unified_string_literal -> unified_string_literal STRING_CONSTANT .)
    RIGHT_OP        reduce using rule 135 (unified_string_literal -> unified_string_literal STRING_CONSTANT .)
    LEFT_OP         reduce using rule 135 (unified_string_literal -> unified_string_literal STRING_CONSTANT .)
    <               reduce using rule 135 (unified_string_literal -> unified_string_literal STRING_CONSTANT .)
    LTE             reduce using rule 135 (unified_string_literal -> unified_string_literal STRING_CONSTANT .)
    GTE             reduce using rule 135 (unified_string_literal -> unified_string_literal STRING_CONSTANT .)
    >               reduce using rule 135 (unified_string_literal -> unified_string_literal STRING_CONSTANT .)
    EQ_OP           reduce using rule 135 (unified_string_literal -> unified_string_literal STRING_CONSTANT .)
    NEQ_OP          reduce using rule 135 (unified_string_literal -> unified_string_literal STRING_CONSTANT .)
    &               reduce using rule 135 (unified_string_literal -> unified_string_literal STRING_CONSTANT .)
    |               reduce using rule 135 (unified_string_literal -> unified_string_literal STRING_CONSTANT .)
    ^               reduce using rule 135 (unified_string_literal -> unified_string_literal STRING_CONSTANT .)
    AND_OP          reduce using rule 135 (unified_string_literal -> unified_string_literal STRING_CONSTANT .)
    OR_OP           reduce using rule 135 (unified_string_literal -> unified_string_literal STRING_CONSTANT .)
    ,               reduce using rule 135 (unified_string_literal -> unified_string_literal STRING_CONSTANT .)
    ;               reduce using rule 135 (unified_string_literal -> unified_string_literal STRING_CONSTANT .)
    ]               reduce using rule 135 (unified_string_literal -> unified_string_literal STRING_CONSTANT .)
    }               reduce using rule 135 (unified_string_literal -> unified_string_literal STRING_CONSTANT .)
    )               reduce using rule 135 (unified_string_literal -> unified_string_literal STRING_CONSTANT .)


state 162

    (85) direct_declarator -> direct_declarator [ assignment_expression_orempty ] .

    [               reduce using rule 85 (direct_declarator -> direct_declarator [ assignment_expression_orempty ] .)
    (               reduce using rule 85 (direct_declarator -> direct_declarator [ assignment_expression_orempty ] .)
    =               reduce using rule 85 (direct_declarator -> direct_declarator [ assignment_expression_orempty ] .)
    VOID            reduce using rule 85 (direct_declarator -> direct_declarator [ assignment_expression_orempty ] .)
    CHAR            reduce using rule 85 (direct_declarator -> direct_declarator [ assignment_expression_orempty ] .)
    SHORT           reduce using rule 85 (direct_declarator -> direct_declarator [ assignment_expression_orempty ] .)
    INT             reduce using rule 85 (direct_declarator -> direct_declarator [ assignment_expression_orempty ] .)
    LONG            reduce using rule 85 (direct_declarator -> direct_declarator [ assignment_expression_orempty ] .)
    FLOAT           reduce using rule 85 (direct_declarator -> direct_declarator [ assignment_expression_orempty ] .)
    DOUBLE          reduce using rule 85 (direct_declarator -> direct_declarator [ assignment_expression_orempty ] .)
    SIGNED          reduce using rule 85 (direct_declarator -> direct_declarator [ assignment_expression_orempty ] .)
    UNSIGNED        reduce using rule 85 (direct_declarator -> direct_declarator [ assignment_expression_orempty ] .)
    BOOL            reduce using rule 85 (direct_declarator -> direct_declarator [ assignment_expression_orempty ] .)
    STRUCT          reduce using rule 85 (direct_declarator -> direct_declarator [ assignment_expression_orempty ] .)
    {               reduce using rule 85 (direct_declarator -> direct_declarator [ assignment_expression_orempty ] .)
    ,               reduce using rule 85 (direct_declarator -> direct_declarator [ assignment_expression_orempty ] .)
    ;               reduce using rule 85 (direct_declarator -> direct_declarator [ assignment_expression_orempty ] .)
    )               reduce using rule 85 (direct_declarator -> direct_declarator [ assignment_expression_orempty ] .)


state 163

    (86) direct_declarator -> direct_declarator ( parameter_list ) .

    [               reduce using rule 86 (direct_declarator -> direct_declarator ( parameter_list ) .)
    (               reduce using rule 86 (direct_declarator -> direct_declarator ( parameter_list ) .)
    =               reduce using rule 86 (direct_declarator -> direct_declarator ( parameter_list ) .)
    VOID            reduce using rule 86 (direct_declarator -> direct_declarator ( parameter_list ) .)
    CHAR            reduce using rule 86 (direct_declarator -> direct_declarator ( parameter_list ) .)
    SHORT           reduce using rule 86 (direct_declarator -> direct_declarator ( parameter_list ) .)
    INT             reduce using rule 86 (direct_declarator -> direct_declarator ( parameter_list ) .)
    LONG            reduce using rule 86 (direct_declarator -> direct_declarator ( parameter_list ) .)
    FLOAT           reduce using rule 86 (direct_declarator -> direct_declarator ( parameter_list ) .)
    DOUBLE          reduce using rule 86 (direct_declarator -> direct_declarator ( parameter_list ) .)
    SIGNED          reduce using rule 86 (direct_declarator -> direct_declarator ( parameter_list ) .)
    UNSIGNED        reduce using rule 86 (direct_declarator -> direct_declarator ( parameter_list ) .)
    BOOL            reduce using rule 86 (direct_declarator -> direct_declarator ( parameter_list ) .)
    STRUCT          reduce using rule 86 (direct_declarator -> direct_declarator ( parameter_list ) .)
    {               reduce using rule 86 (direct_declarator -> direct_declarator ( parameter_list ) .)
    ,               reduce using rule 86 (direct_declarator -> direct_declarator ( parameter_list ) .)
    ;               reduce using rule 86 (direct_declarator -> direct_declarator ( parameter_list ) .)
    )               reduce using rule 86 (direct_declarator -> direct_declarator ( parameter_list ) .)


state 164

    (95) parameter_list -> parameter_list , . parameter_declaration
    (96) parameter_declaration -> . declaration_specifiers declarator
    (17) declaration_specifiers -> . type_specifier declaration_specifiers_orempty
    (18) type_specifier -> . VOID
    (19) type_specifier -> . CHAR
    (20) type_specifier -> . SHORT
    (21) type_specifier -> . INT
    (22) type_specifier -> . LONG
    (23) type_specifier -> . FLOAT
    (24) type_specifier -> . DOUBLE
    (25) type_specifier -> . SIGNED
    (26) type_specifier -> . UNSIGNED
    (27) type_specifier -> . BOOL
    (28) type_specifier -> . struct_specifier
    (114) struct_specifier -> . STRUCT identifier
    (115) struct_specifier -> . STRUCT { struct_declaration_list }
    (118) struct_specifier -> . STRUCT identifier { struct_declaration_list }

    VOID            shift and go to state 9
    CHAR            shift and go to state 10
    SHORT           shift and go to state 11
    INT             shift and go to state 12
    LONG            shift and go to state 13
    FLOAT           shift and go to state 14
    DOUBLE          shift and go to state 15
    SIGNED          shift and go to state 16
    UNSIGNED        shift and go to state 17
    BOOL            shift and go to state 18
    STRUCT          shift and go to state 20

    parameter_declaration          shift and go to state 209
    declaration_specifiers         shift and go to state 91
    type_specifier                 shift and go to state 8
    struct_specifier               shift and go to state 19

state 165

    (87) direct_declarator -> direct_declarator ( identifier_list_orempty ) .

    [               reduce using rule 87 (direct_declarator -> direct_declarator ( identifier_list_orempty ) .)
    (               reduce using rule 87 (direct_declarator -> direct_declarator ( identifier_list_orempty ) .)
    =               reduce using rule 87 (direct_declarator -> direct_declarator ( identifier_list_orempty ) .)
    VOID            reduce using rule 87 (direct_declarator -> direct_declarator ( identifier_list_orempty ) .)
    CHAR            reduce using rule 87 (direct_declarator -> direct_declarator ( identifier_list_orempty ) .)
    SHORT           reduce using rule 87 (direct_declarator -> direct_declarator ( identifier_list_orempty ) .)
    INT             reduce using rule 87 (direct_declarator -> direct_declarator ( identifier_list_orempty ) .)
    LONG            reduce using rule 87 (direct_declarator -> direct_declarator ( identifier_list_orempty ) .)
    FLOAT           reduce using rule 87 (direct_declarator -> direct_declarator ( identifier_list_orempty ) .)
    DOUBLE          reduce using rule 87 (direct_declarator -> direct_declarator ( identifier_list_orempty ) .)
    SIGNED          reduce using rule 87 (direct_declarator -> direct_declarator ( identifier_list_orempty ) .)
    UNSIGNED        reduce using rule 87 (direct_declarator -> direct_declarator ( identifier_list_orempty ) .)
    BOOL            reduce using rule 87 (direct_declarator -> direct_declarator ( identifier_list_orempty ) .)
    STRUCT          reduce using rule 87 (direct_declarator -> direct_declarator ( identifier_list_orempty ) .)
    {               reduce using rule 87 (direct_declarator -> direct_declarator ( identifier_list_orempty ) .)
    ,               reduce using rule 87 (direct_declarator -> direct_declarator ( identifier_list_orempty ) .)
    ;               reduce using rule 87 (direct_declarator -> direct_declarator ( identifier_list_orempty ) .)
    )               reduce using rule 87 (direct_declarator -> direct_declarator ( identifier_list_orempty ) .)


state 166

    (37) identifier_list -> identifier_list , . identifier
    (38) identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 31

    identifier                     shift and go to state 210

state 167

    (96) parameter_declaration -> declaration_specifiers declarator .

    )               reduce using rule 96 (parameter_declaration -> declaration_specifiers declarator .)
    ,               reduce using rule 96 (parameter_declaration -> declaration_specifiers declarator .)


state 168

    (118) struct_specifier -> STRUCT identifier { struct_declaration_list } .

    VOID            reduce using rule 118 (struct_specifier -> STRUCT identifier { struct_declaration_list } .)
    CHAR            reduce using rule 118 (struct_specifier -> STRUCT identifier { struct_declaration_list } .)
    SHORT           reduce using rule 118 (struct_specifier -> STRUCT identifier { struct_declaration_list } .)
    INT             reduce using rule 118 (struct_specifier -> STRUCT identifier { struct_declaration_list } .)
    LONG            reduce using rule 118 (struct_specifier -> STRUCT identifier { struct_declaration_list } .)
    FLOAT           reduce using rule 118 (struct_specifier -> STRUCT identifier { struct_declaration_list } .)
    DOUBLE          reduce using rule 118 (struct_specifier -> STRUCT identifier { struct_declaration_list } .)
    SIGNED          reduce using rule 118 (struct_specifier -> STRUCT identifier { struct_declaration_list } .)
    UNSIGNED        reduce using rule 118 (struct_specifier -> STRUCT identifier { struct_declaration_list } .)
    BOOL            reduce using rule 118 (struct_specifier -> STRUCT identifier { struct_declaration_list } .)
    STRUCT          reduce using rule 118 (struct_specifier -> STRUCT identifier { struct_declaration_list } .)
    *               reduce using rule 118 (struct_specifier -> STRUCT identifier { struct_declaration_list } .)
    IDENTIFIER      reduce using rule 118 (struct_specifier -> STRUCT identifier { struct_declaration_list } .)
    ;               reduce using rule 118 (struct_specifier -> STRUCT identifier { struct_declaration_list } .)


state 169

    (121) struct_declaration -> specifier_qualifier_list struct_declarator_list ; .

    }               reduce using rule 121 (struct_declaration -> specifier_qualifier_list struct_declarator_list ; .)
    VOID            reduce using rule 121 (struct_declaration -> specifier_qualifier_list struct_declarator_list ; .)
    CHAR            reduce using rule 121 (struct_declaration -> specifier_qualifier_list struct_declarator_list ; .)
    SHORT           reduce using rule 121 (struct_declaration -> specifier_qualifier_list struct_declarator_list ; .)
    INT             reduce using rule 121 (struct_declaration -> specifier_qualifier_list struct_declarator_list ; .)
    LONG            reduce using rule 121 (struct_declaration -> specifier_qualifier_list struct_declarator_list ; .)
    FLOAT           reduce using rule 121 (struct_declaration -> specifier_qualifier_list struct_declarator_list ; .)
    DOUBLE          reduce using rule 121 (struct_declaration -> specifier_qualifier_list struct_declarator_list ; .)
    SIGNED          reduce using rule 121 (struct_declaration -> specifier_qualifier_list struct_declarator_list ; .)
    UNSIGNED        reduce using rule 121 (struct_declaration -> specifier_qualifier_list struct_declarator_list ; .)
    BOOL            reduce using rule 121 (struct_declaration -> specifier_qualifier_list struct_declarator_list ; .)
    STRUCT          reduce using rule 121 (struct_declaration -> specifier_qualifier_list struct_declarator_list ; .)


state 170

    (123) struct_declarator_list -> struct_declarator_list , . declarator
    (81) declarator -> . direct_declarator
    (82) declarator -> . pointer direct_declarator
    (84) direct_declarator -> . identifier
    (85) direct_declarator -> . direct_declarator [ assignment_expression_orempty ]
    (86) direct_declarator -> . direct_declarator ( parameter_list )
    (87) direct_declarator -> . direct_declarator ( identifier_list_orempty )
    (124) pointer -> . *
    (125) pointer -> . * pointer
    (38) identifier -> . IDENTIFIER

    *               shift and go to state 29
    IDENTIFIER      shift and go to state 31

    declarator                     shift and go to state 211
    direct_declarator              shift and go to state 24
    pointer                        shift and go to state 25
    identifier                     shift and go to state 28

state 171

    (74) compound_statement -> { block_item_list_orempty } .

    VOID            reduce using rule 74 (compound_statement -> { block_item_list_orempty } .)
    CHAR            reduce using rule 74 (compound_statement -> { block_item_list_orempty } .)
    SHORT           reduce using rule 74 (compound_statement -> { block_item_list_orempty } .)
    INT             reduce using rule 74 (compound_statement -> { block_item_list_orempty } .)
    LONG            reduce using rule 74 (compound_statement -> { block_item_list_orempty } .)
    FLOAT           reduce using rule 74 (compound_statement -> { block_item_list_orempty } .)
    DOUBLE          reduce using rule 74 (compound_statement -> { block_item_list_orempty } .)
    SIGNED          reduce using rule 74 (compound_statement -> { block_item_list_orempty } .)
    UNSIGNED        reduce using rule 74 (compound_statement -> { block_item_list_orempty } .)
    BOOL            reduce using rule 74 (compound_statement -> { block_item_list_orempty } .)
    STRUCT          reduce using rule 74 (compound_statement -> { block_item_list_orempty } .)
    $end            reduce using rule 74 (compound_statement -> { block_item_list_orempty } .)
    {               reduce using rule 74 (compound_statement -> { block_item_list_orempty } .)
    IF              reduce using rule 74 (compound_statement -> { block_item_list_orempty } .)
    WHILE           reduce using rule 74 (compound_statement -> { block_item_list_orempty } .)
    BREAK           reduce using rule 74 (compound_statement -> { block_item_list_orempty } .)
    CONTINUE        reduce using rule 74 (compound_statement -> { block_item_list_orempty } .)
    RETURN          reduce using rule 74 (compound_statement -> { block_item_list_orempty } .)
    &               reduce using rule 74 (compound_statement -> { block_item_list_orempty } .)
    *               reduce using rule 74 (compound_statement -> { block_item_list_orempty } .)
    +               reduce using rule 74 (compound_statement -> { block_item_list_orempty } .)
    -               reduce using rule 74 (compound_statement -> { block_item_list_orempty } .)
    ~               reduce using rule 74 (compound_statement -> { block_item_list_orempty } .)
    !               reduce using rule 74 (compound_statement -> { block_item_list_orempty } .)
    (               reduce using rule 74 (compound_statement -> { block_item_list_orempty } .)
    IDENTIFIER      reduce using rule 74 (compound_statement -> { block_item_list_orempty } .)
    INTEGER_CONSTANT reduce using rule 74 (compound_statement -> { block_item_list_orempty } .)
    CHAR_CONSTANT   reduce using rule 74 (compound_statement -> { block_item_list_orempty } .)
    FLOAT_CONSTANT  reduce using rule 74 (compound_statement -> { block_item_list_orempty } .)
    BOOL_CONSTANT   reduce using rule 74 (compound_statement -> { block_item_list_orempty } .)
    STRING_CONSTANT reduce using rule 74 (compound_statement -> { block_item_list_orempty } .)
    ;               reduce using rule 74 (compound_statement -> { block_item_list_orempty } .)
    }               reduce using rule 74 (compound_statement -> { block_item_list_orempty } .)
    ELSE            reduce using rule 74 (compound_statement -> { block_item_list_orempty } .)


state 172

    (71) block_item_list -> block_item_list block_item .

    {               reduce using rule 71 (block_item_list -> block_item_list block_item .)
    IF              reduce using rule 71 (block_item_list -> block_item_list block_item .)
    WHILE           reduce using rule 71 (block_item_list -> block_item_list block_item .)
    BREAK           reduce using rule 71 (block_item_list -> block_item_list block_item .)
    CONTINUE        reduce using rule 71 (block_item_list -> block_item_list block_item .)
    RETURN          reduce using rule 71 (block_item_list -> block_item_list block_item .)
    VOID            reduce using rule 71 (block_item_list -> block_item_list block_item .)
    CHAR            reduce using rule 71 (block_item_list -> block_item_list block_item .)
    SHORT           reduce using rule 71 (block_item_list -> block_item_list block_item .)
    INT             reduce using rule 71 (block_item_list -> block_item_list block_item .)
    LONG            reduce using rule 71 (block_item_list -> block_item_list block_item .)
    FLOAT           reduce using rule 71 (block_item_list -> block_item_list block_item .)
    DOUBLE          reduce using rule 71 (block_item_list -> block_item_list block_item .)
    SIGNED          reduce using rule 71 (block_item_list -> block_item_list block_item .)
    UNSIGNED        reduce using rule 71 (block_item_list -> block_item_list block_item .)
    BOOL            reduce using rule 71 (block_item_list -> block_item_list block_item .)
    STRUCT          reduce using rule 71 (block_item_list -> block_item_list block_item .)
    &               reduce using rule 71 (block_item_list -> block_item_list block_item .)
    *               reduce using rule 71 (block_item_list -> block_item_list block_item .)
    +               reduce using rule 71 (block_item_list -> block_item_list block_item .)
    -               reduce using rule 71 (block_item_list -> block_item_list block_item .)
    ~               reduce using rule 71 (block_item_list -> block_item_list block_item .)
    !               reduce using rule 71 (block_item_list -> block_item_list block_item .)
    (               reduce using rule 71 (block_item_list -> block_item_list block_item .)
    IDENTIFIER      reduce using rule 71 (block_item_list -> block_item_list block_item .)
    INTEGER_CONSTANT reduce using rule 71 (block_item_list -> block_item_list block_item .)
    CHAR_CONSTANT   reduce using rule 71 (block_item_list -> block_item_list block_item .)
    FLOAT_CONSTANT  reduce using rule 71 (block_item_list -> block_item_list block_item .)
    BOOL_CONSTANT   reduce using rule 71 (block_item_list -> block_item_list block_item .)
    STRING_CONSTANT reduce using rule 71 (block_item_list -> block_item_list block_item .)
    ;               reduce using rule 71 (block_item_list -> block_item_list block_item .)
    }               reduce using rule 71 (block_item_list -> block_item_list block_item .)


state 173

    (72) expression_orempty -> empty .

    ;               reduce using rule 72 (expression_orempty -> empty .)


state 174

    (106) selection_statement -> IF ( . expression ) statement
    (107) selection_statement -> IF ( . expression ) statement ELSE statement
    (90) expression -> . assignment_expression
    (91) expression -> . expression , assignment_expression
    (60) assignment_expression -> . conditional_expression
    (61) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (75) conditional_expression -> . binary_expression
    (132) unary_expression -> . postfix_expression
    (133) unary_expression -> . unary_operator cast_expression
    (136) binary_expression -> . cast_expression
    (137) binary_expression -> . binary_expression * binary_expression
    (138) binary_expression -> . binary_expression / binary_expression
    (139) binary_expression -> . binary_expression % binary_expression
    (140) binary_expression -> . binary_expression + binary_expression
    (141) binary_expression -> . binary_expression - binary_expression
    (142) binary_expression -> . binary_expression RIGHT_OP binary_expression
    (143) binary_expression -> . binary_expression LEFT_OP binary_expression
    (144) binary_expression -> . binary_expression < binary_expression
    (145) binary_expression -> . binary_expression LTE binary_expression
    (146) binary_expression -> . binary_expression GTE binary_expression
    (147) binary_expression -> . binary_expression > binary_expression
    (148) binary_expression -> . binary_expression EQ_OP binary_expression
    (149) binary_expression -> . binary_expression NEQ_OP binary_expression
    (150) binary_expression -> . binary_expression & binary_expression
    (151) binary_expression -> . binary_expression | binary_expression
    (152) binary_expression -> . binary_expression ^ binary_expression
    (153) binary_expression -> . binary_expression AND_OP binary_expression
    (154) binary_expression -> . binary_expression OR_OP binary_expression
    (97) postfix_expression -> . primary_expression
    (98) postfix_expression -> . postfix_expression [ expression ]
    (99) postfix_expression -> . postfix_expression ( argument_expression_list )
    (100) postfix_expression -> . postfix_expression ( )
    (101) postfix_expression -> . postfix_expression PTR_OP identifier
    (126) unary_operator -> . &
    (127) unary_operator -> . *
    (128) unary_operator -> . +
    (129) unary_operator -> . -
    (130) unary_operator -> . ~
    (131) unary_operator -> . !
    (155) cast_expression -> . unary_expression
    (102) primary_expression -> . identifier
    (103) primary_expression -> . constant
    (104) primary_expression -> . unified_string_literal
    (105) primary_expression -> . ( expression )
    (38) identifier -> . IDENTIFIER
    (76) constant -> . INTEGER_CONSTANT
    (77) constant -> . CHAR_CONSTANT
    (78) constant -> . FLOAT_CONSTANT
    (79) constant -> . BOOL_CONSTANT
    (134) unified_string_literal -> . STRING_CONSTANT
    (135) unified_string_literal -> . unified_string_literal STRING_CONSTANT

    &               shift and go to state 69
    *               shift and go to state 66
    +               shift and go to state 67
    -               shift and go to state 68
    ~               shift and go to state 73
    !               shift and go to state 74
    (               shift and go to state 71
    IDENTIFIER      shift and go to state 31
    INTEGER_CONSTANT shift and go to state 77
    CHAR_CONSTANT   shift and go to state 78
    FLOAT_CONSTANT  shift and go to state 79
    BOOL_CONSTANT   shift and go to state 80
    STRING_CONSTANT shift and go to state 81

    expression                     shift and go to state 212
    assignment_expression          shift and go to state 120
    conditional_expression         shift and go to state 60
    unary_expression               shift and go to state 61
    binary_expression              shift and go to state 62
    postfix_expression             shift and go to state 63
    unary_operator                 shift and go to state 64
    cast_expression                shift and go to state 65
    primary_expression             shift and go to state 70
    identifier                     shift and go to state 72
    constant                       shift and go to state 75
    unified_string_literal         shift and go to state 76

state 175

    (91) expression -> expression , . assignment_expression
    (60) assignment_expression -> . conditional_expression
    (61) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (75) conditional_expression -> . binary_expression
    (132) unary_expression -> . postfix_expression
    (133) unary_expression -> . unary_operator cast_expression
    (136) binary_expression -> . cast_expression
    (137) binary_expression -> . binary_expression * binary_expression
    (138) binary_expression -> . binary_expression / binary_expression
    (139) binary_expression -> . binary_expression % binary_expression
    (140) binary_expression -> . binary_expression + binary_expression
    (141) binary_expression -> . binary_expression - binary_expression
    (142) binary_expression -> . binary_expression RIGHT_OP binary_expression
    (143) binary_expression -> . binary_expression LEFT_OP binary_expression
    (144) binary_expression -> . binary_expression < binary_expression
    (145) binary_expression -> . binary_expression LTE binary_expression
    (146) binary_expression -> . binary_expression GTE binary_expression
    (147) binary_expression -> . binary_expression > binary_expression
    (148) binary_expression -> . binary_expression EQ_OP binary_expression
    (149) binary_expression -> . binary_expression NEQ_OP binary_expression
    (150) binary_expression -> . binary_expression & binary_expression
    (151) binary_expression -> . binary_expression | binary_expression
    (152) binary_expression -> . binary_expression ^ binary_expression
    (153) binary_expression -> . binary_expression AND_OP binary_expression
    (154) binary_expression -> . binary_expression OR_OP binary_expression
    (97) postfix_expression -> . primary_expression
    (98) postfix_expression -> . postfix_expression [ expression ]
    (99) postfix_expression -> . postfix_expression ( argument_expression_list )
    (100) postfix_expression -> . postfix_expression ( )
    (101) postfix_expression -> . postfix_expression PTR_OP identifier
    (126) unary_operator -> . &
    (127) unary_operator -> . *
    (128) unary_operator -> . +
    (129) unary_operator -> . -
    (130) unary_operator -> . ~
    (131) unary_operator -> . !
    (155) cast_expression -> . unary_expression
    (102) primary_expression -> . identifier
    (103) primary_expression -> . constant
    (104) primary_expression -> . unified_string_literal
    (105) primary_expression -> . ( expression )
    (38) identifier -> . IDENTIFIER
    (76) constant -> . INTEGER_CONSTANT
    (77) constant -> . CHAR_CONSTANT
    (78) constant -> . FLOAT_CONSTANT
    (79) constant -> . BOOL_CONSTANT
    (134) unified_string_literal -> . STRING_CONSTANT
    (135) unified_string_literal -> . unified_string_literal STRING_CONSTANT

    &               shift and go to state 69
    *               shift and go to state 66
    +               shift and go to state 67
    -               shift and go to state 68
    ~               shift and go to state 73
    !               shift and go to state 74
    (               shift and go to state 71
    IDENTIFIER      shift and go to state 31
    INTEGER_CONSTANT shift and go to state 77
    CHAR_CONSTANT   shift and go to state 78
    FLOAT_CONSTANT  shift and go to state 79
    BOOL_CONSTANT   shift and go to state 80
    STRING_CONSTANT shift and go to state 81

    assignment_expression          shift and go to state 213
    conditional_expression         shift and go to state 60
    unary_expression               shift and go to state 61
    binary_expression              shift and go to state 62
    postfix_expression             shift and go to state 63
    unary_operator                 shift and go to state 64
    cast_expression                shift and go to state 65
    primary_expression             shift and go to state 70
    identifier                     shift and go to state 72
    constant                       shift and go to state 75
    unified_string_literal         shift and go to state 76

state 176

    (92) expression_statement -> expression_orempty ; .

    {               reduce using rule 92 (expression_statement -> expression_orempty ; .)
    IF              reduce using rule 92 (expression_statement -> expression_orempty ; .)
    WHILE           reduce using rule 92 (expression_statement -> expression_orempty ; .)
    BREAK           reduce using rule 92 (expression_statement -> expression_orempty ; .)
    CONTINUE        reduce using rule 92 (expression_statement -> expression_orempty ; .)
    RETURN          reduce using rule 92 (expression_statement -> expression_orempty ; .)
    VOID            reduce using rule 92 (expression_statement -> expression_orempty ; .)
    CHAR            reduce using rule 92 (expression_statement -> expression_orempty ; .)
    SHORT           reduce using rule 92 (expression_statement -> expression_orempty ; .)
    INT             reduce using rule 92 (expression_statement -> expression_orempty ; .)
    LONG            reduce using rule 92 (expression_statement -> expression_orempty ; .)
    FLOAT           reduce using rule 92 (expression_statement -> expression_orempty ; .)
    DOUBLE          reduce using rule 92 (expression_statement -> expression_orempty ; .)
    SIGNED          reduce using rule 92 (expression_statement -> expression_orempty ; .)
    UNSIGNED        reduce using rule 92 (expression_statement -> expression_orempty ; .)
    BOOL            reduce using rule 92 (expression_statement -> expression_orempty ; .)
    STRUCT          reduce using rule 92 (expression_statement -> expression_orempty ; .)
    &               reduce using rule 92 (expression_statement -> expression_orempty ; .)
    *               reduce using rule 92 (expression_statement -> expression_orempty ; .)
    +               reduce using rule 92 (expression_statement -> expression_orempty ; .)
    -               reduce using rule 92 (expression_statement -> expression_orempty ; .)
    ~               reduce using rule 92 (expression_statement -> expression_orempty ; .)
    !               reduce using rule 92 (expression_statement -> expression_orempty ; .)
    (               reduce using rule 92 (expression_statement -> expression_orempty ; .)
    IDENTIFIER      reduce using rule 92 (expression_statement -> expression_orempty ; .)
    INTEGER_CONSTANT reduce using rule 92 (expression_statement -> expression_orempty ; .)
    CHAR_CONSTANT   reduce using rule 92 (expression_statement -> expression_orempty ; .)
    FLOAT_CONSTANT  reduce using rule 92 (expression_statement -> expression_orempty ; .)
    BOOL_CONSTANT   reduce using rule 92 (expression_statement -> expression_orempty ; .)
    STRING_CONSTANT reduce using rule 92 (expression_statement -> expression_orempty ; .)
    ;               reduce using rule 92 (expression_statement -> expression_orempty ; .)
    }               reduce using rule 92 (expression_statement -> expression_orempty ; .)
    ELSE            reduce using rule 92 (expression_statement -> expression_orempty ; .)


state 177

    (108) iteration_statement -> WHILE ( . expression ) statement
    (90) expression -> . assignment_expression
    (91) expression -> . expression , assignment_expression
    (60) assignment_expression -> . conditional_expression
    (61) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (75) conditional_expression -> . binary_expression
    (132) unary_expression -> . postfix_expression
    (133) unary_expression -> . unary_operator cast_expression
    (136) binary_expression -> . cast_expression
    (137) binary_expression -> . binary_expression * binary_expression
    (138) binary_expression -> . binary_expression / binary_expression
    (139) binary_expression -> . binary_expression % binary_expression
    (140) binary_expression -> . binary_expression + binary_expression
    (141) binary_expression -> . binary_expression - binary_expression
    (142) binary_expression -> . binary_expression RIGHT_OP binary_expression
    (143) binary_expression -> . binary_expression LEFT_OP binary_expression
    (144) binary_expression -> . binary_expression < binary_expression
    (145) binary_expression -> . binary_expression LTE binary_expression
    (146) binary_expression -> . binary_expression GTE binary_expression
    (147) binary_expression -> . binary_expression > binary_expression
    (148) binary_expression -> . binary_expression EQ_OP binary_expression
    (149) binary_expression -> . binary_expression NEQ_OP binary_expression
    (150) binary_expression -> . binary_expression & binary_expression
    (151) binary_expression -> . binary_expression | binary_expression
    (152) binary_expression -> . binary_expression ^ binary_expression
    (153) binary_expression -> . binary_expression AND_OP binary_expression
    (154) binary_expression -> . binary_expression OR_OP binary_expression
    (97) postfix_expression -> . primary_expression
    (98) postfix_expression -> . postfix_expression [ expression ]
    (99) postfix_expression -> . postfix_expression ( argument_expression_list )
    (100) postfix_expression -> . postfix_expression ( )
    (101) postfix_expression -> . postfix_expression PTR_OP identifier
    (126) unary_operator -> . &
    (127) unary_operator -> . *
    (128) unary_operator -> . +
    (129) unary_operator -> . -
    (130) unary_operator -> . ~
    (131) unary_operator -> . !
    (155) cast_expression -> . unary_expression
    (102) primary_expression -> . identifier
    (103) primary_expression -> . constant
    (104) primary_expression -> . unified_string_literal
    (105) primary_expression -> . ( expression )
    (38) identifier -> . IDENTIFIER
    (76) constant -> . INTEGER_CONSTANT
    (77) constant -> . CHAR_CONSTANT
    (78) constant -> . FLOAT_CONSTANT
    (79) constant -> . BOOL_CONSTANT
    (134) unified_string_literal -> . STRING_CONSTANT
    (135) unified_string_literal -> . unified_string_literal STRING_CONSTANT

    &               shift and go to state 69
    *               shift and go to state 66
    +               shift and go to state 67
    -               shift and go to state 68
    ~               shift and go to state 73
    !               shift and go to state 74
    (               shift and go to state 71
    IDENTIFIER      shift and go to state 31
    INTEGER_CONSTANT shift and go to state 77
    CHAR_CONSTANT   shift and go to state 78
    FLOAT_CONSTANT  shift and go to state 79
    BOOL_CONSTANT   shift and go to state 80
    STRING_CONSTANT shift and go to state 81

    expression                     shift and go to state 214
    assignment_expression          shift and go to state 120
    conditional_expression         shift and go to state 60
    unary_expression               shift and go to state 61
    binary_expression              shift and go to state 62
    postfix_expression             shift and go to state 63
    unary_operator                 shift and go to state 64
    cast_expression                shift and go to state 65
    primary_expression             shift and go to state 70
    identifier                     shift and go to state 72
    constant                       shift and go to state 75
    unified_string_literal         shift and go to state 76

state 178

    (39) jump_statement -> BREAK ; .

    {               reduce using rule 39 (jump_statement -> BREAK ; .)
    IF              reduce using rule 39 (jump_statement -> BREAK ; .)
    WHILE           reduce using rule 39 (jump_statement -> BREAK ; .)
    BREAK           reduce using rule 39 (jump_statement -> BREAK ; .)
    CONTINUE        reduce using rule 39 (jump_statement -> BREAK ; .)
    RETURN          reduce using rule 39 (jump_statement -> BREAK ; .)
    VOID            reduce using rule 39 (jump_statement -> BREAK ; .)
    CHAR            reduce using rule 39 (jump_statement -> BREAK ; .)
    SHORT           reduce using rule 39 (jump_statement -> BREAK ; .)
    INT             reduce using rule 39 (jump_statement -> BREAK ; .)
    LONG            reduce using rule 39 (jump_statement -> BREAK ; .)
    FLOAT           reduce using rule 39 (jump_statement -> BREAK ; .)
    DOUBLE          reduce using rule 39 (jump_statement -> BREAK ; .)
    SIGNED          reduce using rule 39 (jump_statement -> BREAK ; .)
    UNSIGNED        reduce using rule 39 (jump_statement -> BREAK ; .)
    BOOL            reduce using rule 39 (jump_statement -> BREAK ; .)
    STRUCT          reduce using rule 39 (jump_statement -> BREAK ; .)
    &               reduce using rule 39 (jump_statement -> BREAK ; .)
    *               reduce using rule 39 (jump_statement -> BREAK ; .)
    +               reduce using rule 39 (jump_statement -> BREAK ; .)
    -               reduce using rule 39 (jump_statement -> BREAK ; .)
    ~               reduce using rule 39 (jump_statement -> BREAK ; .)
    !               reduce using rule 39 (jump_statement -> BREAK ; .)
    (               reduce using rule 39 (jump_statement -> BREAK ; .)
    IDENTIFIER      reduce using rule 39 (jump_statement -> BREAK ; .)
    INTEGER_CONSTANT reduce using rule 39 (jump_statement -> BREAK ; .)
    CHAR_CONSTANT   reduce using rule 39 (jump_statement -> BREAK ; .)
    FLOAT_CONSTANT  reduce using rule 39 (jump_statement -> BREAK ; .)
    BOOL_CONSTANT   reduce using rule 39 (jump_statement -> BREAK ; .)
    STRING_CONSTANT reduce using rule 39 (jump_statement -> BREAK ; .)
    ;               reduce using rule 39 (jump_statement -> BREAK ; .)
    }               reduce using rule 39 (jump_statement -> BREAK ; .)
    ELSE            reduce using rule 39 (jump_statement -> BREAK ; .)


state 179

    (40) jump_statement -> CONTINUE ; .

    {               reduce using rule 40 (jump_statement -> CONTINUE ; .)
    IF              reduce using rule 40 (jump_statement -> CONTINUE ; .)
    WHILE           reduce using rule 40 (jump_statement -> CONTINUE ; .)
    BREAK           reduce using rule 40 (jump_statement -> CONTINUE ; .)
    CONTINUE        reduce using rule 40 (jump_statement -> CONTINUE ; .)
    RETURN          reduce using rule 40 (jump_statement -> CONTINUE ; .)
    VOID            reduce using rule 40 (jump_statement -> CONTINUE ; .)
    CHAR            reduce using rule 40 (jump_statement -> CONTINUE ; .)
    SHORT           reduce using rule 40 (jump_statement -> CONTINUE ; .)
    INT             reduce using rule 40 (jump_statement -> CONTINUE ; .)
    LONG            reduce using rule 40 (jump_statement -> CONTINUE ; .)
    FLOAT           reduce using rule 40 (jump_statement -> CONTINUE ; .)
    DOUBLE          reduce using rule 40 (jump_statement -> CONTINUE ; .)
    SIGNED          reduce using rule 40 (jump_statement -> CONTINUE ; .)
    UNSIGNED        reduce using rule 40 (jump_statement -> CONTINUE ; .)
    BOOL            reduce using rule 40 (jump_statement -> CONTINUE ; .)
    STRUCT          reduce using rule 40 (jump_statement -> CONTINUE ; .)
    &               reduce using rule 40 (jump_statement -> CONTINUE ; .)
    *               reduce using rule 40 (jump_statement -> CONTINUE ; .)
    +               reduce using rule 40 (jump_statement -> CONTINUE ; .)
    -               reduce using rule 40 (jump_statement -> CONTINUE ; .)
    ~               reduce using rule 40 (jump_statement -> CONTINUE ; .)
    !               reduce using rule 40 (jump_statement -> CONTINUE ; .)
    (               reduce using rule 40 (jump_statement -> CONTINUE ; .)
    IDENTIFIER      reduce using rule 40 (jump_statement -> CONTINUE ; .)
    INTEGER_CONSTANT reduce using rule 40 (jump_statement -> CONTINUE ; .)
    CHAR_CONSTANT   reduce using rule 40 (jump_statement -> CONTINUE ; .)
    FLOAT_CONSTANT  reduce using rule 40 (jump_statement -> CONTINUE ; .)
    BOOL_CONSTANT   reduce using rule 40 (jump_statement -> CONTINUE ; .)
    STRING_CONSTANT reduce using rule 40 (jump_statement -> CONTINUE ; .)
    ;               reduce using rule 40 (jump_statement -> CONTINUE ; .)
    }               reduce using rule 40 (jump_statement -> CONTINUE ; .)
    ELSE            reduce using rule 40 (jump_statement -> CONTINUE ; .)


state 180

    (41) jump_statement -> RETURN ; .

    {               reduce using rule 41 (jump_statement -> RETURN ; .)
    IF              reduce using rule 41 (jump_statement -> RETURN ; .)
    WHILE           reduce using rule 41 (jump_statement -> RETURN ; .)
    BREAK           reduce using rule 41 (jump_statement -> RETURN ; .)
    CONTINUE        reduce using rule 41 (jump_statement -> RETURN ; .)
    RETURN          reduce using rule 41 (jump_statement -> RETURN ; .)
    VOID            reduce using rule 41 (jump_statement -> RETURN ; .)
    CHAR            reduce using rule 41 (jump_statement -> RETURN ; .)
    SHORT           reduce using rule 41 (jump_statement -> RETURN ; .)
    INT             reduce using rule 41 (jump_statement -> RETURN ; .)
    LONG            reduce using rule 41 (jump_statement -> RETURN ; .)
    FLOAT           reduce using rule 41 (jump_statement -> RETURN ; .)
    DOUBLE          reduce using rule 41 (jump_statement -> RETURN ; .)
    SIGNED          reduce using rule 41 (jump_statement -> RETURN ; .)
    UNSIGNED        reduce using rule 41 (jump_statement -> RETURN ; .)
    BOOL            reduce using rule 41 (jump_statement -> RETURN ; .)
    STRUCT          reduce using rule 41 (jump_statement -> RETURN ; .)
    &               reduce using rule 41 (jump_statement -> RETURN ; .)
    *               reduce using rule 41 (jump_statement -> RETURN ; .)
    +               reduce using rule 41 (jump_statement -> RETURN ; .)
    -               reduce using rule 41 (jump_statement -> RETURN ; .)
    ~               reduce using rule 41 (jump_statement -> RETURN ; .)
    !               reduce using rule 41 (jump_statement -> RETURN ; .)
    (               reduce using rule 41 (jump_statement -> RETURN ; .)
    IDENTIFIER      reduce using rule 41 (jump_statement -> RETURN ; .)
    INTEGER_CONSTANT reduce using rule 41 (jump_statement -> RETURN ; .)
    CHAR_CONSTANT   reduce using rule 41 (jump_statement -> RETURN ; .)
    FLOAT_CONSTANT  reduce using rule 41 (jump_statement -> RETURN ; .)
    BOOL_CONSTANT   reduce using rule 41 (jump_statement -> RETURN ; .)
    STRING_CONSTANT reduce using rule 41 (jump_statement -> RETURN ; .)
    ;               reduce using rule 41 (jump_statement -> RETURN ; .)
    }               reduce using rule 41 (jump_statement -> RETURN ; .)
    ELSE            reduce using rule 41 (jump_statement -> RETURN ; .)


state 181

    (42) jump_statement -> RETURN expression . ;
    (91) expression -> expression . , assignment_expression

    ;               shift and go to state 215
    ,               shift and go to state 175


state 182

    (6) initializer -> { initializer_list_orempty } .

    ,               reduce using rule 6 (initializer -> { initializer_list_orempty } .)
    ;               reduce using rule 6 (initializer -> { initializer_list_orempty } .)
    }               reduce using rule 6 (initializer -> { initializer_list_orempty } .)


state 183

    (7) initializer -> { initializer_list , . }
    (9) initializer_list -> initializer_list , . initializer
    (5) initializer -> . assignment_expression
    (6) initializer -> . { initializer_list_orempty }
    (7) initializer -> . { initializer_list , }
    (60) assignment_expression -> . conditional_expression
    (61) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (75) conditional_expression -> . binary_expression
    (132) unary_expression -> . postfix_expression
    (133) unary_expression -> . unary_operator cast_expression
    (136) binary_expression -> . cast_expression
    (137) binary_expression -> . binary_expression * binary_expression
    (138) binary_expression -> . binary_expression / binary_expression
    (139) binary_expression -> . binary_expression % binary_expression
    (140) binary_expression -> . binary_expression + binary_expression
    (141) binary_expression -> . binary_expression - binary_expression
    (142) binary_expression -> . binary_expression RIGHT_OP binary_expression
    (143) binary_expression -> . binary_expression LEFT_OP binary_expression
    (144) binary_expression -> . binary_expression < binary_expression
    (145) binary_expression -> . binary_expression LTE binary_expression
    (146) binary_expression -> . binary_expression GTE binary_expression
    (147) binary_expression -> . binary_expression > binary_expression
    (148) binary_expression -> . binary_expression EQ_OP binary_expression
    (149) binary_expression -> . binary_expression NEQ_OP binary_expression
    (150) binary_expression -> . binary_expression & binary_expression
    (151) binary_expression -> . binary_expression | binary_expression
    (152) binary_expression -> . binary_expression ^ binary_expression
    (153) binary_expression -> . binary_expression AND_OP binary_expression
    (154) binary_expression -> . binary_expression OR_OP binary_expression
    (97) postfix_expression -> . primary_expression
    (98) postfix_expression -> . postfix_expression [ expression ]
    (99) postfix_expression -> . postfix_expression ( argument_expression_list )
    (100) postfix_expression -> . postfix_expression ( )
    (101) postfix_expression -> . postfix_expression PTR_OP identifier
    (126) unary_operator -> . &
    (127) unary_operator -> . *
    (128) unary_operator -> . +
    (129) unary_operator -> . -
    (130) unary_operator -> . ~
    (131) unary_operator -> . !
    (155) cast_expression -> . unary_expression
    (102) primary_expression -> . identifier
    (103) primary_expression -> . constant
    (104) primary_expression -> . unified_string_literal
    (105) primary_expression -> . ( expression )
    (38) identifier -> . IDENTIFIER
    (76) constant -> . INTEGER_CONSTANT
    (77) constant -> . CHAR_CONSTANT
    (78) constant -> . FLOAT_CONSTANT
    (79) constant -> . BOOL_CONSTANT
    (134) unified_string_literal -> . STRING_CONSTANT
    (135) unified_string_literal -> . unified_string_literal STRING_CONSTANT

    }               shift and go to state 216
    {               shift and go to state 59
    &               shift and go to state 69
    *               shift and go to state 66
    +               shift and go to state 67
    -               shift and go to state 68
    ~               shift and go to state 73
    !               shift and go to state 74
    (               shift and go to state 71
    IDENTIFIER      shift and go to state 31
    INTEGER_CONSTANT shift and go to state 77
    CHAR_CONSTANT   shift and go to state 78
    FLOAT_CONSTANT  shift and go to state 79
    BOOL_CONSTANT   shift and go to state 80
    STRING_CONSTANT shift and go to state 81

    initializer                    shift and go to state 217
    assignment_expression          shift and go to state 58
    conditional_expression         shift and go to state 60
    unary_expression               shift and go to state 61
    binary_expression              shift and go to state 62
    postfix_expression             shift and go to state 63
    unary_operator                 shift and go to state 64
    cast_expression                shift and go to state 65
    primary_expression             shift and go to state 70
    identifier                     shift and go to state 72
    constant                       shift and go to state 75
    unified_string_literal         shift and go to state 76

state 184

    (61) assignment_expression -> unary_expression assignment_operator assignment_expression .

    ,               reduce using rule 61 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    ;               reduce using rule 61 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    ]               reduce using rule 61 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    }               reduce using rule 61 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    )               reduce using rule 61 (assignment_expression -> unary_expression assignment_operator assignment_expression .)


state 185

    (137) binary_expression -> binary_expression * binary_expression .
    (137) binary_expression -> binary_expression . * binary_expression
    (138) binary_expression -> binary_expression . / binary_expression
    (139) binary_expression -> binary_expression . % binary_expression
    (140) binary_expression -> binary_expression . + binary_expression
    (141) binary_expression -> binary_expression . - binary_expression
    (142) binary_expression -> binary_expression . RIGHT_OP binary_expression
    (143) binary_expression -> binary_expression . LEFT_OP binary_expression
    (144) binary_expression -> binary_expression . < binary_expression
    (145) binary_expression -> binary_expression . LTE binary_expression
    (146) binary_expression -> binary_expression . GTE binary_expression
    (147) binary_expression -> binary_expression . > binary_expression
    (148) binary_expression -> binary_expression . EQ_OP binary_expression
    (149) binary_expression -> binary_expression . NEQ_OP binary_expression
    (150) binary_expression -> binary_expression . & binary_expression
    (151) binary_expression -> binary_expression . | binary_expression
    (152) binary_expression -> binary_expression . ^ binary_expression
    (153) binary_expression -> binary_expression . AND_OP binary_expression
    (154) binary_expression -> binary_expression . OR_OP binary_expression

  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for % resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for RIGHT_OP resolved as shift
  ! shift/reduce conflict for LEFT_OP resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for EQ_OP resolved as shift
  ! shift/reduce conflict for NEQ_OP resolved as shift
  ! shift/reduce conflict for & resolved as shift
  ! shift/reduce conflict for | resolved as shift
  ! shift/reduce conflict for ^ resolved as shift
  ! shift/reduce conflict for AND_OP resolved as shift
  ! shift/reduce conflict for OR_OP resolved as shift
    ,               reduce using rule 137 (binary_expression -> binary_expression * binary_expression .)
    ;               reduce using rule 137 (binary_expression -> binary_expression * binary_expression .)
    ]               reduce using rule 137 (binary_expression -> binary_expression * binary_expression .)
    }               reduce using rule 137 (binary_expression -> binary_expression * binary_expression .)
    )               reduce using rule 137 (binary_expression -> binary_expression * binary_expression .)
    *               shift and go to state 137
    /               shift and go to state 138
    %               shift and go to state 139
    +               shift and go to state 140
    -               shift and go to state 141
    RIGHT_OP        shift and go to state 142
    LEFT_OP         shift and go to state 143
    <               shift and go to state 144
    LTE             shift and go to state 145
    GTE             shift and go to state 146
    >               shift and go to state 147
    EQ_OP           shift and go to state 148
    NEQ_OP          shift and go to state 149
    &               shift and go to state 150
    |               shift and go to state 151
    ^               shift and go to state 152
    AND_OP          shift and go to state 153
    OR_OP           shift and go to state 154

  ! *               [ reduce using rule 137 (binary_expression -> binary_expression * binary_expression .) ]
  ! /               [ reduce using rule 137 (binary_expression -> binary_expression * binary_expression .) ]
  ! %               [ reduce using rule 137 (binary_expression -> binary_expression * binary_expression .) ]
  ! +               [ reduce using rule 137 (binary_expression -> binary_expression * binary_expression .) ]
  ! -               [ reduce using rule 137 (binary_expression -> binary_expression * binary_expression .) ]
  ! RIGHT_OP        [ reduce using rule 137 (binary_expression -> binary_expression * binary_expression .) ]
  ! LEFT_OP         [ reduce using rule 137 (binary_expression -> binary_expression * binary_expression .) ]
  ! <               [ reduce using rule 137 (binary_expression -> binary_expression * binary_expression .) ]
  ! LTE             [ reduce using rule 137 (binary_expression -> binary_expression * binary_expression .) ]
  ! GTE             [ reduce using rule 137 (binary_expression -> binary_expression * binary_expression .) ]
  ! >               [ reduce using rule 137 (binary_expression -> binary_expression * binary_expression .) ]
  ! EQ_OP           [ reduce using rule 137 (binary_expression -> binary_expression * binary_expression .) ]
  ! NEQ_OP          [ reduce using rule 137 (binary_expression -> binary_expression * binary_expression .) ]
  ! &               [ reduce using rule 137 (binary_expression -> binary_expression * binary_expression .) ]
  ! |               [ reduce using rule 137 (binary_expression -> binary_expression * binary_expression .) ]
  ! ^               [ reduce using rule 137 (binary_expression -> binary_expression * binary_expression .) ]
  ! AND_OP          [ reduce using rule 137 (binary_expression -> binary_expression * binary_expression .) ]
  ! OR_OP           [ reduce using rule 137 (binary_expression -> binary_expression * binary_expression .) ]


state 186

    (138) binary_expression -> binary_expression / binary_expression .
    (137) binary_expression -> binary_expression . * binary_expression
    (138) binary_expression -> binary_expression . / binary_expression
    (139) binary_expression -> binary_expression . % binary_expression
    (140) binary_expression -> binary_expression . + binary_expression
    (141) binary_expression -> binary_expression . - binary_expression
    (142) binary_expression -> binary_expression . RIGHT_OP binary_expression
    (143) binary_expression -> binary_expression . LEFT_OP binary_expression
    (144) binary_expression -> binary_expression . < binary_expression
    (145) binary_expression -> binary_expression . LTE binary_expression
    (146) binary_expression -> binary_expression . GTE binary_expression
    (147) binary_expression -> binary_expression . > binary_expression
    (148) binary_expression -> binary_expression . EQ_OP binary_expression
    (149) binary_expression -> binary_expression . NEQ_OP binary_expression
    (150) binary_expression -> binary_expression . & binary_expression
    (151) binary_expression -> binary_expression . | binary_expression
    (152) binary_expression -> binary_expression . ^ binary_expression
    (153) binary_expression -> binary_expression . AND_OP binary_expression
    (154) binary_expression -> binary_expression . OR_OP binary_expression

  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for % resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for RIGHT_OP resolved as shift
  ! shift/reduce conflict for LEFT_OP resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for EQ_OP resolved as shift
  ! shift/reduce conflict for NEQ_OP resolved as shift
  ! shift/reduce conflict for & resolved as shift
  ! shift/reduce conflict for | resolved as shift
  ! shift/reduce conflict for ^ resolved as shift
  ! shift/reduce conflict for AND_OP resolved as shift
  ! shift/reduce conflict for OR_OP resolved as shift
    ,               reduce using rule 138 (binary_expression -> binary_expression / binary_expression .)
    ;               reduce using rule 138 (binary_expression -> binary_expression / binary_expression .)
    ]               reduce using rule 138 (binary_expression -> binary_expression / binary_expression .)
    }               reduce using rule 138 (binary_expression -> binary_expression / binary_expression .)
    )               reduce using rule 138 (binary_expression -> binary_expression / binary_expression .)
    *               shift and go to state 137
    /               shift and go to state 138
    %               shift and go to state 139
    +               shift and go to state 140
    -               shift and go to state 141
    RIGHT_OP        shift and go to state 142
    LEFT_OP         shift and go to state 143
    <               shift and go to state 144
    LTE             shift and go to state 145
    GTE             shift and go to state 146
    >               shift and go to state 147
    EQ_OP           shift and go to state 148
    NEQ_OP          shift and go to state 149
    &               shift and go to state 150
    |               shift and go to state 151
    ^               shift and go to state 152
    AND_OP          shift and go to state 153
    OR_OP           shift and go to state 154

  ! *               [ reduce using rule 138 (binary_expression -> binary_expression / binary_expression .) ]
  ! /               [ reduce using rule 138 (binary_expression -> binary_expression / binary_expression .) ]
  ! %               [ reduce using rule 138 (binary_expression -> binary_expression / binary_expression .) ]
  ! +               [ reduce using rule 138 (binary_expression -> binary_expression / binary_expression .) ]
  ! -               [ reduce using rule 138 (binary_expression -> binary_expression / binary_expression .) ]
  ! RIGHT_OP        [ reduce using rule 138 (binary_expression -> binary_expression / binary_expression .) ]
  ! LEFT_OP         [ reduce using rule 138 (binary_expression -> binary_expression / binary_expression .) ]
  ! <               [ reduce using rule 138 (binary_expression -> binary_expression / binary_expression .) ]
  ! LTE             [ reduce using rule 138 (binary_expression -> binary_expression / binary_expression .) ]
  ! GTE             [ reduce using rule 138 (binary_expression -> binary_expression / binary_expression .) ]
  ! >               [ reduce using rule 138 (binary_expression -> binary_expression / binary_expression .) ]
  ! EQ_OP           [ reduce using rule 138 (binary_expression -> binary_expression / binary_expression .) ]
  ! NEQ_OP          [ reduce using rule 138 (binary_expression -> binary_expression / binary_expression .) ]
  ! &               [ reduce using rule 138 (binary_expression -> binary_expression / binary_expression .) ]
  ! |               [ reduce using rule 138 (binary_expression -> binary_expression / binary_expression .) ]
  ! ^               [ reduce using rule 138 (binary_expression -> binary_expression / binary_expression .) ]
  ! AND_OP          [ reduce using rule 138 (binary_expression -> binary_expression / binary_expression .) ]
  ! OR_OP           [ reduce using rule 138 (binary_expression -> binary_expression / binary_expression .) ]


state 187

    (139) binary_expression -> binary_expression % binary_expression .
    (137) binary_expression -> binary_expression . * binary_expression
    (138) binary_expression -> binary_expression . / binary_expression
    (139) binary_expression -> binary_expression . % binary_expression
    (140) binary_expression -> binary_expression . + binary_expression
    (141) binary_expression -> binary_expression . - binary_expression
    (142) binary_expression -> binary_expression . RIGHT_OP binary_expression
    (143) binary_expression -> binary_expression . LEFT_OP binary_expression
    (144) binary_expression -> binary_expression . < binary_expression
    (145) binary_expression -> binary_expression . LTE binary_expression
    (146) binary_expression -> binary_expression . GTE binary_expression
    (147) binary_expression -> binary_expression . > binary_expression
    (148) binary_expression -> binary_expression . EQ_OP binary_expression
    (149) binary_expression -> binary_expression . NEQ_OP binary_expression
    (150) binary_expression -> binary_expression . & binary_expression
    (151) binary_expression -> binary_expression . | binary_expression
    (152) binary_expression -> binary_expression . ^ binary_expression
    (153) binary_expression -> binary_expression . AND_OP binary_expression
    (154) binary_expression -> binary_expression . OR_OP binary_expression

  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for % resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for RIGHT_OP resolved as shift
  ! shift/reduce conflict for LEFT_OP resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for EQ_OP resolved as shift
  ! shift/reduce conflict for NEQ_OP resolved as shift
  ! shift/reduce conflict for & resolved as shift
  ! shift/reduce conflict for | resolved as shift
  ! shift/reduce conflict for ^ resolved as shift
  ! shift/reduce conflict for AND_OP resolved as shift
  ! shift/reduce conflict for OR_OP resolved as shift
    ,               reduce using rule 139 (binary_expression -> binary_expression % binary_expression .)
    ;               reduce using rule 139 (binary_expression -> binary_expression % binary_expression .)
    ]               reduce using rule 139 (binary_expression -> binary_expression % binary_expression .)
    }               reduce using rule 139 (binary_expression -> binary_expression % binary_expression .)
    )               reduce using rule 139 (binary_expression -> binary_expression % binary_expression .)
    *               shift and go to state 137
    /               shift and go to state 138
    %               shift and go to state 139
    +               shift and go to state 140
    -               shift and go to state 141
    RIGHT_OP        shift and go to state 142
    LEFT_OP         shift and go to state 143
    <               shift and go to state 144
    LTE             shift and go to state 145
    GTE             shift and go to state 146
    >               shift and go to state 147
    EQ_OP           shift and go to state 148
    NEQ_OP          shift and go to state 149
    &               shift and go to state 150
    |               shift and go to state 151
    ^               shift and go to state 152
    AND_OP          shift and go to state 153
    OR_OP           shift and go to state 154

  ! *               [ reduce using rule 139 (binary_expression -> binary_expression % binary_expression .) ]
  ! /               [ reduce using rule 139 (binary_expression -> binary_expression % binary_expression .) ]
  ! %               [ reduce using rule 139 (binary_expression -> binary_expression % binary_expression .) ]
  ! +               [ reduce using rule 139 (binary_expression -> binary_expression % binary_expression .) ]
  ! -               [ reduce using rule 139 (binary_expression -> binary_expression % binary_expression .) ]
  ! RIGHT_OP        [ reduce using rule 139 (binary_expression -> binary_expression % binary_expression .) ]
  ! LEFT_OP         [ reduce using rule 139 (binary_expression -> binary_expression % binary_expression .) ]
  ! <               [ reduce using rule 139 (binary_expression -> binary_expression % binary_expression .) ]
  ! LTE             [ reduce using rule 139 (binary_expression -> binary_expression % binary_expression .) ]
  ! GTE             [ reduce using rule 139 (binary_expression -> binary_expression % binary_expression .) ]
  ! >               [ reduce using rule 139 (binary_expression -> binary_expression % binary_expression .) ]
  ! EQ_OP           [ reduce using rule 139 (binary_expression -> binary_expression % binary_expression .) ]
  ! NEQ_OP          [ reduce using rule 139 (binary_expression -> binary_expression % binary_expression .) ]
  ! &               [ reduce using rule 139 (binary_expression -> binary_expression % binary_expression .) ]
  ! |               [ reduce using rule 139 (binary_expression -> binary_expression % binary_expression .) ]
  ! ^               [ reduce using rule 139 (binary_expression -> binary_expression % binary_expression .) ]
  ! AND_OP          [ reduce using rule 139 (binary_expression -> binary_expression % binary_expression .) ]
  ! OR_OP           [ reduce using rule 139 (binary_expression -> binary_expression % binary_expression .) ]


state 188

    (140) binary_expression -> binary_expression + binary_expression .
    (137) binary_expression -> binary_expression . * binary_expression
    (138) binary_expression -> binary_expression . / binary_expression
    (139) binary_expression -> binary_expression . % binary_expression
    (140) binary_expression -> binary_expression . + binary_expression
    (141) binary_expression -> binary_expression . - binary_expression
    (142) binary_expression -> binary_expression . RIGHT_OP binary_expression
    (143) binary_expression -> binary_expression . LEFT_OP binary_expression
    (144) binary_expression -> binary_expression . < binary_expression
    (145) binary_expression -> binary_expression . LTE binary_expression
    (146) binary_expression -> binary_expression . GTE binary_expression
    (147) binary_expression -> binary_expression . > binary_expression
    (148) binary_expression -> binary_expression . EQ_OP binary_expression
    (149) binary_expression -> binary_expression . NEQ_OP binary_expression
    (150) binary_expression -> binary_expression . & binary_expression
    (151) binary_expression -> binary_expression . | binary_expression
    (152) binary_expression -> binary_expression . ^ binary_expression
    (153) binary_expression -> binary_expression . AND_OP binary_expression
    (154) binary_expression -> binary_expression . OR_OP binary_expression

  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for % resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for RIGHT_OP resolved as shift
  ! shift/reduce conflict for LEFT_OP resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for EQ_OP resolved as shift
  ! shift/reduce conflict for NEQ_OP resolved as shift
  ! shift/reduce conflict for & resolved as shift
  ! shift/reduce conflict for | resolved as shift
  ! shift/reduce conflict for ^ resolved as shift
  ! shift/reduce conflict for AND_OP resolved as shift
  ! shift/reduce conflict for OR_OP resolved as shift
    ,               reduce using rule 140 (binary_expression -> binary_expression + binary_expression .)
    ;               reduce using rule 140 (binary_expression -> binary_expression + binary_expression .)
    ]               reduce using rule 140 (binary_expression -> binary_expression + binary_expression .)
    }               reduce using rule 140 (binary_expression -> binary_expression + binary_expression .)
    )               reduce using rule 140 (binary_expression -> binary_expression + binary_expression .)
    *               shift and go to state 137
    /               shift and go to state 138
    %               shift and go to state 139
    +               shift and go to state 140
    -               shift and go to state 141
    RIGHT_OP        shift and go to state 142
    LEFT_OP         shift and go to state 143
    <               shift and go to state 144
    LTE             shift and go to state 145
    GTE             shift and go to state 146
    >               shift and go to state 147
    EQ_OP           shift and go to state 148
    NEQ_OP          shift and go to state 149
    &               shift and go to state 150
    |               shift and go to state 151
    ^               shift and go to state 152
    AND_OP          shift and go to state 153
    OR_OP           shift and go to state 154

  ! *               [ reduce using rule 140 (binary_expression -> binary_expression + binary_expression .) ]
  ! /               [ reduce using rule 140 (binary_expression -> binary_expression + binary_expression .) ]
  ! %               [ reduce using rule 140 (binary_expression -> binary_expression + binary_expression .) ]
  ! +               [ reduce using rule 140 (binary_expression -> binary_expression + binary_expression .) ]
  ! -               [ reduce using rule 140 (binary_expression -> binary_expression + binary_expression .) ]
  ! RIGHT_OP        [ reduce using rule 140 (binary_expression -> binary_expression + binary_expression .) ]
  ! LEFT_OP         [ reduce using rule 140 (binary_expression -> binary_expression + binary_expression .) ]
  ! <               [ reduce using rule 140 (binary_expression -> binary_expression + binary_expression .) ]
  ! LTE             [ reduce using rule 140 (binary_expression -> binary_expression + binary_expression .) ]
  ! GTE             [ reduce using rule 140 (binary_expression -> binary_expression + binary_expression .) ]
  ! >               [ reduce using rule 140 (binary_expression -> binary_expression + binary_expression .) ]
  ! EQ_OP           [ reduce using rule 140 (binary_expression -> binary_expression + binary_expression .) ]
  ! NEQ_OP          [ reduce using rule 140 (binary_expression -> binary_expression + binary_expression .) ]
  ! &               [ reduce using rule 140 (binary_expression -> binary_expression + binary_expression .) ]
  ! |               [ reduce using rule 140 (binary_expression -> binary_expression + binary_expression .) ]
  ! ^               [ reduce using rule 140 (binary_expression -> binary_expression + binary_expression .) ]
  ! AND_OP          [ reduce using rule 140 (binary_expression -> binary_expression + binary_expression .) ]
  ! OR_OP           [ reduce using rule 140 (binary_expression -> binary_expression + binary_expression .) ]


state 189

    (141) binary_expression -> binary_expression - binary_expression .
    (137) binary_expression -> binary_expression . * binary_expression
    (138) binary_expression -> binary_expression . / binary_expression
    (139) binary_expression -> binary_expression . % binary_expression
    (140) binary_expression -> binary_expression . + binary_expression
    (141) binary_expression -> binary_expression . - binary_expression
    (142) binary_expression -> binary_expression . RIGHT_OP binary_expression
    (143) binary_expression -> binary_expression . LEFT_OP binary_expression
    (144) binary_expression -> binary_expression . < binary_expression
    (145) binary_expression -> binary_expression . LTE binary_expression
    (146) binary_expression -> binary_expression . GTE binary_expression
    (147) binary_expression -> binary_expression . > binary_expression
    (148) binary_expression -> binary_expression . EQ_OP binary_expression
    (149) binary_expression -> binary_expression . NEQ_OP binary_expression
    (150) binary_expression -> binary_expression . & binary_expression
    (151) binary_expression -> binary_expression . | binary_expression
    (152) binary_expression -> binary_expression . ^ binary_expression
    (153) binary_expression -> binary_expression . AND_OP binary_expression
    (154) binary_expression -> binary_expression . OR_OP binary_expression

  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for % resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for RIGHT_OP resolved as shift
  ! shift/reduce conflict for LEFT_OP resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for EQ_OP resolved as shift
  ! shift/reduce conflict for NEQ_OP resolved as shift
  ! shift/reduce conflict for & resolved as shift
  ! shift/reduce conflict for | resolved as shift
  ! shift/reduce conflict for ^ resolved as shift
  ! shift/reduce conflict for AND_OP resolved as shift
  ! shift/reduce conflict for OR_OP resolved as shift
    ,               reduce using rule 141 (binary_expression -> binary_expression - binary_expression .)
    ;               reduce using rule 141 (binary_expression -> binary_expression - binary_expression .)
    ]               reduce using rule 141 (binary_expression -> binary_expression - binary_expression .)
    }               reduce using rule 141 (binary_expression -> binary_expression - binary_expression .)
    )               reduce using rule 141 (binary_expression -> binary_expression - binary_expression .)
    *               shift and go to state 137
    /               shift and go to state 138
    %               shift and go to state 139
    +               shift and go to state 140
    -               shift and go to state 141
    RIGHT_OP        shift and go to state 142
    LEFT_OP         shift and go to state 143
    <               shift and go to state 144
    LTE             shift and go to state 145
    GTE             shift and go to state 146
    >               shift and go to state 147
    EQ_OP           shift and go to state 148
    NEQ_OP          shift and go to state 149
    &               shift and go to state 150
    |               shift and go to state 151
    ^               shift and go to state 152
    AND_OP          shift and go to state 153
    OR_OP           shift and go to state 154

  ! *               [ reduce using rule 141 (binary_expression -> binary_expression - binary_expression .) ]
  ! /               [ reduce using rule 141 (binary_expression -> binary_expression - binary_expression .) ]
  ! %               [ reduce using rule 141 (binary_expression -> binary_expression - binary_expression .) ]
  ! +               [ reduce using rule 141 (binary_expression -> binary_expression - binary_expression .) ]
  ! -               [ reduce using rule 141 (binary_expression -> binary_expression - binary_expression .) ]
  ! RIGHT_OP        [ reduce using rule 141 (binary_expression -> binary_expression - binary_expression .) ]
  ! LEFT_OP         [ reduce using rule 141 (binary_expression -> binary_expression - binary_expression .) ]
  ! <               [ reduce using rule 141 (binary_expression -> binary_expression - binary_expression .) ]
  ! LTE             [ reduce using rule 141 (binary_expression -> binary_expression - binary_expression .) ]
  ! GTE             [ reduce using rule 141 (binary_expression -> binary_expression - binary_expression .) ]
  ! >               [ reduce using rule 141 (binary_expression -> binary_expression - binary_expression .) ]
  ! EQ_OP           [ reduce using rule 141 (binary_expression -> binary_expression - binary_expression .) ]
  ! NEQ_OP          [ reduce using rule 141 (binary_expression -> binary_expression - binary_expression .) ]
  ! &               [ reduce using rule 141 (binary_expression -> binary_expression - binary_expression .) ]
  ! |               [ reduce using rule 141 (binary_expression -> binary_expression - binary_expression .) ]
  ! ^               [ reduce using rule 141 (binary_expression -> binary_expression - binary_expression .) ]
  ! AND_OP          [ reduce using rule 141 (binary_expression -> binary_expression - binary_expression .) ]
  ! OR_OP           [ reduce using rule 141 (binary_expression -> binary_expression - binary_expression .) ]


state 190

    (142) binary_expression -> binary_expression RIGHT_OP binary_expression .
    (137) binary_expression -> binary_expression . * binary_expression
    (138) binary_expression -> binary_expression . / binary_expression
    (139) binary_expression -> binary_expression . % binary_expression
    (140) binary_expression -> binary_expression . + binary_expression
    (141) binary_expression -> binary_expression . - binary_expression
    (142) binary_expression -> binary_expression . RIGHT_OP binary_expression
    (143) binary_expression -> binary_expression . LEFT_OP binary_expression
    (144) binary_expression -> binary_expression . < binary_expression
    (145) binary_expression -> binary_expression . LTE binary_expression
    (146) binary_expression -> binary_expression . GTE binary_expression
    (147) binary_expression -> binary_expression . > binary_expression
    (148) binary_expression -> binary_expression . EQ_OP binary_expression
    (149) binary_expression -> binary_expression . NEQ_OP binary_expression
    (150) binary_expression -> binary_expression . & binary_expression
    (151) binary_expression -> binary_expression . | binary_expression
    (152) binary_expression -> binary_expression . ^ binary_expression
    (153) binary_expression -> binary_expression . AND_OP binary_expression
    (154) binary_expression -> binary_expression . OR_OP binary_expression

  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for % resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for RIGHT_OP resolved as shift
  ! shift/reduce conflict for LEFT_OP resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for EQ_OP resolved as shift
  ! shift/reduce conflict for NEQ_OP resolved as shift
  ! shift/reduce conflict for & resolved as shift
  ! shift/reduce conflict for | resolved as shift
  ! shift/reduce conflict for ^ resolved as shift
  ! shift/reduce conflict for AND_OP resolved as shift
  ! shift/reduce conflict for OR_OP resolved as shift
    ,               reduce using rule 142 (binary_expression -> binary_expression RIGHT_OP binary_expression .)
    ;               reduce using rule 142 (binary_expression -> binary_expression RIGHT_OP binary_expression .)
    ]               reduce using rule 142 (binary_expression -> binary_expression RIGHT_OP binary_expression .)
    }               reduce using rule 142 (binary_expression -> binary_expression RIGHT_OP binary_expression .)
    )               reduce using rule 142 (binary_expression -> binary_expression RIGHT_OP binary_expression .)
    *               shift and go to state 137
    /               shift and go to state 138
    %               shift and go to state 139
    +               shift and go to state 140
    -               shift and go to state 141
    RIGHT_OP        shift and go to state 142
    LEFT_OP         shift and go to state 143
    <               shift and go to state 144
    LTE             shift and go to state 145
    GTE             shift and go to state 146
    >               shift and go to state 147
    EQ_OP           shift and go to state 148
    NEQ_OP          shift and go to state 149
    &               shift and go to state 150
    |               shift and go to state 151
    ^               shift and go to state 152
    AND_OP          shift and go to state 153
    OR_OP           shift and go to state 154

  ! *               [ reduce using rule 142 (binary_expression -> binary_expression RIGHT_OP binary_expression .) ]
  ! /               [ reduce using rule 142 (binary_expression -> binary_expression RIGHT_OP binary_expression .) ]
  ! %               [ reduce using rule 142 (binary_expression -> binary_expression RIGHT_OP binary_expression .) ]
  ! +               [ reduce using rule 142 (binary_expression -> binary_expression RIGHT_OP binary_expression .) ]
  ! -               [ reduce using rule 142 (binary_expression -> binary_expression RIGHT_OP binary_expression .) ]
  ! RIGHT_OP        [ reduce using rule 142 (binary_expression -> binary_expression RIGHT_OP binary_expression .) ]
  ! LEFT_OP         [ reduce using rule 142 (binary_expression -> binary_expression RIGHT_OP binary_expression .) ]
  ! <               [ reduce using rule 142 (binary_expression -> binary_expression RIGHT_OP binary_expression .) ]
  ! LTE             [ reduce using rule 142 (binary_expression -> binary_expression RIGHT_OP binary_expression .) ]
  ! GTE             [ reduce using rule 142 (binary_expression -> binary_expression RIGHT_OP binary_expression .) ]
  ! >               [ reduce using rule 142 (binary_expression -> binary_expression RIGHT_OP binary_expression .) ]
  ! EQ_OP           [ reduce using rule 142 (binary_expression -> binary_expression RIGHT_OP binary_expression .) ]
  ! NEQ_OP          [ reduce using rule 142 (binary_expression -> binary_expression RIGHT_OP binary_expression .) ]
  ! &               [ reduce using rule 142 (binary_expression -> binary_expression RIGHT_OP binary_expression .) ]
  ! |               [ reduce using rule 142 (binary_expression -> binary_expression RIGHT_OP binary_expression .) ]
  ! ^               [ reduce using rule 142 (binary_expression -> binary_expression RIGHT_OP binary_expression .) ]
  ! AND_OP          [ reduce using rule 142 (binary_expression -> binary_expression RIGHT_OP binary_expression .) ]
  ! OR_OP           [ reduce using rule 142 (binary_expression -> binary_expression RIGHT_OP binary_expression .) ]


state 191

    (143) binary_expression -> binary_expression LEFT_OP binary_expression .
    (137) binary_expression -> binary_expression . * binary_expression
    (138) binary_expression -> binary_expression . / binary_expression
    (139) binary_expression -> binary_expression . % binary_expression
    (140) binary_expression -> binary_expression . + binary_expression
    (141) binary_expression -> binary_expression . - binary_expression
    (142) binary_expression -> binary_expression . RIGHT_OP binary_expression
    (143) binary_expression -> binary_expression . LEFT_OP binary_expression
    (144) binary_expression -> binary_expression . < binary_expression
    (145) binary_expression -> binary_expression . LTE binary_expression
    (146) binary_expression -> binary_expression . GTE binary_expression
    (147) binary_expression -> binary_expression . > binary_expression
    (148) binary_expression -> binary_expression . EQ_OP binary_expression
    (149) binary_expression -> binary_expression . NEQ_OP binary_expression
    (150) binary_expression -> binary_expression . & binary_expression
    (151) binary_expression -> binary_expression . | binary_expression
    (152) binary_expression -> binary_expression . ^ binary_expression
    (153) binary_expression -> binary_expression . AND_OP binary_expression
    (154) binary_expression -> binary_expression . OR_OP binary_expression

  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for % resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for RIGHT_OP resolved as shift
  ! shift/reduce conflict for LEFT_OP resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for EQ_OP resolved as shift
  ! shift/reduce conflict for NEQ_OP resolved as shift
  ! shift/reduce conflict for & resolved as shift
  ! shift/reduce conflict for | resolved as shift
  ! shift/reduce conflict for ^ resolved as shift
  ! shift/reduce conflict for AND_OP resolved as shift
  ! shift/reduce conflict for OR_OP resolved as shift
    ,               reduce using rule 143 (binary_expression -> binary_expression LEFT_OP binary_expression .)
    ;               reduce using rule 143 (binary_expression -> binary_expression LEFT_OP binary_expression .)
    ]               reduce using rule 143 (binary_expression -> binary_expression LEFT_OP binary_expression .)
    }               reduce using rule 143 (binary_expression -> binary_expression LEFT_OP binary_expression .)
    )               reduce using rule 143 (binary_expression -> binary_expression LEFT_OP binary_expression .)
    *               shift and go to state 137
    /               shift and go to state 138
    %               shift and go to state 139
    +               shift and go to state 140
    -               shift and go to state 141
    RIGHT_OP        shift and go to state 142
    LEFT_OP         shift and go to state 143
    <               shift and go to state 144
    LTE             shift and go to state 145
    GTE             shift and go to state 146
    >               shift and go to state 147
    EQ_OP           shift and go to state 148
    NEQ_OP          shift and go to state 149
    &               shift and go to state 150
    |               shift and go to state 151
    ^               shift and go to state 152
    AND_OP          shift and go to state 153
    OR_OP           shift and go to state 154

  ! *               [ reduce using rule 143 (binary_expression -> binary_expression LEFT_OP binary_expression .) ]
  ! /               [ reduce using rule 143 (binary_expression -> binary_expression LEFT_OP binary_expression .) ]
  ! %               [ reduce using rule 143 (binary_expression -> binary_expression LEFT_OP binary_expression .) ]
  ! +               [ reduce using rule 143 (binary_expression -> binary_expression LEFT_OP binary_expression .) ]
  ! -               [ reduce using rule 143 (binary_expression -> binary_expression LEFT_OP binary_expression .) ]
  ! RIGHT_OP        [ reduce using rule 143 (binary_expression -> binary_expression LEFT_OP binary_expression .) ]
  ! LEFT_OP         [ reduce using rule 143 (binary_expression -> binary_expression LEFT_OP binary_expression .) ]
  ! <               [ reduce using rule 143 (binary_expression -> binary_expression LEFT_OP binary_expression .) ]
  ! LTE             [ reduce using rule 143 (binary_expression -> binary_expression LEFT_OP binary_expression .) ]
  ! GTE             [ reduce using rule 143 (binary_expression -> binary_expression LEFT_OP binary_expression .) ]
  ! >               [ reduce using rule 143 (binary_expression -> binary_expression LEFT_OP binary_expression .) ]
  ! EQ_OP           [ reduce using rule 143 (binary_expression -> binary_expression LEFT_OP binary_expression .) ]
  ! NEQ_OP          [ reduce using rule 143 (binary_expression -> binary_expression LEFT_OP binary_expression .) ]
  ! &               [ reduce using rule 143 (binary_expression -> binary_expression LEFT_OP binary_expression .) ]
  ! |               [ reduce using rule 143 (binary_expression -> binary_expression LEFT_OP binary_expression .) ]
  ! ^               [ reduce using rule 143 (binary_expression -> binary_expression LEFT_OP binary_expression .) ]
  ! AND_OP          [ reduce using rule 143 (binary_expression -> binary_expression LEFT_OP binary_expression .) ]
  ! OR_OP           [ reduce using rule 143 (binary_expression -> binary_expression LEFT_OP binary_expression .) ]


state 192

    (144) binary_expression -> binary_expression < binary_expression .
    (137) binary_expression -> binary_expression . * binary_expression
    (138) binary_expression -> binary_expression . / binary_expression
    (139) binary_expression -> binary_expression . % binary_expression
    (140) binary_expression -> binary_expression . + binary_expression
    (141) binary_expression -> binary_expression . - binary_expression
    (142) binary_expression -> binary_expression . RIGHT_OP binary_expression
    (143) binary_expression -> binary_expression . LEFT_OP binary_expression
    (144) binary_expression -> binary_expression . < binary_expression
    (145) binary_expression -> binary_expression . LTE binary_expression
    (146) binary_expression -> binary_expression . GTE binary_expression
    (147) binary_expression -> binary_expression . > binary_expression
    (148) binary_expression -> binary_expression . EQ_OP binary_expression
    (149) binary_expression -> binary_expression . NEQ_OP binary_expression
    (150) binary_expression -> binary_expression . & binary_expression
    (151) binary_expression -> binary_expression . | binary_expression
    (152) binary_expression -> binary_expression . ^ binary_expression
    (153) binary_expression -> binary_expression . AND_OP binary_expression
    (154) binary_expression -> binary_expression . OR_OP binary_expression

  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for % resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for RIGHT_OP resolved as shift
  ! shift/reduce conflict for LEFT_OP resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for EQ_OP resolved as shift
  ! shift/reduce conflict for NEQ_OP resolved as shift
  ! shift/reduce conflict for & resolved as shift
  ! shift/reduce conflict for | resolved as shift
  ! shift/reduce conflict for ^ resolved as shift
  ! shift/reduce conflict for AND_OP resolved as shift
  ! shift/reduce conflict for OR_OP resolved as shift
    ,               reduce using rule 144 (binary_expression -> binary_expression < binary_expression .)
    ;               reduce using rule 144 (binary_expression -> binary_expression < binary_expression .)
    ]               reduce using rule 144 (binary_expression -> binary_expression < binary_expression .)
    }               reduce using rule 144 (binary_expression -> binary_expression < binary_expression .)
    )               reduce using rule 144 (binary_expression -> binary_expression < binary_expression .)
    *               shift and go to state 137
    /               shift and go to state 138
    %               shift and go to state 139
    +               shift and go to state 140
    -               shift and go to state 141
    RIGHT_OP        shift and go to state 142
    LEFT_OP         shift and go to state 143
    <               shift and go to state 144
    LTE             shift and go to state 145
    GTE             shift and go to state 146
    >               shift and go to state 147
    EQ_OP           shift and go to state 148
    NEQ_OP          shift and go to state 149
    &               shift and go to state 150
    |               shift and go to state 151
    ^               shift and go to state 152
    AND_OP          shift and go to state 153
    OR_OP           shift and go to state 154

  ! *               [ reduce using rule 144 (binary_expression -> binary_expression < binary_expression .) ]
  ! /               [ reduce using rule 144 (binary_expression -> binary_expression < binary_expression .) ]
  ! %               [ reduce using rule 144 (binary_expression -> binary_expression < binary_expression .) ]
  ! +               [ reduce using rule 144 (binary_expression -> binary_expression < binary_expression .) ]
  ! -               [ reduce using rule 144 (binary_expression -> binary_expression < binary_expression .) ]
  ! RIGHT_OP        [ reduce using rule 144 (binary_expression -> binary_expression < binary_expression .) ]
  ! LEFT_OP         [ reduce using rule 144 (binary_expression -> binary_expression < binary_expression .) ]
  ! <               [ reduce using rule 144 (binary_expression -> binary_expression < binary_expression .) ]
  ! LTE             [ reduce using rule 144 (binary_expression -> binary_expression < binary_expression .) ]
  ! GTE             [ reduce using rule 144 (binary_expression -> binary_expression < binary_expression .) ]
  ! >               [ reduce using rule 144 (binary_expression -> binary_expression < binary_expression .) ]
  ! EQ_OP           [ reduce using rule 144 (binary_expression -> binary_expression < binary_expression .) ]
  ! NEQ_OP          [ reduce using rule 144 (binary_expression -> binary_expression < binary_expression .) ]
  ! &               [ reduce using rule 144 (binary_expression -> binary_expression < binary_expression .) ]
  ! |               [ reduce using rule 144 (binary_expression -> binary_expression < binary_expression .) ]
  ! ^               [ reduce using rule 144 (binary_expression -> binary_expression < binary_expression .) ]
  ! AND_OP          [ reduce using rule 144 (binary_expression -> binary_expression < binary_expression .) ]
  ! OR_OP           [ reduce using rule 144 (binary_expression -> binary_expression < binary_expression .) ]


state 193

    (145) binary_expression -> binary_expression LTE binary_expression .
    (137) binary_expression -> binary_expression . * binary_expression
    (138) binary_expression -> binary_expression . / binary_expression
    (139) binary_expression -> binary_expression . % binary_expression
    (140) binary_expression -> binary_expression . + binary_expression
    (141) binary_expression -> binary_expression . - binary_expression
    (142) binary_expression -> binary_expression . RIGHT_OP binary_expression
    (143) binary_expression -> binary_expression . LEFT_OP binary_expression
    (144) binary_expression -> binary_expression . < binary_expression
    (145) binary_expression -> binary_expression . LTE binary_expression
    (146) binary_expression -> binary_expression . GTE binary_expression
    (147) binary_expression -> binary_expression . > binary_expression
    (148) binary_expression -> binary_expression . EQ_OP binary_expression
    (149) binary_expression -> binary_expression . NEQ_OP binary_expression
    (150) binary_expression -> binary_expression . & binary_expression
    (151) binary_expression -> binary_expression . | binary_expression
    (152) binary_expression -> binary_expression . ^ binary_expression
    (153) binary_expression -> binary_expression . AND_OP binary_expression
    (154) binary_expression -> binary_expression . OR_OP binary_expression

  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for % resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for RIGHT_OP resolved as shift
  ! shift/reduce conflict for LEFT_OP resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for EQ_OP resolved as shift
  ! shift/reduce conflict for NEQ_OP resolved as shift
  ! shift/reduce conflict for & resolved as shift
  ! shift/reduce conflict for | resolved as shift
  ! shift/reduce conflict for ^ resolved as shift
  ! shift/reduce conflict for AND_OP resolved as shift
  ! shift/reduce conflict for OR_OP resolved as shift
    ,               reduce using rule 145 (binary_expression -> binary_expression LTE binary_expression .)
    ;               reduce using rule 145 (binary_expression -> binary_expression LTE binary_expression .)
    ]               reduce using rule 145 (binary_expression -> binary_expression LTE binary_expression .)
    }               reduce using rule 145 (binary_expression -> binary_expression LTE binary_expression .)
    )               reduce using rule 145 (binary_expression -> binary_expression LTE binary_expression .)
    *               shift and go to state 137
    /               shift and go to state 138
    %               shift and go to state 139
    +               shift and go to state 140
    -               shift and go to state 141
    RIGHT_OP        shift and go to state 142
    LEFT_OP         shift and go to state 143
    <               shift and go to state 144
    LTE             shift and go to state 145
    GTE             shift and go to state 146
    >               shift and go to state 147
    EQ_OP           shift and go to state 148
    NEQ_OP          shift and go to state 149
    &               shift and go to state 150
    |               shift and go to state 151
    ^               shift and go to state 152
    AND_OP          shift and go to state 153
    OR_OP           shift and go to state 154

  ! *               [ reduce using rule 145 (binary_expression -> binary_expression LTE binary_expression .) ]
  ! /               [ reduce using rule 145 (binary_expression -> binary_expression LTE binary_expression .) ]
  ! %               [ reduce using rule 145 (binary_expression -> binary_expression LTE binary_expression .) ]
  ! +               [ reduce using rule 145 (binary_expression -> binary_expression LTE binary_expression .) ]
  ! -               [ reduce using rule 145 (binary_expression -> binary_expression LTE binary_expression .) ]
  ! RIGHT_OP        [ reduce using rule 145 (binary_expression -> binary_expression LTE binary_expression .) ]
  ! LEFT_OP         [ reduce using rule 145 (binary_expression -> binary_expression LTE binary_expression .) ]
  ! <               [ reduce using rule 145 (binary_expression -> binary_expression LTE binary_expression .) ]
  ! LTE             [ reduce using rule 145 (binary_expression -> binary_expression LTE binary_expression .) ]
  ! GTE             [ reduce using rule 145 (binary_expression -> binary_expression LTE binary_expression .) ]
  ! >               [ reduce using rule 145 (binary_expression -> binary_expression LTE binary_expression .) ]
  ! EQ_OP           [ reduce using rule 145 (binary_expression -> binary_expression LTE binary_expression .) ]
  ! NEQ_OP          [ reduce using rule 145 (binary_expression -> binary_expression LTE binary_expression .) ]
  ! &               [ reduce using rule 145 (binary_expression -> binary_expression LTE binary_expression .) ]
  ! |               [ reduce using rule 145 (binary_expression -> binary_expression LTE binary_expression .) ]
  ! ^               [ reduce using rule 145 (binary_expression -> binary_expression LTE binary_expression .) ]
  ! AND_OP          [ reduce using rule 145 (binary_expression -> binary_expression LTE binary_expression .) ]
  ! OR_OP           [ reduce using rule 145 (binary_expression -> binary_expression LTE binary_expression .) ]


state 194

    (146) binary_expression -> binary_expression GTE binary_expression .
    (137) binary_expression -> binary_expression . * binary_expression
    (138) binary_expression -> binary_expression . / binary_expression
    (139) binary_expression -> binary_expression . % binary_expression
    (140) binary_expression -> binary_expression . + binary_expression
    (141) binary_expression -> binary_expression . - binary_expression
    (142) binary_expression -> binary_expression . RIGHT_OP binary_expression
    (143) binary_expression -> binary_expression . LEFT_OP binary_expression
    (144) binary_expression -> binary_expression . < binary_expression
    (145) binary_expression -> binary_expression . LTE binary_expression
    (146) binary_expression -> binary_expression . GTE binary_expression
    (147) binary_expression -> binary_expression . > binary_expression
    (148) binary_expression -> binary_expression . EQ_OP binary_expression
    (149) binary_expression -> binary_expression . NEQ_OP binary_expression
    (150) binary_expression -> binary_expression . & binary_expression
    (151) binary_expression -> binary_expression . | binary_expression
    (152) binary_expression -> binary_expression . ^ binary_expression
    (153) binary_expression -> binary_expression . AND_OP binary_expression
    (154) binary_expression -> binary_expression . OR_OP binary_expression

  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for % resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for RIGHT_OP resolved as shift
  ! shift/reduce conflict for LEFT_OP resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for EQ_OP resolved as shift
  ! shift/reduce conflict for NEQ_OP resolved as shift
  ! shift/reduce conflict for & resolved as shift
  ! shift/reduce conflict for | resolved as shift
  ! shift/reduce conflict for ^ resolved as shift
  ! shift/reduce conflict for AND_OP resolved as shift
  ! shift/reduce conflict for OR_OP resolved as shift
    ,               reduce using rule 146 (binary_expression -> binary_expression GTE binary_expression .)
    ;               reduce using rule 146 (binary_expression -> binary_expression GTE binary_expression .)
    ]               reduce using rule 146 (binary_expression -> binary_expression GTE binary_expression .)
    }               reduce using rule 146 (binary_expression -> binary_expression GTE binary_expression .)
    )               reduce using rule 146 (binary_expression -> binary_expression GTE binary_expression .)
    *               shift and go to state 137
    /               shift and go to state 138
    %               shift and go to state 139
    +               shift and go to state 140
    -               shift and go to state 141
    RIGHT_OP        shift and go to state 142
    LEFT_OP         shift and go to state 143
    <               shift and go to state 144
    LTE             shift and go to state 145
    GTE             shift and go to state 146
    >               shift and go to state 147
    EQ_OP           shift and go to state 148
    NEQ_OP          shift and go to state 149
    &               shift and go to state 150
    |               shift and go to state 151
    ^               shift and go to state 152
    AND_OP          shift and go to state 153
    OR_OP           shift and go to state 154

  ! *               [ reduce using rule 146 (binary_expression -> binary_expression GTE binary_expression .) ]
  ! /               [ reduce using rule 146 (binary_expression -> binary_expression GTE binary_expression .) ]
  ! %               [ reduce using rule 146 (binary_expression -> binary_expression GTE binary_expression .) ]
  ! +               [ reduce using rule 146 (binary_expression -> binary_expression GTE binary_expression .) ]
  ! -               [ reduce using rule 146 (binary_expression -> binary_expression GTE binary_expression .) ]
  ! RIGHT_OP        [ reduce using rule 146 (binary_expression -> binary_expression GTE binary_expression .) ]
  ! LEFT_OP         [ reduce using rule 146 (binary_expression -> binary_expression GTE binary_expression .) ]
  ! <               [ reduce using rule 146 (binary_expression -> binary_expression GTE binary_expression .) ]
  ! LTE             [ reduce using rule 146 (binary_expression -> binary_expression GTE binary_expression .) ]
  ! GTE             [ reduce using rule 146 (binary_expression -> binary_expression GTE binary_expression .) ]
  ! >               [ reduce using rule 146 (binary_expression -> binary_expression GTE binary_expression .) ]
  ! EQ_OP           [ reduce using rule 146 (binary_expression -> binary_expression GTE binary_expression .) ]
  ! NEQ_OP          [ reduce using rule 146 (binary_expression -> binary_expression GTE binary_expression .) ]
  ! &               [ reduce using rule 146 (binary_expression -> binary_expression GTE binary_expression .) ]
  ! |               [ reduce using rule 146 (binary_expression -> binary_expression GTE binary_expression .) ]
  ! ^               [ reduce using rule 146 (binary_expression -> binary_expression GTE binary_expression .) ]
  ! AND_OP          [ reduce using rule 146 (binary_expression -> binary_expression GTE binary_expression .) ]
  ! OR_OP           [ reduce using rule 146 (binary_expression -> binary_expression GTE binary_expression .) ]


state 195

    (147) binary_expression -> binary_expression > binary_expression .
    (137) binary_expression -> binary_expression . * binary_expression
    (138) binary_expression -> binary_expression . / binary_expression
    (139) binary_expression -> binary_expression . % binary_expression
    (140) binary_expression -> binary_expression . + binary_expression
    (141) binary_expression -> binary_expression . - binary_expression
    (142) binary_expression -> binary_expression . RIGHT_OP binary_expression
    (143) binary_expression -> binary_expression . LEFT_OP binary_expression
    (144) binary_expression -> binary_expression . < binary_expression
    (145) binary_expression -> binary_expression . LTE binary_expression
    (146) binary_expression -> binary_expression . GTE binary_expression
    (147) binary_expression -> binary_expression . > binary_expression
    (148) binary_expression -> binary_expression . EQ_OP binary_expression
    (149) binary_expression -> binary_expression . NEQ_OP binary_expression
    (150) binary_expression -> binary_expression . & binary_expression
    (151) binary_expression -> binary_expression . | binary_expression
    (152) binary_expression -> binary_expression . ^ binary_expression
    (153) binary_expression -> binary_expression . AND_OP binary_expression
    (154) binary_expression -> binary_expression . OR_OP binary_expression

  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for % resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for RIGHT_OP resolved as shift
  ! shift/reduce conflict for LEFT_OP resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for EQ_OP resolved as shift
  ! shift/reduce conflict for NEQ_OP resolved as shift
  ! shift/reduce conflict for & resolved as shift
  ! shift/reduce conflict for | resolved as shift
  ! shift/reduce conflict for ^ resolved as shift
  ! shift/reduce conflict for AND_OP resolved as shift
  ! shift/reduce conflict for OR_OP resolved as shift
    ,               reduce using rule 147 (binary_expression -> binary_expression > binary_expression .)
    ;               reduce using rule 147 (binary_expression -> binary_expression > binary_expression .)
    ]               reduce using rule 147 (binary_expression -> binary_expression > binary_expression .)
    }               reduce using rule 147 (binary_expression -> binary_expression > binary_expression .)
    )               reduce using rule 147 (binary_expression -> binary_expression > binary_expression .)
    *               shift and go to state 137
    /               shift and go to state 138
    %               shift and go to state 139
    +               shift and go to state 140
    -               shift and go to state 141
    RIGHT_OP        shift and go to state 142
    LEFT_OP         shift and go to state 143
    <               shift and go to state 144
    LTE             shift and go to state 145
    GTE             shift and go to state 146
    >               shift and go to state 147
    EQ_OP           shift and go to state 148
    NEQ_OP          shift and go to state 149
    &               shift and go to state 150
    |               shift and go to state 151
    ^               shift and go to state 152
    AND_OP          shift and go to state 153
    OR_OP           shift and go to state 154

  ! *               [ reduce using rule 147 (binary_expression -> binary_expression > binary_expression .) ]
  ! /               [ reduce using rule 147 (binary_expression -> binary_expression > binary_expression .) ]
  ! %               [ reduce using rule 147 (binary_expression -> binary_expression > binary_expression .) ]
  ! +               [ reduce using rule 147 (binary_expression -> binary_expression > binary_expression .) ]
  ! -               [ reduce using rule 147 (binary_expression -> binary_expression > binary_expression .) ]
  ! RIGHT_OP        [ reduce using rule 147 (binary_expression -> binary_expression > binary_expression .) ]
  ! LEFT_OP         [ reduce using rule 147 (binary_expression -> binary_expression > binary_expression .) ]
  ! <               [ reduce using rule 147 (binary_expression -> binary_expression > binary_expression .) ]
  ! LTE             [ reduce using rule 147 (binary_expression -> binary_expression > binary_expression .) ]
  ! GTE             [ reduce using rule 147 (binary_expression -> binary_expression > binary_expression .) ]
  ! >               [ reduce using rule 147 (binary_expression -> binary_expression > binary_expression .) ]
  ! EQ_OP           [ reduce using rule 147 (binary_expression -> binary_expression > binary_expression .) ]
  ! NEQ_OP          [ reduce using rule 147 (binary_expression -> binary_expression > binary_expression .) ]
  ! &               [ reduce using rule 147 (binary_expression -> binary_expression > binary_expression .) ]
  ! |               [ reduce using rule 147 (binary_expression -> binary_expression > binary_expression .) ]
  ! ^               [ reduce using rule 147 (binary_expression -> binary_expression > binary_expression .) ]
  ! AND_OP          [ reduce using rule 147 (binary_expression -> binary_expression > binary_expression .) ]
  ! OR_OP           [ reduce using rule 147 (binary_expression -> binary_expression > binary_expression .) ]


state 196

    (148) binary_expression -> binary_expression EQ_OP binary_expression .
    (137) binary_expression -> binary_expression . * binary_expression
    (138) binary_expression -> binary_expression . / binary_expression
    (139) binary_expression -> binary_expression . % binary_expression
    (140) binary_expression -> binary_expression . + binary_expression
    (141) binary_expression -> binary_expression . - binary_expression
    (142) binary_expression -> binary_expression . RIGHT_OP binary_expression
    (143) binary_expression -> binary_expression . LEFT_OP binary_expression
    (144) binary_expression -> binary_expression . < binary_expression
    (145) binary_expression -> binary_expression . LTE binary_expression
    (146) binary_expression -> binary_expression . GTE binary_expression
    (147) binary_expression -> binary_expression . > binary_expression
    (148) binary_expression -> binary_expression . EQ_OP binary_expression
    (149) binary_expression -> binary_expression . NEQ_OP binary_expression
    (150) binary_expression -> binary_expression . & binary_expression
    (151) binary_expression -> binary_expression . | binary_expression
    (152) binary_expression -> binary_expression . ^ binary_expression
    (153) binary_expression -> binary_expression . AND_OP binary_expression
    (154) binary_expression -> binary_expression . OR_OP binary_expression

  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for % resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for RIGHT_OP resolved as shift
  ! shift/reduce conflict for LEFT_OP resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for EQ_OP resolved as shift
  ! shift/reduce conflict for NEQ_OP resolved as shift
  ! shift/reduce conflict for & resolved as shift
  ! shift/reduce conflict for | resolved as shift
  ! shift/reduce conflict for ^ resolved as shift
  ! shift/reduce conflict for AND_OP resolved as shift
  ! shift/reduce conflict for OR_OP resolved as shift
    ,               reduce using rule 148 (binary_expression -> binary_expression EQ_OP binary_expression .)
    ;               reduce using rule 148 (binary_expression -> binary_expression EQ_OP binary_expression .)
    ]               reduce using rule 148 (binary_expression -> binary_expression EQ_OP binary_expression .)
    }               reduce using rule 148 (binary_expression -> binary_expression EQ_OP binary_expression .)
    )               reduce using rule 148 (binary_expression -> binary_expression EQ_OP binary_expression .)
    *               shift and go to state 137
    /               shift and go to state 138
    %               shift and go to state 139
    +               shift and go to state 140
    -               shift and go to state 141
    RIGHT_OP        shift and go to state 142
    LEFT_OP         shift and go to state 143
    <               shift and go to state 144
    LTE             shift and go to state 145
    GTE             shift and go to state 146
    >               shift and go to state 147
    EQ_OP           shift and go to state 148
    NEQ_OP          shift and go to state 149
    &               shift and go to state 150
    |               shift and go to state 151
    ^               shift and go to state 152
    AND_OP          shift and go to state 153
    OR_OP           shift and go to state 154

  ! *               [ reduce using rule 148 (binary_expression -> binary_expression EQ_OP binary_expression .) ]
  ! /               [ reduce using rule 148 (binary_expression -> binary_expression EQ_OP binary_expression .) ]
  ! %               [ reduce using rule 148 (binary_expression -> binary_expression EQ_OP binary_expression .) ]
  ! +               [ reduce using rule 148 (binary_expression -> binary_expression EQ_OP binary_expression .) ]
  ! -               [ reduce using rule 148 (binary_expression -> binary_expression EQ_OP binary_expression .) ]
  ! RIGHT_OP        [ reduce using rule 148 (binary_expression -> binary_expression EQ_OP binary_expression .) ]
  ! LEFT_OP         [ reduce using rule 148 (binary_expression -> binary_expression EQ_OP binary_expression .) ]
  ! <               [ reduce using rule 148 (binary_expression -> binary_expression EQ_OP binary_expression .) ]
  ! LTE             [ reduce using rule 148 (binary_expression -> binary_expression EQ_OP binary_expression .) ]
  ! GTE             [ reduce using rule 148 (binary_expression -> binary_expression EQ_OP binary_expression .) ]
  ! >               [ reduce using rule 148 (binary_expression -> binary_expression EQ_OP binary_expression .) ]
  ! EQ_OP           [ reduce using rule 148 (binary_expression -> binary_expression EQ_OP binary_expression .) ]
  ! NEQ_OP          [ reduce using rule 148 (binary_expression -> binary_expression EQ_OP binary_expression .) ]
  ! &               [ reduce using rule 148 (binary_expression -> binary_expression EQ_OP binary_expression .) ]
  ! |               [ reduce using rule 148 (binary_expression -> binary_expression EQ_OP binary_expression .) ]
  ! ^               [ reduce using rule 148 (binary_expression -> binary_expression EQ_OP binary_expression .) ]
  ! AND_OP          [ reduce using rule 148 (binary_expression -> binary_expression EQ_OP binary_expression .) ]
  ! OR_OP           [ reduce using rule 148 (binary_expression -> binary_expression EQ_OP binary_expression .) ]


state 197

    (149) binary_expression -> binary_expression NEQ_OP binary_expression .
    (137) binary_expression -> binary_expression . * binary_expression
    (138) binary_expression -> binary_expression . / binary_expression
    (139) binary_expression -> binary_expression . % binary_expression
    (140) binary_expression -> binary_expression . + binary_expression
    (141) binary_expression -> binary_expression . - binary_expression
    (142) binary_expression -> binary_expression . RIGHT_OP binary_expression
    (143) binary_expression -> binary_expression . LEFT_OP binary_expression
    (144) binary_expression -> binary_expression . < binary_expression
    (145) binary_expression -> binary_expression . LTE binary_expression
    (146) binary_expression -> binary_expression . GTE binary_expression
    (147) binary_expression -> binary_expression . > binary_expression
    (148) binary_expression -> binary_expression . EQ_OP binary_expression
    (149) binary_expression -> binary_expression . NEQ_OP binary_expression
    (150) binary_expression -> binary_expression . & binary_expression
    (151) binary_expression -> binary_expression . | binary_expression
    (152) binary_expression -> binary_expression . ^ binary_expression
    (153) binary_expression -> binary_expression . AND_OP binary_expression
    (154) binary_expression -> binary_expression . OR_OP binary_expression

  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for % resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for RIGHT_OP resolved as shift
  ! shift/reduce conflict for LEFT_OP resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for EQ_OP resolved as shift
  ! shift/reduce conflict for NEQ_OP resolved as shift
  ! shift/reduce conflict for & resolved as shift
  ! shift/reduce conflict for | resolved as shift
  ! shift/reduce conflict for ^ resolved as shift
  ! shift/reduce conflict for AND_OP resolved as shift
  ! shift/reduce conflict for OR_OP resolved as shift
    ,               reduce using rule 149 (binary_expression -> binary_expression NEQ_OP binary_expression .)
    ;               reduce using rule 149 (binary_expression -> binary_expression NEQ_OP binary_expression .)
    ]               reduce using rule 149 (binary_expression -> binary_expression NEQ_OP binary_expression .)
    }               reduce using rule 149 (binary_expression -> binary_expression NEQ_OP binary_expression .)
    )               reduce using rule 149 (binary_expression -> binary_expression NEQ_OP binary_expression .)
    *               shift and go to state 137
    /               shift and go to state 138
    %               shift and go to state 139
    +               shift and go to state 140
    -               shift and go to state 141
    RIGHT_OP        shift and go to state 142
    LEFT_OP         shift and go to state 143
    <               shift and go to state 144
    LTE             shift and go to state 145
    GTE             shift and go to state 146
    >               shift and go to state 147
    EQ_OP           shift and go to state 148
    NEQ_OP          shift and go to state 149
    &               shift and go to state 150
    |               shift and go to state 151
    ^               shift and go to state 152
    AND_OP          shift and go to state 153
    OR_OP           shift and go to state 154

  ! *               [ reduce using rule 149 (binary_expression -> binary_expression NEQ_OP binary_expression .) ]
  ! /               [ reduce using rule 149 (binary_expression -> binary_expression NEQ_OP binary_expression .) ]
  ! %               [ reduce using rule 149 (binary_expression -> binary_expression NEQ_OP binary_expression .) ]
  ! +               [ reduce using rule 149 (binary_expression -> binary_expression NEQ_OP binary_expression .) ]
  ! -               [ reduce using rule 149 (binary_expression -> binary_expression NEQ_OP binary_expression .) ]
  ! RIGHT_OP        [ reduce using rule 149 (binary_expression -> binary_expression NEQ_OP binary_expression .) ]
  ! LEFT_OP         [ reduce using rule 149 (binary_expression -> binary_expression NEQ_OP binary_expression .) ]
  ! <               [ reduce using rule 149 (binary_expression -> binary_expression NEQ_OP binary_expression .) ]
  ! LTE             [ reduce using rule 149 (binary_expression -> binary_expression NEQ_OP binary_expression .) ]
  ! GTE             [ reduce using rule 149 (binary_expression -> binary_expression NEQ_OP binary_expression .) ]
  ! >               [ reduce using rule 149 (binary_expression -> binary_expression NEQ_OP binary_expression .) ]
  ! EQ_OP           [ reduce using rule 149 (binary_expression -> binary_expression NEQ_OP binary_expression .) ]
  ! NEQ_OP          [ reduce using rule 149 (binary_expression -> binary_expression NEQ_OP binary_expression .) ]
  ! &               [ reduce using rule 149 (binary_expression -> binary_expression NEQ_OP binary_expression .) ]
  ! |               [ reduce using rule 149 (binary_expression -> binary_expression NEQ_OP binary_expression .) ]
  ! ^               [ reduce using rule 149 (binary_expression -> binary_expression NEQ_OP binary_expression .) ]
  ! AND_OP          [ reduce using rule 149 (binary_expression -> binary_expression NEQ_OP binary_expression .) ]
  ! OR_OP           [ reduce using rule 149 (binary_expression -> binary_expression NEQ_OP binary_expression .) ]


state 198

    (150) binary_expression -> binary_expression & binary_expression .
    (137) binary_expression -> binary_expression . * binary_expression
    (138) binary_expression -> binary_expression . / binary_expression
    (139) binary_expression -> binary_expression . % binary_expression
    (140) binary_expression -> binary_expression . + binary_expression
    (141) binary_expression -> binary_expression . - binary_expression
    (142) binary_expression -> binary_expression . RIGHT_OP binary_expression
    (143) binary_expression -> binary_expression . LEFT_OP binary_expression
    (144) binary_expression -> binary_expression . < binary_expression
    (145) binary_expression -> binary_expression . LTE binary_expression
    (146) binary_expression -> binary_expression . GTE binary_expression
    (147) binary_expression -> binary_expression . > binary_expression
    (148) binary_expression -> binary_expression . EQ_OP binary_expression
    (149) binary_expression -> binary_expression . NEQ_OP binary_expression
    (150) binary_expression -> binary_expression . & binary_expression
    (151) binary_expression -> binary_expression . | binary_expression
    (152) binary_expression -> binary_expression . ^ binary_expression
    (153) binary_expression -> binary_expression . AND_OP binary_expression
    (154) binary_expression -> binary_expression . OR_OP binary_expression

  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for % resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for RIGHT_OP resolved as shift
  ! shift/reduce conflict for LEFT_OP resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for EQ_OP resolved as shift
  ! shift/reduce conflict for NEQ_OP resolved as shift
  ! shift/reduce conflict for & resolved as shift
  ! shift/reduce conflict for | resolved as shift
  ! shift/reduce conflict for ^ resolved as shift
  ! shift/reduce conflict for AND_OP resolved as shift
  ! shift/reduce conflict for OR_OP resolved as shift
    ,               reduce using rule 150 (binary_expression -> binary_expression & binary_expression .)
    ;               reduce using rule 150 (binary_expression -> binary_expression & binary_expression .)
    ]               reduce using rule 150 (binary_expression -> binary_expression & binary_expression .)
    }               reduce using rule 150 (binary_expression -> binary_expression & binary_expression .)
    )               reduce using rule 150 (binary_expression -> binary_expression & binary_expression .)
    *               shift and go to state 137
    /               shift and go to state 138
    %               shift and go to state 139
    +               shift and go to state 140
    -               shift and go to state 141
    RIGHT_OP        shift and go to state 142
    LEFT_OP         shift and go to state 143
    <               shift and go to state 144
    LTE             shift and go to state 145
    GTE             shift and go to state 146
    >               shift and go to state 147
    EQ_OP           shift and go to state 148
    NEQ_OP          shift and go to state 149
    &               shift and go to state 150
    |               shift and go to state 151
    ^               shift and go to state 152
    AND_OP          shift and go to state 153
    OR_OP           shift and go to state 154

  ! *               [ reduce using rule 150 (binary_expression -> binary_expression & binary_expression .) ]
  ! /               [ reduce using rule 150 (binary_expression -> binary_expression & binary_expression .) ]
  ! %               [ reduce using rule 150 (binary_expression -> binary_expression & binary_expression .) ]
  ! +               [ reduce using rule 150 (binary_expression -> binary_expression & binary_expression .) ]
  ! -               [ reduce using rule 150 (binary_expression -> binary_expression & binary_expression .) ]
  ! RIGHT_OP        [ reduce using rule 150 (binary_expression -> binary_expression & binary_expression .) ]
  ! LEFT_OP         [ reduce using rule 150 (binary_expression -> binary_expression & binary_expression .) ]
  ! <               [ reduce using rule 150 (binary_expression -> binary_expression & binary_expression .) ]
  ! LTE             [ reduce using rule 150 (binary_expression -> binary_expression & binary_expression .) ]
  ! GTE             [ reduce using rule 150 (binary_expression -> binary_expression & binary_expression .) ]
  ! >               [ reduce using rule 150 (binary_expression -> binary_expression & binary_expression .) ]
  ! EQ_OP           [ reduce using rule 150 (binary_expression -> binary_expression & binary_expression .) ]
  ! NEQ_OP          [ reduce using rule 150 (binary_expression -> binary_expression & binary_expression .) ]
  ! &               [ reduce using rule 150 (binary_expression -> binary_expression & binary_expression .) ]
  ! |               [ reduce using rule 150 (binary_expression -> binary_expression & binary_expression .) ]
  ! ^               [ reduce using rule 150 (binary_expression -> binary_expression & binary_expression .) ]
  ! AND_OP          [ reduce using rule 150 (binary_expression -> binary_expression & binary_expression .) ]
  ! OR_OP           [ reduce using rule 150 (binary_expression -> binary_expression & binary_expression .) ]


state 199

    (151) binary_expression -> binary_expression | binary_expression .
    (137) binary_expression -> binary_expression . * binary_expression
    (138) binary_expression -> binary_expression . / binary_expression
    (139) binary_expression -> binary_expression . % binary_expression
    (140) binary_expression -> binary_expression . + binary_expression
    (141) binary_expression -> binary_expression . - binary_expression
    (142) binary_expression -> binary_expression . RIGHT_OP binary_expression
    (143) binary_expression -> binary_expression . LEFT_OP binary_expression
    (144) binary_expression -> binary_expression . < binary_expression
    (145) binary_expression -> binary_expression . LTE binary_expression
    (146) binary_expression -> binary_expression . GTE binary_expression
    (147) binary_expression -> binary_expression . > binary_expression
    (148) binary_expression -> binary_expression . EQ_OP binary_expression
    (149) binary_expression -> binary_expression . NEQ_OP binary_expression
    (150) binary_expression -> binary_expression . & binary_expression
    (151) binary_expression -> binary_expression . | binary_expression
    (152) binary_expression -> binary_expression . ^ binary_expression
    (153) binary_expression -> binary_expression . AND_OP binary_expression
    (154) binary_expression -> binary_expression . OR_OP binary_expression

  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for % resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for RIGHT_OP resolved as shift
  ! shift/reduce conflict for LEFT_OP resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for EQ_OP resolved as shift
  ! shift/reduce conflict for NEQ_OP resolved as shift
  ! shift/reduce conflict for & resolved as shift
  ! shift/reduce conflict for | resolved as shift
  ! shift/reduce conflict for ^ resolved as shift
  ! shift/reduce conflict for AND_OP resolved as shift
  ! shift/reduce conflict for OR_OP resolved as shift
    ,               reduce using rule 151 (binary_expression -> binary_expression | binary_expression .)
    ;               reduce using rule 151 (binary_expression -> binary_expression | binary_expression .)
    ]               reduce using rule 151 (binary_expression -> binary_expression | binary_expression .)
    }               reduce using rule 151 (binary_expression -> binary_expression | binary_expression .)
    )               reduce using rule 151 (binary_expression -> binary_expression | binary_expression .)
    *               shift and go to state 137
    /               shift and go to state 138
    %               shift and go to state 139
    +               shift and go to state 140
    -               shift and go to state 141
    RIGHT_OP        shift and go to state 142
    LEFT_OP         shift and go to state 143
    <               shift and go to state 144
    LTE             shift and go to state 145
    GTE             shift and go to state 146
    >               shift and go to state 147
    EQ_OP           shift and go to state 148
    NEQ_OP          shift and go to state 149
    &               shift and go to state 150
    |               shift and go to state 151
    ^               shift and go to state 152
    AND_OP          shift and go to state 153
    OR_OP           shift and go to state 154

  ! *               [ reduce using rule 151 (binary_expression -> binary_expression | binary_expression .) ]
  ! /               [ reduce using rule 151 (binary_expression -> binary_expression | binary_expression .) ]
  ! %               [ reduce using rule 151 (binary_expression -> binary_expression | binary_expression .) ]
  ! +               [ reduce using rule 151 (binary_expression -> binary_expression | binary_expression .) ]
  ! -               [ reduce using rule 151 (binary_expression -> binary_expression | binary_expression .) ]
  ! RIGHT_OP        [ reduce using rule 151 (binary_expression -> binary_expression | binary_expression .) ]
  ! LEFT_OP         [ reduce using rule 151 (binary_expression -> binary_expression | binary_expression .) ]
  ! <               [ reduce using rule 151 (binary_expression -> binary_expression | binary_expression .) ]
  ! LTE             [ reduce using rule 151 (binary_expression -> binary_expression | binary_expression .) ]
  ! GTE             [ reduce using rule 151 (binary_expression -> binary_expression | binary_expression .) ]
  ! >               [ reduce using rule 151 (binary_expression -> binary_expression | binary_expression .) ]
  ! EQ_OP           [ reduce using rule 151 (binary_expression -> binary_expression | binary_expression .) ]
  ! NEQ_OP          [ reduce using rule 151 (binary_expression -> binary_expression | binary_expression .) ]
  ! &               [ reduce using rule 151 (binary_expression -> binary_expression | binary_expression .) ]
  ! |               [ reduce using rule 151 (binary_expression -> binary_expression | binary_expression .) ]
  ! ^               [ reduce using rule 151 (binary_expression -> binary_expression | binary_expression .) ]
  ! AND_OP          [ reduce using rule 151 (binary_expression -> binary_expression | binary_expression .) ]
  ! OR_OP           [ reduce using rule 151 (binary_expression -> binary_expression | binary_expression .) ]


state 200

    (152) binary_expression -> binary_expression ^ binary_expression .
    (137) binary_expression -> binary_expression . * binary_expression
    (138) binary_expression -> binary_expression . / binary_expression
    (139) binary_expression -> binary_expression . % binary_expression
    (140) binary_expression -> binary_expression . + binary_expression
    (141) binary_expression -> binary_expression . - binary_expression
    (142) binary_expression -> binary_expression . RIGHT_OP binary_expression
    (143) binary_expression -> binary_expression . LEFT_OP binary_expression
    (144) binary_expression -> binary_expression . < binary_expression
    (145) binary_expression -> binary_expression . LTE binary_expression
    (146) binary_expression -> binary_expression . GTE binary_expression
    (147) binary_expression -> binary_expression . > binary_expression
    (148) binary_expression -> binary_expression . EQ_OP binary_expression
    (149) binary_expression -> binary_expression . NEQ_OP binary_expression
    (150) binary_expression -> binary_expression . & binary_expression
    (151) binary_expression -> binary_expression . | binary_expression
    (152) binary_expression -> binary_expression . ^ binary_expression
    (153) binary_expression -> binary_expression . AND_OP binary_expression
    (154) binary_expression -> binary_expression . OR_OP binary_expression

  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for % resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for RIGHT_OP resolved as shift
  ! shift/reduce conflict for LEFT_OP resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for EQ_OP resolved as shift
  ! shift/reduce conflict for NEQ_OP resolved as shift
  ! shift/reduce conflict for & resolved as shift
  ! shift/reduce conflict for | resolved as shift
  ! shift/reduce conflict for ^ resolved as shift
  ! shift/reduce conflict for AND_OP resolved as shift
  ! shift/reduce conflict for OR_OP resolved as shift
    ,               reduce using rule 152 (binary_expression -> binary_expression ^ binary_expression .)
    ;               reduce using rule 152 (binary_expression -> binary_expression ^ binary_expression .)
    ]               reduce using rule 152 (binary_expression -> binary_expression ^ binary_expression .)
    }               reduce using rule 152 (binary_expression -> binary_expression ^ binary_expression .)
    )               reduce using rule 152 (binary_expression -> binary_expression ^ binary_expression .)
    *               shift and go to state 137
    /               shift and go to state 138
    %               shift and go to state 139
    +               shift and go to state 140
    -               shift and go to state 141
    RIGHT_OP        shift and go to state 142
    LEFT_OP         shift and go to state 143
    <               shift and go to state 144
    LTE             shift and go to state 145
    GTE             shift and go to state 146
    >               shift and go to state 147
    EQ_OP           shift and go to state 148
    NEQ_OP          shift and go to state 149
    &               shift and go to state 150
    |               shift and go to state 151
    ^               shift and go to state 152
    AND_OP          shift and go to state 153
    OR_OP           shift and go to state 154

  ! *               [ reduce using rule 152 (binary_expression -> binary_expression ^ binary_expression .) ]
  ! /               [ reduce using rule 152 (binary_expression -> binary_expression ^ binary_expression .) ]
  ! %               [ reduce using rule 152 (binary_expression -> binary_expression ^ binary_expression .) ]
  ! +               [ reduce using rule 152 (binary_expression -> binary_expression ^ binary_expression .) ]
  ! -               [ reduce using rule 152 (binary_expression -> binary_expression ^ binary_expression .) ]
  ! RIGHT_OP        [ reduce using rule 152 (binary_expression -> binary_expression ^ binary_expression .) ]
  ! LEFT_OP         [ reduce using rule 152 (binary_expression -> binary_expression ^ binary_expression .) ]
  ! <               [ reduce using rule 152 (binary_expression -> binary_expression ^ binary_expression .) ]
  ! LTE             [ reduce using rule 152 (binary_expression -> binary_expression ^ binary_expression .) ]
  ! GTE             [ reduce using rule 152 (binary_expression -> binary_expression ^ binary_expression .) ]
  ! >               [ reduce using rule 152 (binary_expression -> binary_expression ^ binary_expression .) ]
  ! EQ_OP           [ reduce using rule 152 (binary_expression -> binary_expression ^ binary_expression .) ]
  ! NEQ_OP          [ reduce using rule 152 (binary_expression -> binary_expression ^ binary_expression .) ]
  ! &               [ reduce using rule 152 (binary_expression -> binary_expression ^ binary_expression .) ]
  ! |               [ reduce using rule 152 (binary_expression -> binary_expression ^ binary_expression .) ]
  ! ^               [ reduce using rule 152 (binary_expression -> binary_expression ^ binary_expression .) ]
  ! AND_OP          [ reduce using rule 152 (binary_expression -> binary_expression ^ binary_expression .) ]
  ! OR_OP           [ reduce using rule 152 (binary_expression -> binary_expression ^ binary_expression .) ]


state 201

    (153) binary_expression -> binary_expression AND_OP binary_expression .
    (137) binary_expression -> binary_expression . * binary_expression
    (138) binary_expression -> binary_expression . / binary_expression
    (139) binary_expression -> binary_expression . % binary_expression
    (140) binary_expression -> binary_expression . + binary_expression
    (141) binary_expression -> binary_expression . - binary_expression
    (142) binary_expression -> binary_expression . RIGHT_OP binary_expression
    (143) binary_expression -> binary_expression . LEFT_OP binary_expression
    (144) binary_expression -> binary_expression . < binary_expression
    (145) binary_expression -> binary_expression . LTE binary_expression
    (146) binary_expression -> binary_expression . GTE binary_expression
    (147) binary_expression -> binary_expression . > binary_expression
    (148) binary_expression -> binary_expression . EQ_OP binary_expression
    (149) binary_expression -> binary_expression . NEQ_OP binary_expression
    (150) binary_expression -> binary_expression . & binary_expression
    (151) binary_expression -> binary_expression . | binary_expression
    (152) binary_expression -> binary_expression . ^ binary_expression
    (153) binary_expression -> binary_expression . AND_OP binary_expression
    (154) binary_expression -> binary_expression . OR_OP binary_expression

  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for % resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for RIGHT_OP resolved as shift
  ! shift/reduce conflict for LEFT_OP resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for EQ_OP resolved as shift
  ! shift/reduce conflict for NEQ_OP resolved as shift
  ! shift/reduce conflict for & resolved as shift
  ! shift/reduce conflict for | resolved as shift
  ! shift/reduce conflict for ^ resolved as shift
  ! shift/reduce conflict for AND_OP resolved as shift
  ! shift/reduce conflict for OR_OP resolved as shift
    ,               reduce using rule 153 (binary_expression -> binary_expression AND_OP binary_expression .)
    ;               reduce using rule 153 (binary_expression -> binary_expression AND_OP binary_expression .)
    ]               reduce using rule 153 (binary_expression -> binary_expression AND_OP binary_expression .)
    }               reduce using rule 153 (binary_expression -> binary_expression AND_OP binary_expression .)
    )               reduce using rule 153 (binary_expression -> binary_expression AND_OP binary_expression .)
    *               shift and go to state 137
    /               shift and go to state 138
    %               shift and go to state 139
    +               shift and go to state 140
    -               shift and go to state 141
    RIGHT_OP        shift and go to state 142
    LEFT_OP         shift and go to state 143
    <               shift and go to state 144
    LTE             shift and go to state 145
    GTE             shift and go to state 146
    >               shift and go to state 147
    EQ_OP           shift and go to state 148
    NEQ_OP          shift and go to state 149
    &               shift and go to state 150
    |               shift and go to state 151
    ^               shift and go to state 152
    AND_OP          shift and go to state 153
    OR_OP           shift and go to state 154

  ! *               [ reduce using rule 153 (binary_expression -> binary_expression AND_OP binary_expression .) ]
  ! /               [ reduce using rule 153 (binary_expression -> binary_expression AND_OP binary_expression .) ]
  ! %               [ reduce using rule 153 (binary_expression -> binary_expression AND_OP binary_expression .) ]
  ! +               [ reduce using rule 153 (binary_expression -> binary_expression AND_OP binary_expression .) ]
  ! -               [ reduce using rule 153 (binary_expression -> binary_expression AND_OP binary_expression .) ]
  ! RIGHT_OP        [ reduce using rule 153 (binary_expression -> binary_expression AND_OP binary_expression .) ]
  ! LEFT_OP         [ reduce using rule 153 (binary_expression -> binary_expression AND_OP binary_expression .) ]
  ! <               [ reduce using rule 153 (binary_expression -> binary_expression AND_OP binary_expression .) ]
  ! LTE             [ reduce using rule 153 (binary_expression -> binary_expression AND_OP binary_expression .) ]
  ! GTE             [ reduce using rule 153 (binary_expression -> binary_expression AND_OP binary_expression .) ]
  ! >               [ reduce using rule 153 (binary_expression -> binary_expression AND_OP binary_expression .) ]
  ! EQ_OP           [ reduce using rule 153 (binary_expression -> binary_expression AND_OP binary_expression .) ]
  ! NEQ_OP          [ reduce using rule 153 (binary_expression -> binary_expression AND_OP binary_expression .) ]
  ! &               [ reduce using rule 153 (binary_expression -> binary_expression AND_OP binary_expression .) ]
  ! |               [ reduce using rule 153 (binary_expression -> binary_expression AND_OP binary_expression .) ]
  ! ^               [ reduce using rule 153 (binary_expression -> binary_expression AND_OP binary_expression .) ]
  ! AND_OP          [ reduce using rule 153 (binary_expression -> binary_expression AND_OP binary_expression .) ]
  ! OR_OP           [ reduce using rule 153 (binary_expression -> binary_expression AND_OP binary_expression .) ]


state 202

    (154) binary_expression -> binary_expression OR_OP binary_expression .
    (137) binary_expression -> binary_expression . * binary_expression
    (138) binary_expression -> binary_expression . / binary_expression
    (139) binary_expression -> binary_expression . % binary_expression
    (140) binary_expression -> binary_expression . + binary_expression
    (141) binary_expression -> binary_expression . - binary_expression
    (142) binary_expression -> binary_expression . RIGHT_OP binary_expression
    (143) binary_expression -> binary_expression . LEFT_OP binary_expression
    (144) binary_expression -> binary_expression . < binary_expression
    (145) binary_expression -> binary_expression . LTE binary_expression
    (146) binary_expression -> binary_expression . GTE binary_expression
    (147) binary_expression -> binary_expression . > binary_expression
    (148) binary_expression -> binary_expression . EQ_OP binary_expression
    (149) binary_expression -> binary_expression . NEQ_OP binary_expression
    (150) binary_expression -> binary_expression . & binary_expression
    (151) binary_expression -> binary_expression . | binary_expression
    (152) binary_expression -> binary_expression . ^ binary_expression
    (153) binary_expression -> binary_expression . AND_OP binary_expression
    (154) binary_expression -> binary_expression . OR_OP binary_expression

  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for % resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for RIGHT_OP resolved as shift
  ! shift/reduce conflict for LEFT_OP resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for EQ_OP resolved as shift
  ! shift/reduce conflict for NEQ_OP resolved as shift
  ! shift/reduce conflict for & resolved as shift
  ! shift/reduce conflict for | resolved as shift
  ! shift/reduce conflict for ^ resolved as shift
  ! shift/reduce conflict for AND_OP resolved as shift
  ! shift/reduce conflict for OR_OP resolved as shift
    ,               reduce using rule 154 (binary_expression -> binary_expression OR_OP binary_expression .)
    ;               reduce using rule 154 (binary_expression -> binary_expression OR_OP binary_expression .)
    ]               reduce using rule 154 (binary_expression -> binary_expression OR_OP binary_expression .)
    }               reduce using rule 154 (binary_expression -> binary_expression OR_OP binary_expression .)
    )               reduce using rule 154 (binary_expression -> binary_expression OR_OP binary_expression .)
    *               shift and go to state 137
    /               shift and go to state 138
    %               shift and go to state 139
    +               shift and go to state 140
    -               shift and go to state 141
    RIGHT_OP        shift and go to state 142
    LEFT_OP         shift and go to state 143
    <               shift and go to state 144
    LTE             shift and go to state 145
    GTE             shift and go to state 146
    >               shift and go to state 147
    EQ_OP           shift and go to state 148
    NEQ_OP          shift and go to state 149
    &               shift and go to state 150
    |               shift and go to state 151
    ^               shift and go to state 152
    AND_OP          shift and go to state 153
    OR_OP           shift and go to state 154

  ! *               [ reduce using rule 154 (binary_expression -> binary_expression OR_OP binary_expression .) ]
  ! /               [ reduce using rule 154 (binary_expression -> binary_expression OR_OP binary_expression .) ]
  ! %               [ reduce using rule 154 (binary_expression -> binary_expression OR_OP binary_expression .) ]
  ! +               [ reduce using rule 154 (binary_expression -> binary_expression OR_OP binary_expression .) ]
  ! -               [ reduce using rule 154 (binary_expression -> binary_expression OR_OP binary_expression .) ]
  ! RIGHT_OP        [ reduce using rule 154 (binary_expression -> binary_expression OR_OP binary_expression .) ]
  ! LEFT_OP         [ reduce using rule 154 (binary_expression -> binary_expression OR_OP binary_expression .) ]
  ! <               [ reduce using rule 154 (binary_expression -> binary_expression OR_OP binary_expression .) ]
  ! LTE             [ reduce using rule 154 (binary_expression -> binary_expression OR_OP binary_expression .) ]
  ! GTE             [ reduce using rule 154 (binary_expression -> binary_expression OR_OP binary_expression .) ]
  ! >               [ reduce using rule 154 (binary_expression -> binary_expression OR_OP binary_expression .) ]
  ! EQ_OP           [ reduce using rule 154 (binary_expression -> binary_expression OR_OP binary_expression .) ]
  ! NEQ_OP          [ reduce using rule 154 (binary_expression -> binary_expression OR_OP binary_expression .) ]
  ! &               [ reduce using rule 154 (binary_expression -> binary_expression OR_OP binary_expression .) ]
  ! |               [ reduce using rule 154 (binary_expression -> binary_expression OR_OP binary_expression .) ]
  ! ^               [ reduce using rule 154 (binary_expression -> binary_expression OR_OP binary_expression .) ]
  ! AND_OP          [ reduce using rule 154 (binary_expression -> binary_expression OR_OP binary_expression .) ]
  ! OR_OP           [ reduce using rule 154 (binary_expression -> binary_expression OR_OP binary_expression .) ]


state 203

    (98) postfix_expression -> postfix_expression [ expression . ]
    (91) expression -> expression . , assignment_expression

    ]               shift and go to state 218
    ,               shift and go to state 175


state 204

    (99) postfix_expression -> postfix_expression ( argument_expression_list . )
    (59) argument_expression_list -> argument_expression_list . , assignment_expression

    )               shift and go to state 219
    ,               shift and go to state 220


state 205

    (100) postfix_expression -> postfix_expression ( ) .

    [               reduce using rule 100 (postfix_expression -> postfix_expression ( ) .)
    (               reduce using rule 100 (postfix_expression -> postfix_expression ( ) .)
    PTR_OP          reduce using rule 100 (postfix_expression -> postfix_expression ( ) .)
    =               reduce using rule 100 (postfix_expression -> postfix_expression ( ) .)
    MUL_ASSIGN      reduce using rule 100 (postfix_expression -> postfix_expression ( ) .)
    DIV_ASSIGN      reduce using rule 100 (postfix_expression -> postfix_expression ( ) .)
    MOD_ASSIGN      reduce using rule 100 (postfix_expression -> postfix_expression ( ) .)
    ADD_ASSIGN      reduce using rule 100 (postfix_expression -> postfix_expression ( ) .)
    SUB_ASSIGN      reduce using rule 100 (postfix_expression -> postfix_expression ( ) .)
    LEFT_ASSIGN     reduce using rule 100 (postfix_expression -> postfix_expression ( ) .)
    RIGHT_ASSIGN    reduce using rule 100 (postfix_expression -> postfix_expression ( ) .)
    AND_ASSIGN      reduce using rule 100 (postfix_expression -> postfix_expression ( ) .)
    XOR_ASSIGN      reduce using rule 100 (postfix_expression -> postfix_expression ( ) .)
    OR_ASSIGN       reduce using rule 100 (postfix_expression -> postfix_expression ( ) .)
    *               reduce using rule 100 (postfix_expression -> postfix_expression ( ) .)
    /               reduce using rule 100 (postfix_expression -> postfix_expression ( ) .)
    %               reduce using rule 100 (postfix_expression -> postfix_expression ( ) .)
    +               reduce using rule 100 (postfix_expression -> postfix_expression ( ) .)
    -               reduce using rule 100 (postfix_expression -> postfix_expression ( ) .)
    RIGHT_OP        reduce using rule 100 (postfix_expression -> postfix_expression ( ) .)
    LEFT_OP         reduce using rule 100 (postfix_expression -> postfix_expression ( ) .)
    <               reduce using rule 100 (postfix_expression -> postfix_expression ( ) .)
    LTE             reduce using rule 100 (postfix_expression -> postfix_expression ( ) .)
    GTE             reduce using rule 100 (postfix_expression -> postfix_expression ( ) .)
    >               reduce using rule 100 (postfix_expression -> postfix_expression ( ) .)
    EQ_OP           reduce using rule 100 (postfix_expression -> postfix_expression ( ) .)
    NEQ_OP          reduce using rule 100 (postfix_expression -> postfix_expression ( ) .)
    &               reduce using rule 100 (postfix_expression -> postfix_expression ( ) .)
    |               reduce using rule 100 (postfix_expression -> postfix_expression ( ) .)
    ^               reduce using rule 100 (postfix_expression -> postfix_expression ( ) .)
    AND_OP          reduce using rule 100 (postfix_expression -> postfix_expression ( ) .)
    OR_OP           reduce using rule 100 (postfix_expression -> postfix_expression ( ) .)
    ,               reduce using rule 100 (postfix_expression -> postfix_expression ( ) .)
    ;               reduce using rule 100 (postfix_expression -> postfix_expression ( ) .)
    ]               reduce using rule 100 (postfix_expression -> postfix_expression ( ) .)
    }               reduce using rule 100 (postfix_expression -> postfix_expression ( ) .)
    )               reduce using rule 100 (postfix_expression -> postfix_expression ( ) .)


state 206

    (58) argument_expression_list -> assignment_expression .

    )               reduce using rule 58 (argument_expression_list -> assignment_expression .)
    ,               reduce using rule 58 (argument_expression_list -> assignment_expression .)


state 207

    (101) postfix_expression -> postfix_expression PTR_OP identifier .

    [               reduce using rule 101 (postfix_expression -> postfix_expression PTR_OP identifier .)
    (               reduce using rule 101 (postfix_expression -> postfix_expression PTR_OP identifier .)
    PTR_OP          reduce using rule 101 (postfix_expression -> postfix_expression PTR_OP identifier .)
    =               reduce using rule 101 (postfix_expression -> postfix_expression PTR_OP identifier .)
    MUL_ASSIGN      reduce using rule 101 (postfix_expression -> postfix_expression PTR_OP identifier .)
    DIV_ASSIGN      reduce using rule 101 (postfix_expression -> postfix_expression PTR_OP identifier .)
    MOD_ASSIGN      reduce using rule 101 (postfix_expression -> postfix_expression PTR_OP identifier .)
    ADD_ASSIGN      reduce using rule 101 (postfix_expression -> postfix_expression PTR_OP identifier .)
    SUB_ASSIGN      reduce using rule 101 (postfix_expression -> postfix_expression PTR_OP identifier .)
    LEFT_ASSIGN     reduce using rule 101 (postfix_expression -> postfix_expression PTR_OP identifier .)
    RIGHT_ASSIGN    reduce using rule 101 (postfix_expression -> postfix_expression PTR_OP identifier .)
    AND_ASSIGN      reduce using rule 101 (postfix_expression -> postfix_expression PTR_OP identifier .)
    XOR_ASSIGN      reduce using rule 101 (postfix_expression -> postfix_expression PTR_OP identifier .)
    OR_ASSIGN       reduce using rule 101 (postfix_expression -> postfix_expression PTR_OP identifier .)
    *               reduce using rule 101 (postfix_expression -> postfix_expression PTR_OP identifier .)
    /               reduce using rule 101 (postfix_expression -> postfix_expression PTR_OP identifier .)
    %               reduce using rule 101 (postfix_expression -> postfix_expression PTR_OP identifier .)
    +               reduce using rule 101 (postfix_expression -> postfix_expression PTR_OP identifier .)
    -               reduce using rule 101 (postfix_expression -> postfix_expression PTR_OP identifier .)
    RIGHT_OP        reduce using rule 101 (postfix_expression -> postfix_expression PTR_OP identifier .)
    LEFT_OP         reduce using rule 101 (postfix_expression -> postfix_expression PTR_OP identifier .)
    <               reduce using rule 101 (postfix_expression -> postfix_expression PTR_OP identifier .)
    LTE             reduce using rule 101 (postfix_expression -> postfix_expression PTR_OP identifier .)
    GTE             reduce using rule 101 (postfix_expression -> postfix_expression PTR_OP identifier .)
    >               reduce using rule 101 (postfix_expression -> postfix_expression PTR_OP identifier .)
    EQ_OP           reduce using rule 101 (postfix_expression -> postfix_expression PTR_OP identifier .)
    NEQ_OP          reduce using rule 101 (postfix_expression -> postfix_expression PTR_OP identifier .)
    &               reduce using rule 101 (postfix_expression -> postfix_expression PTR_OP identifier .)
    |               reduce using rule 101 (postfix_expression -> postfix_expression PTR_OP identifier .)
    ^               reduce using rule 101 (postfix_expression -> postfix_expression PTR_OP identifier .)
    AND_OP          reduce using rule 101 (postfix_expression -> postfix_expression PTR_OP identifier .)
    OR_OP           reduce using rule 101 (postfix_expression -> postfix_expression PTR_OP identifier .)
    ,               reduce using rule 101 (postfix_expression -> postfix_expression PTR_OP identifier .)
    ;               reduce using rule 101 (postfix_expression -> postfix_expression PTR_OP identifier .)
    ]               reduce using rule 101 (postfix_expression -> postfix_expression PTR_OP identifier .)
    }               reduce using rule 101 (postfix_expression -> postfix_expression PTR_OP identifier .)
    )               reduce using rule 101 (postfix_expression -> postfix_expression PTR_OP identifier .)


state 208

    (105) primary_expression -> ( expression ) .

    [               reduce using rule 105 (primary_expression -> ( expression ) .)
    (               reduce using rule 105 (primary_expression -> ( expression ) .)
    PTR_OP          reduce using rule 105 (primary_expression -> ( expression ) .)
    =               reduce using rule 105 (primary_expression -> ( expression ) .)
    MUL_ASSIGN      reduce using rule 105 (primary_expression -> ( expression ) .)
    DIV_ASSIGN      reduce using rule 105 (primary_expression -> ( expression ) .)
    MOD_ASSIGN      reduce using rule 105 (primary_expression -> ( expression ) .)
    ADD_ASSIGN      reduce using rule 105 (primary_expression -> ( expression ) .)
    SUB_ASSIGN      reduce using rule 105 (primary_expression -> ( expression ) .)
    LEFT_ASSIGN     reduce using rule 105 (primary_expression -> ( expression ) .)
    RIGHT_ASSIGN    reduce using rule 105 (primary_expression -> ( expression ) .)
    AND_ASSIGN      reduce using rule 105 (primary_expression -> ( expression ) .)
    XOR_ASSIGN      reduce using rule 105 (primary_expression -> ( expression ) .)
    OR_ASSIGN       reduce using rule 105 (primary_expression -> ( expression ) .)
    *               reduce using rule 105 (primary_expression -> ( expression ) .)
    /               reduce using rule 105 (primary_expression -> ( expression ) .)
    %               reduce using rule 105 (primary_expression -> ( expression ) .)
    +               reduce using rule 105 (primary_expression -> ( expression ) .)
    -               reduce using rule 105 (primary_expression -> ( expression ) .)
    RIGHT_OP        reduce using rule 105 (primary_expression -> ( expression ) .)
    LEFT_OP         reduce using rule 105 (primary_expression -> ( expression ) .)
    <               reduce using rule 105 (primary_expression -> ( expression ) .)
    LTE             reduce using rule 105 (primary_expression -> ( expression ) .)
    GTE             reduce using rule 105 (primary_expression -> ( expression ) .)
    >               reduce using rule 105 (primary_expression -> ( expression ) .)
    EQ_OP           reduce using rule 105 (primary_expression -> ( expression ) .)
    NEQ_OP          reduce using rule 105 (primary_expression -> ( expression ) .)
    &               reduce using rule 105 (primary_expression -> ( expression ) .)
    |               reduce using rule 105 (primary_expression -> ( expression ) .)
    ^               reduce using rule 105 (primary_expression -> ( expression ) .)
    AND_OP          reduce using rule 105 (primary_expression -> ( expression ) .)
    OR_OP           reduce using rule 105 (primary_expression -> ( expression ) .)
    ,               reduce using rule 105 (primary_expression -> ( expression ) .)
    ;               reduce using rule 105 (primary_expression -> ( expression ) .)
    ]               reduce using rule 105 (primary_expression -> ( expression ) .)
    }               reduce using rule 105 (primary_expression -> ( expression ) .)
    )               reduce using rule 105 (primary_expression -> ( expression ) .)


state 209

    (95) parameter_list -> parameter_list , parameter_declaration .

    )               reduce using rule 95 (parameter_list -> parameter_list , parameter_declaration .)
    ,               reduce using rule 95 (parameter_list -> parameter_list , parameter_declaration .)


state 210

    (37) identifier_list -> identifier_list , identifier .

    ,               reduce using rule 37 (identifier_list -> identifier_list , identifier .)
    )               reduce using rule 37 (identifier_list -> identifier_list , identifier .)


state 211

    (123) struct_declarator_list -> struct_declarator_list , declarator .

    ;               reduce using rule 123 (struct_declarator_list -> struct_declarator_list , declarator .)
    ,               reduce using rule 123 (struct_declarator_list -> struct_declarator_list , declarator .)


state 212

    (106) selection_statement -> IF ( expression . ) statement
    (107) selection_statement -> IF ( expression . ) statement ELSE statement
    (91) expression -> expression . , assignment_expression

    )               shift and go to state 221
    ,               shift and go to state 175


state 213

    (91) expression -> expression , assignment_expression .

    ,               reduce using rule 91 (expression -> expression , assignment_expression .)
    ;               reduce using rule 91 (expression -> expression , assignment_expression .)
    )               reduce using rule 91 (expression -> expression , assignment_expression .)
    ]               reduce using rule 91 (expression -> expression , assignment_expression .)


state 214

    (108) iteration_statement -> WHILE ( expression . ) statement
    (91) expression -> expression . , assignment_expression

    )               shift and go to state 222
    ,               shift and go to state 175


state 215

    (42) jump_statement -> RETURN expression ; .

    {               reduce using rule 42 (jump_statement -> RETURN expression ; .)
    IF              reduce using rule 42 (jump_statement -> RETURN expression ; .)
    WHILE           reduce using rule 42 (jump_statement -> RETURN expression ; .)
    BREAK           reduce using rule 42 (jump_statement -> RETURN expression ; .)
    CONTINUE        reduce using rule 42 (jump_statement -> RETURN expression ; .)
    RETURN          reduce using rule 42 (jump_statement -> RETURN expression ; .)
    VOID            reduce using rule 42 (jump_statement -> RETURN expression ; .)
    CHAR            reduce using rule 42 (jump_statement -> RETURN expression ; .)
    SHORT           reduce using rule 42 (jump_statement -> RETURN expression ; .)
    INT             reduce using rule 42 (jump_statement -> RETURN expression ; .)
    LONG            reduce using rule 42 (jump_statement -> RETURN expression ; .)
    FLOAT           reduce using rule 42 (jump_statement -> RETURN expression ; .)
    DOUBLE          reduce using rule 42 (jump_statement -> RETURN expression ; .)
    SIGNED          reduce using rule 42 (jump_statement -> RETURN expression ; .)
    UNSIGNED        reduce using rule 42 (jump_statement -> RETURN expression ; .)
    BOOL            reduce using rule 42 (jump_statement -> RETURN expression ; .)
    STRUCT          reduce using rule 42 (jump_statement -> RETURN expression ; .)
    &               reduce using rule 42 (jump_statement -> RETURN expression ; .)
    *               reduce using rule 42 (jump_statement -> RETURN expression ; .)
    +               reduce using rule 42 (jump_statement -> RETURN expression ; .)
    -               reduce using rule 42 (jump_statement -> RETURN expression ; .)
    ~               reduce using rule 42 (jump_statement -> RETURN expression ; .)
    !               reduce using rule 42 (jump_statement -> RETURN expression ; .)
    (               reduce using rule 42 (jump_statement -> RETURN expression ; .)
    IDENTIFIER      reduce using rule 42 (jump_statement -> RETURN expression ; .)
    INTEGER_CONSTANT reduce using rule 42 (jump_statement -> RETURN expression ; .)
    CHAR_CONSTANT   reduce using rule 42 (jump_statement -> RETURN expression ; .)
    FLOAT_CONSTANT  reduce using rule 42 (jump_statement -> RETURN expression ; .)
    BOOL_CONSTANT   reduce using rule 42 (jump_statement -> RETURN expression ; .)
    STRING_CONSTANT reduce using rule 42 (jump_statement -> RETURN expression ; .)
    ;               reduce using rule 42 (jump_statement -> RETURN expression ; .)
    }               reduce using rule 42 (jump_statement -> RETURN expression ; .)
    ELSE            reduce using rule 42 (jump_statement -> RETURN expression ; .)


state 216

    (7) initializer -> { initializer_list , } .

    ,               reduce using rule 7 (initializer -> { initializer_list , } .)
    ;               reduce using rule 7 (initializer -> { initializer_list , } .)
    }               reduce using rule 7 (initializer -> { initializer_list , } .)


state 217

    (9) initializer_list -> initializer_list , initializer .

    ,               reduce using rule 9 (initializer_list -> initializer_list , initializer .)
    }               reduce using rule 9 (initializer_list -> initializer_list , initializer .)


state 218

    (98) postfix_expression -> postfix_expression [ expression ] .

    [               reduce using rule 98 (postfix_expression -> postfix_expression [ expression ] .)
    (               reduce using rule 98 (postfix_expression -> postfix_expression [ expression ] .)
    PTR_OP          reduce using rule 98 (postfix_expression -> postfix_expression [ expression ] .)
    =               reduce using rule 98 (postfix_expression -> postfix_expression [ expression ] .)
    MUL_ASSIGN      reduce using rule 98 (postfix_expression -> postfix_expression [ expression ] .)
    DIV_ASSIGN      reduce using rule 98 (postfix_expression -> postfix_expression [ expression ] .)
    MOD_ASSIGN      reduce using rule 98 (postfix_expression -> postfix_expression [ expression ] .)
    ADD_ASSIGN      reduce using rule 98 (postfix_expression -> postfix_expression [ expression ] .)
    SUB_ASSIGN      reduce using rule 98 (postfix_expression -> postfix_expression [ expression ] .)
    LEFT_ASSIGN     reduce using rule 98 (postfix_expression -> postfix_expression [ expression ] .)
    RIGHT_ASSIGN    reduce using rule 98 (postfix_expression -> postfix_expression [ expression ] .)
    AND_ASSIGN      reduce using rule 98 (postfix_expression -> postfix_expression [ expression ] .)
    XOR_ASSIGN      reduce using rule 98 (postfix_expression -> postfix_expression [ expression ] .)
    OR_ASSIGN       reduce using rule 98 (postfix_expression -> postfix_expression [ expression ] .)
    *               reduce using rule 98 (postfix_expression -> postfix_expression [ expression ] .)
    /               reduce using rule 98 (postfix_expression -> postfix_expression [ expression ] .)
    %               reduce using rule 98 (postfix_expression -> postfix_expression [ expression ] .)
    +               reduce using rule 98 (postfix_expression -> postfix_expression [ expression ] .)
    -               reduce using rule 98 (postfix_expression -> postfix_expression [ expression ] .)
    RIGHT_OP        reduce using rule 98 (postfix_expression -> postfix_expression [ expression ] .)
    LEFT_OP         reduce using rule 98 (postfix_expression -> postfix_expression [ expression ] .)
    <               reduce using rule 98 (postfix_expression -> postfix_expression [ expression ] .)
    LTE             reduce using rule 98 (postfix_expression -> postfix_expression [ expression ] .)
    GTE             reduce using rule 98 (postfix_expression -> postfix_expression [ expression ] .)
    >               reduce using rule 98 (postfix_expression -> postfix_expression [ expression ] .)
    EQ_OP           reduce using rule 98 (postfix_expression -> postfix_expression [ expression ] .)
    NEQ_OP          reduce using rule 98 (postfix_expression -> postfix_expression [ expression ] .)
    &               reduce using rule 98 (postfix_expression -> postfix_expression [ expression ] .)
    |               reduce using rule 98 (postfix_expression -> postfix_expression [ expression ] .)
    ^               reduce using rule 98 (postfix_expression -> postfix_expression [ expression ] .)
    AND_OP          reduce using rule 98 (postfix_expression -> postfix_expression [ expression ] .)
    OR_OP           reduce using rule 98 (postfix_expression -> postfix_expression [ expression ] .)
    ,               reduce using rule 98 (postfix_expression -> postfix_expression [ expression ] .)
    ;               reduce using rule 98 (postfix_expression -> postfix_expression [ expression ] .)
    ]               reduce using rule 98 (postfix_expression -> postfix_expression [ expression ] .)
    }               reduce using rule 98 (postfix_expression -> postfix_expression [ expression ] .)
    )               reduce using rule 98 (postfix_expression -> postfix_expression [ expression ] .)


state 219

    (99) postfix_expression -> postfix_expression ( argument_expression_list ) .

    [               reduce using rule 99 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    (               reduce using rule 99 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    PTR_OP          reduce using rule 99 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    =               reduce using rule 99 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    MUL_ASSIGN      reduce using rule 99 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    DIV_ASSIGN      reduce using rule 99 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    MOD_ASSIGN      reduce using rule 99 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    ADD_ASSIGN      reduce using rule 99 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    SUB_ASSIGN      reduce using rule 99 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    LEFT_ASSIGN     reduce using rule 99 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    RIGHT_ASSIGN    reduce using rule 99 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    AND_ASSIGN      reduce using rule 99 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    XOR_ASSIGN      reduce using rule 99 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    OR_ASSIGN       reduce using rule 99 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    *               reduce using rule 99 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    /               reduce using rule 99 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    %               reduce using rule 99 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    +               reduce using rule 99 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    -               reduce using rule 99 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    RIGHT_OP        reduce using rule 99 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    LEFT_OP         reduce using rule 99 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    <               reduce using rule 99 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    LTE             reduce using rule 99 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    GTE             reduce using rule 99 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    >               reduce using rule 99 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    EQ_OP           reduce using rule 99 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    NEQ_OP          reduce using rule 99 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    &               reduce using rule 99 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    |               reduce using rule 99 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    ^               reduce using rule 99 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    AND_OP          reduce using rule 99 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    OR_OP           reduce using rule 99 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    ,               reduce using rule 99 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    ;               reduce using rule 99 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    ]               reduce using rule 99 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    }               reduce using rule 99 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    )               reduce using rule 99 (postfix_expression -> postfix_expression ( argument_expression_list ) .)


state 220

    (59) argument_expression_list -> argument_expression_list , . assignment_expression
    (60) assignment_expression -> . conditional_expression
    (61) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (75) conditional_expression -> . binary_expression
    (132) unary_expression -> . postfix_expression
    (133) unary_expression -> . unary_operator cast_expression
    (136) binary_expression -> . cast_expression
    (137) binary_expression -> . binary_expression * binary_expression
    (138) binary_expression -> . binary_expression / binary_expression
    (139) binary_expression -> . binary_expression % binary_expression
    (140) binary_expression -> . binary_expression + binary_expression
    (141) binary_expression -> . binary_expression - binary_expression
    (142) binary_expression -> . binary_expression RIGHT_OP binary_expression
    (143) binary_expression -> . binary_expression LEFT_OP binary_expression
    (144) binary_expression -> . binary_expression < binary_expression
    (145) binary_expression -> . binary_expression LTE binary_expression
    (146) binary_expression -> . binary_expression GTE binary_expression
    (147) binary_expression -> . binary_expression > binary_expression
    (148) binary_expression -> . binary_expression EQ_OP binary_expression
    (149) binary_expression -> . binary_expression NEQ_OP binary_expression
    (150) binary_expression -> . binary_expression & binary_expression
    (151) binary_expression -> . binary_expression | binary_expression
    (152) binary_expression -> . binary_expression ^ binary_expression
    (153) binary_expression -> . binary_expression AND_OP binary_expression
    (154) binary_expression -> . binary_expression OR_OP binary_expression
    (97) postfix_expression -> . primary_expression
    (98) postfix_expression -> . postfix_expression [ expression ]
    (99) postfix_expression -> . postfix_expression ( argument_expression_list )
    (100) postfix_expression -> . postfix_expression ( )
    (101) postfix_expression -> . postfix_expression PTR_OP identifier
    (126) unary_operator -> . &
    (127) unary_operator -> . *
    (128) unary_operator -> . +
    (129) unary_operator -> . -
    (130) unary_operator -> . ~
    (131) unary_operator -> . !
    (155) cast_expression -> . unary_expression
    (102) primary_expression -> . identifier
    (103) primary_expression -> . constant
    (104) primary_expression -> . unified_string_literal
    (105) primary_expression -> . ( expression )
    (38) identifier -> . IDENTIFIER
    (76) constant -> . INTEGER_CONSTANT
    (77) constant -> . CHAR_CONSTANT
    (78) constant -> . FLOAT_CONSTANT
    (79) constant -> . BOOL_CONSTANT
    (134) unified_string_literal -> . STRING_CONSTANT
    (135) unified_string_literal -> . unified_string_literal STRING_CONSTANT

    &               shift and go to state 69
    *               shift and go to state 66
    +               shift and go to state 67
    -               shift and go to state 68
    ~               shift and go to state 73
    !               shift and go to state 74
    (               shift and go to state 71
    IDENTIFIER      shift and go to state 31
    INTEGER_CONSTANT shift and go to state 77
    CHAR_CONSTANT   shift and go to state 78
    FLOAT_CONSTANT  shift and go to state 79
    BOOL_CONSTANT   shift and go to state 80
    STRING_CONSTANT shift and go to state 81

    assignment_expression          shift and go to state 223
    conditional_expression         shift and go to state 60
    unary_expression               shift and go to state 61
    binary_expression              shift and go to state 62
    postfix_expression             shift and go to state 63
    unary_operator                 shift and go to state 64
    cast_expression                shift and go to state 65
    primary_expression             shift and go to state 70
    identifier                     shift and go to state 72
    constant                       shift and go to state 75
    unified_string_literal         shift and go to state 76

state 221

    (106) selection_statement -> IF ( expression ) . statement
    (107) selection_statement -> IF ( expression ) . statement ELSE statement
    (109) statement -> . compound_statement
    (110) statement -> . selection_statement
    (111) statement -> . expression_statement
    (112) statement -> . iteration_statement
    (113) statement -> . jump_statement
    (74) compound_statement -> . { block_item_list_orempty }
    (106) selection_statement -> . IF ( expression ) statement
    (107) selection_statement -> . IF ( expression ) statement ELSE statement
    (92) expression_statement -> . expression_orempty ;
    (108) iteration_statement -> . WHILE ( expression ) statement
    (39) jump_statement -> . BREAK ;
    (40) jump_statement -> . CONTINUE ;
    (41) jump_statement -> . RETURN ;
    (42) jump_statement -> . RETURN expression ;
    (72) expression_orempty -> . empty
    (73) expression_orempty -> . expression
    (16) empty -> .
    (90) expression -> . assignment_expression
    (91) expression -> . expression , assignment_expression
    (60) assignment_expression -> . conditional_expression
    (61) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (75) conditional_expression -> . binary_expression
    (132) unary_expression -> . postfix_expression
    (133) unary_expression -> . unary_operator cast_expression
    (136) binary_expression -> . cast_expression
    (137) binary_expression -> . binary_expression * binary_expression
    (138) binary_expression -> . binary_expression / binary_expression
    (139) binary_expression -> . binary_expression % binary_expression
    (140) binary_expression -> . binary_expression + binary_expression
    (141) binary_expression -> . binary_expression - binary_expression
    (142) binary_expression -> . binary_expression RIGHT_OP binary_expression
    (143) binary_expression -> . binary_expression LEFT_OP binary_expression
    (144) binary_expression -> . binary_expression < binary_expression
    (145) binary_expression -> . binary_expression LTE binary_expression
    (146) binary_expression -> . binary_expression GTE binary_expression
    (147) binary_expression -> . binary_expression > binary_expression
    (148) binary_expression -> . binary_expression EQ_OP binary_expression
    (149) binary_expression -> . binary_expression NEQ_OP binary_expression
    (150) binary_expression -> . binary_expression & binary_expression
    (151) binary_expression -> . binary_expression | binary_expression
    (152) binary_expression -> . binary_expression ^ binary_expression
    (153) binary_expression -> . binary_expression AND_OP binary_expression
    (154) binary_expression -> . binary_expression OR_OP binary_expression
    (97) postfix_expression -> . primary_expression
    (98) postfix_expression -> . postfix_expression [ expression ]
    (99) postfix_expression -> . postfix_expression ( argument_expression_list )
    (100) postfix_expression -> . postfix_expression ( )
    (101) postfix_expression -> . postfix_expression PTR_OP identifier
    (126) unary_operator -> . &
    (127) unary_operator -> . *
    (128) unary_operator -> . +
    (129) unary_operator -> . -
    (130) unary_operator -> . ~
    (131) unary_operator -> . !
    (155) cast_expression -> . unary_expression
    (102) primary_expression -> . identifier
    (103) primary_expression -> . constant
    (104) primary_expression -> . unified_string_literal
    (105) primary_expression -> . ( expression )
    (38) identifier -> . IDENTIFIER
    (76) constant -> . INTEGER_CONSTANT
    (77) constant -> . CHAR_CONSTANT
    (78) constant -> . FLOAT_CONSTANT
    (79) constant -> . BOOL_CONSTANT
    (134) unified_string_literal -> . STRING_CONSTANT
    (135) unified_string_literal -> . unified_string_literal STRING_CONSTANT

    {               shift and go to state 56
    IF              shift and go to state 113
    WHILE           shift and go to state 116
    BREAK           shift and go to state 117
    CONTINUE        shift and go to state 118
    RETURN          shift and go to state 119
    ;               reduce using rule 16 (empty -> .)
    &               shift and go to state 69
    *               shift and go to state 66
    +               shift and go to state 67
    -               shift and go to state 68
    ~               shift and go to state 73
    !               shift and go to state 74
    (               shift and go to state 71
    IDENTIFIER      shift and go to state 31
    INTEGER_CONSTANT shift and go to state 77
    CHAR_CONSTANT   shift and go to state 78
    FLOAT_CONSTANT  shift and go to state 79
    BOOL_CONSTANT   shift and go to state 80
    STRING_CONSTANT shift and go to state 81

    expression                     shift and go to state 114
    statement                      shift and go to state 224
    compound_statement             shift and go to state 108
    selection_statement            shift and go to state 109
    expression_statement           shift and go to state 110
    iteration_statement            shift and go to state 111
    jump_statement                 shift and go to state 112
    expression_orempty             shift and go to state 115
    empty                          shift and go to state 173
    assignment_expression          shift and go to state 120
    conditional_expression         shift and go to state 60
    unary_expression               shift and go to state 61
    binary_expression              shift and go to state 62
    postfix_expression             shift and go to state 63
    unary_operator                 shift and go to state 64
    cast_expression                shift and go to state 65
    primary_expression             shift and go to state 70
    identifier                     shift and go to state 72
    constant                       shift and go to state 75
    unified_string_literal         shift and go to state 76

state 222

    (108) iteration_statement -> WHILE ( expression ) . statement
    (109) statement -> . compound_statement
    (110) statement -> . selection_statement
    (111) statement -> . expression_statement
    (112) statement -> . iteration_statement
    (113) statement -> . jump_statement
    (74) compound_statement -> . { block_item_list_orempty }
    (106) selection_statement -> . IF ( expression ) statement
    (107) selection_statement -> . IF ( expression ) statement ELSE statement
    (92) expression_statement -> . expression_orempty ;
    (108) iteration_statement -> . WHILE ( expression ) statement
    (39) jump_statement -> . BREAK ;
    (40) jump_statement -> . CONTINUE ;
    (41) jump_statement -> . RETURN ;
    (42) jump_statement -> . RETURN expression ;
    (72) expression_orempty -> . empty
    (73) expression_orempty -> . expression
    (16) empty -> .
    (90) expression -> . assignment_expression
    (91) expression -> . expression , assignment_expression
    (60) assignment_expression -> . conditional_expression
    (61) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (75) conditional_expression -> . binary_expression
    (132) unary_expression -> . postfix_expression
    (133) unary_expression -> . unary_operator cast_expression
    (136) binary_expression -> . cast_expression
    (137) binary_expression -> . binary_expression * binary_expression
    (138) binary_expression -> . binary_expression / binary_expression
    (139) binary_expression -> . binary_expression % binary_expression
    (140) binary_expression -> . binary_expression + binary_expression
    (141) binary_expression -> . binary_expression - binary_expression
    (142) binary_expression -> . binary_expression RIGHT_OP binary_expression
    (143) binary_expression -> . binary_expression LEFT_OP binary_expression
    (144) binary_expression -> . binary_expression < binary_expression
    (145) binary_expression -> . binary_expression LTE binary_expression
    (146) binary_expression -> . binary_expression GTE binary_expression
    (147) binary_expression -> . binary_expression > binary_expression
    (148) binary_expression -> . binary_expression EQ_OP binary_expression
    (149) binary_expression -> . binary_expression NEQ_OP binary_expression
    (150) binary_expression -> . binary_expression & binary_expression
    (151) binary_expression -> . binary_expression | binary_expression
    (152) binary_expression -> . binary_expression ^ binary_expression
    (153) binary_expression -> . binary_expression AND_OP binary_expression
    (154) binary_expression -> . binary_expression OR_OP binary_expression
    (97) postfix_expression -> . primary_expression
    (98) postfix_expression -> . postfix_expression [ expression ]
    (99) postfix_expression -> . postfix_expression ( argument_expression_list )
    (100) postfix_expression -> . postfix_expression ( )
    (101) postfix_expression -> . postfix_expression PTR_OP identifier
    (126) unary_operator -> . &
    (127) unary_operator -> . *
    (128) unary_operator -> . +
    (129) unary_operator -> . -
    (130) unary_operator -> . ~
    (131) unary_operator -> . !
    (155) cast_expression -> . unary_expression
    (102) primary_expression -> . identifier
    (103) primary_expression -> . constant
    (104) primary_expression -> . unified_string_literal
    (105) primary_expression -> . ( expression )
    (38) identifier -> . IDENTIFIER
    (76) constant -> . INTEGER_CONSTANT
    (77) constant -> . CHAR_CONSTANT
    (78) constant -> . FLOAT_CONSTANT
    (79) constant -> . BOOL_CONSTANT
    (134) unified_string_literal -> . STRING_CONSTANT
    (135) unified_string_literal -> . unified_string_literal STRING_CONSTANT

    {               shift and go to state 56
    IF              shift and go to state 113
    WHILE           shift and go to state 116
    BREAK           shift and go to state 117
    CONTINUE        shift and go to state 118
    RETURN          shift and go to state 119
    ;               reduce using rule 16 (empty -> .)
    &               shift and go to state 69
    *               shift and go to state 66
    +               shift and go to state 67
    -               shift and go to state 68
    ~               shift and go to state 73
    !               shift and go to state 74
    (               shift and go to state 71
    IDENTIFIER      shift and go to state 31
    INTEGER_CONSTANT shift and go to state 77
    CHAR_CONSTANT   shift and go to state 78
    FLOAT_CONSTANT  shift and go to state 79
    BOOL_CONSTANT   shift and go to state 80
    STRING_CONSTANT shift and go to state 81

    expression                     shift and go to state 114
    statement                      shift and go to state 225
    compound_statement             shift and go to state 108
    selection_statement            shift and go to state 109
    expression_statement           shift and go to state 110
    iteration_statement            shift and go to state 111
    jump_statement                 shift and go to state 112
    expression_orempty             shift and go to state 115
    empty                          shift and go to state 173
    assignment_expression          shift and go to state 120
    conditional_expression         shift and go to state 60
    unary_expression               shift and go to state 61
    binary_expression              shift and go to state 62
    postfix_expression             shift and go to state 63
    unary_operator                 shift and go to state 64
    cast_expression                shift and go to state 65
    primary_expression             shift and go to state 70
    identifier                     shift and go to state 72
    constant                       shift and go to state 75
    unified_string_literal         shift and go to state 76

state 223

    (59) argument_expression_list -> argument_expression_list , assignment_expression .

    )               reduce using rule 59 (argument_expression_list -> argument_expression_list , assignment_expression .)
    ,               reduce using rule 59 (argument_expression_list -> argument_expression_list , assignment_expression .)


state 224

    (106) selection_statement -> IF ( expression ) statement .
    (107) selection_statement -> IF ( expression ) statement . ELSE statement

  ! shift/reduce conflict for ELSE resolved as shift
    {               reduce using rule 106 (selection_statement -> IF ( expression ) statement .)
    IF              reduce using rule 106 (selection_statement -> IF ( expression ) statement .)
    WHILE           reduce using rule 106 (selection_statement -> IF ( expression ) statement .)
    BREAK           reduce using rule 106 (selection_statement -> IF ( expression ) statement .)
    CONTINUE        reduce using rule 106 (selection_statement -> IF ( expression ) statement .)
    RETURN          reduce using rule 106 (selection_statement -> IF ( expression ) statement .)
    VOID            reduce using rule 106 (selection_statement -> IF ( expression ) statement .)
    CHAR            reduce using rule 106 (selection_statement -> IF ( expression ) statement .)
    SHORT           reduce using rule 106 (selection_statement -> IF ( expression ) statement .)
    INT             reduce using rule 106 (selection_statement -> IF ( expression ) statement .)
    LONG            reduce using rule 106 (selection_statement -> IF ( expression ) statement .)
    FLOAT           reduce using rule 106 (selection_statement -> IF ( expression ) statement .)
    DOUBLE          reduce using rule 106 (selection_statement -> IF ( expression ) statement .)
    SIGNED          reduce using rule 106 (selection_statement -> IF ( expression ) statement .)
    UNSIGNED        reduce using rule 106 (selection_statement -> IF ( expression ) statement .)
    BOOL            reduce using rule 106 (selection_statement -> IF ( expression ) statement .)
    STRUCT          reduce using rule 106 (selection_statement -> IF ( expression ) statement .)
    &               reduce using rule 106 (selection_statement -> IF ( expression ) statement .)
    *               reduce using rule 106 (selection_statement -> IF ( expression ) statement .)
    +               reduce using rule 106 (selection_statement -> IF ( expression ) statement .)
    -               reduce using rule 106 (selection_statement -> IF ( expression ) statement .)
    ~               reduce using rule 106 (selection_statement -> IF ( expression ) statement .)
    !               reduce using rule 106 (selection_statement -> IF ( expression ) statement .)
    (               reduce using rule 106 (selection_statement -> IF ( expression ) statement .)
    IDENTIFIER      reduce using rule 106 (selection_statement -> IF ( expression ) statement .)
    INTEGER_CONSTANT reduce using rule 106 (selection_statement -> IF ( expression ) statement .)
    CHAR_CONSTANT   reduce using rule 106 (selection_statement -> IF ( expression ) statement .)
    FLOAT_CONSTANT  reduce using rule 106 (selection_statement -> IF ( expression ) statement .)
    BOOL_CONSTANT   reduce using rule 106 (selection_statement -> IF ( expression ) statement .)
    STRING_CONSTANT reduce using rule 106 (selection_statement -> IF ( expression ) statement .)
    ;               reduce using rule 106 (selection_statement -> IF ( expression ) statement .)
    }               reduce using rule 106 (selection_statement -> IF ( expression ) statement .)
    ELSE            shift and go to state 226

  ! ELSE            [ reduce using rule 106 (selection_statement -> IF ( expression ) statement .) ]


state 225

    (108) iteration_statement -> WHILE ( expression ) statement .

    {               reduce using rule 108 (iteration_statement -> WHILE ( expression ) statement .)
    IF              reduce using rule 108 (iteration_statement -> WHILE ( expression ) statement .)
    WHILE           reduce using rule 108 (iteration_statement -> WHILE ( expression ) statement .)
    BREAK           reduce using rule 108 (iteration_statement -> WHILE ( expression ) statement .)
    CONTINUE        reduce using rule 108 (iteration_statement -> WHILE ( expression ) statement .)
    RETURN          reduce using rule 108 (iteration_statement -> WHILE ( expression ) statement .)
    VOID            reduce using rule 108 (iteration_statement -> WHILE ( expression ) statement .)
    CHAR            reduce using rule 108 (iteration_statement -> WHILE ( expression ) statement .)
    SHORT           reduce using rule 108 (iteration_statement -> WHILE ( expression ) statement .)
    INT             reduce using rule 108 (iteration_statement -> WHILE ( expression ) statement .)
    LONG            reduce using rule 108 (iteration_statement -> WHILE ( expression ) statement .)
    FLOAT           reduce using rule 108 (iteration_statement -> WHILE ( expression ) statement .)
    DOUBLE          reduce using rule 108 (iteration_statement -> WHILE ( expression ) statement .)
    SIGNED          reduce using rule 108 (iteration_statement -> WHILE ( expression ) statement .)
    UNSIGNED        reduce using rule 108 (iteration_statement -> WHILE ( expression ) statement .)
    BOOL            reduce using rule 108 (iteration_statement -> WHILE ( expression ) statement .)
    STRUCT          reduce using rule 108 (iteration_statement -> WHILE ( expression ) statement .)
    &               reduce using rule 108 (iteration_statement -> WHILE ( expression ) statement .)
    *               reduce using rule 108 (iteration_statement -> WHILE ( expression ) statement .)
    +               reduce using rule 108 (iteration_statement -> WHILE ( expression ) statement .)
    -               reduce using rule 108 (iteration_statement -> WHILE ( expression ) statement .)
    ~               reduce using rule 108 (iteration_statement -> WHILE ( expression ) statement .)
    !               reduce using rule 108 (iteration_statement -> WHILE ( expression ) statement .)
    (               reduce using rule 108 (iteration_statement -> WHILE ( expression ) statement .)
    IDENTIFIER      reduce using rule 108 (iteration_statement -> WHILE ( expression ) statement .)
    INTEGER_CONSTANT reduce using rule 108 (iteration_statement -> WHILE ( expression ) statement .)
    CHAR_CONSTANT   reduce using rule 108 (iteration_statement -> WHILE ( expression ) statement .)
    FLOAT_CONSTANT  reduce using rule 108 (iteration_statement -> WHILE ( expression ) statement .)
    BOOL_CONSTANT   reduce using rule 108 (iteration_statement -> WHILE ( expression ) statement .)
    STRING_CONSTANT reduce using rule 108 (iteration_statement -> WHILE ( expression ) statement .)
    ;               reduce using rule 108 (iteration_statement -> WHILE ( expression ) statement .)
    }               reduce using rule 108 (iteration_statement -> WHILE ( expression ) statement .)
    ELSE            reduce using rule 108 (iteration_statement -> WHILE ( expression ) statement .)


state 226

    (107) selection_statement -> IF ( expression ) statement ELSE . statement
    (109) statement -> . compound_statement
    (110) statement -> . selection_statement
    (111) statement -> . expression_statement
    (112) statement -> . iteration_statement
    (113) statement -> . jump_statement
    (74) compound_statement -> . { block_item_list_orempty }
    (106) selection_statement -> . IF ( expression ) statement
    (107) selection_statement -> . IF ( expression ) statement ELSE statement
    (92) expression_statement -> . expression_orempty ;
    (108) iteration_statement -> . WHILE ( expression ) statement
    (39) jump_statement -> . BREAK ;
    (40) jump_statement -> . CONTINUE ;
    (41) jump_statement -> . RETURN ;
    (42) jump_statement -> . RETURN expression ;
    (72) expression_orempty -> . empty
    (73) expression_orempty -> . expression
    (16) empty -> .
    (90) expression -> . assignment_expression
    (91) expression -> . expression , assignment_expression
    (60) assignment_expression -> . conditional_expression
    (61) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (75) conditional_expression -> . binary_expression
    (132) unary_expression -> . postfix_expression
    (133) unary_expression -> . unary_operator cast_expression
    (136) binary_expression -> . cast_expression
    (137) binary_expression -> . binary_expression * binary_expression
    (138) binary_expression -> . binary_expression / binary_expression
    (139) binary_expression -> . binary_expression % binary_expression
    (140) binary_expression -> . binary_expression + binary_expression
    (141) binary_expression -> . binary_expression - binary_expression
    (142) binary_expression -> . binary_expression RIGHT_OP binary_expression
    (143) binary_expression -> . binary_expression LEFT_OP binary_expression
    (144) binary_expression -> . binary_expression < binary_expression
    (145) binary_expression -> . binary_expression LTE binary_expression
    (146) binary_expression -> . binary_expression GTE binary_expression
    (147) binary_expression -> . binary_expression > binary_expression
    (148) binary_expression -> . binary_expression EQ_OP binary_expression
    (149) binary_expression -> . binary_expression NEQ_OP binary_expression
    (150) binary_expression -> . binary_expression & binary_expression
    (151) binary_expression -> . binary_expression | binary_expression
    (152) binary_expression -> . binary_expression ^ binary_expression
    (153) binary_expression -> . binary_expression AND_OP binary_expression
    (154) binary_expression -> . binary_expression OR_OP binary_expression
    (97) postfix_expression -> . primary_expression
    (98) postfix_expression -> . postfix_expression [ expression ]
    (99) postfix_expression -> . postfix_expression ( argument_expression_list )
    (100) postfix_expression -> . postfix_expression ( )
    (101) postfix_expression -> . postfix_expression PTR_OP identifier
    (126) unary_operator -> . &
    (127) unary_operator -> . *
    (128) unary_operator -> . +
    (129) unary_operator -> . -
    (130) unary_operator -> . ~
    (131) unary_operator -> . !
    (155) cast_expression -> . unary_expression
    (102) primary_expression -> . identifier
    (103) primary_expression -> . constant
    (104) primary_expression -> . unified_string_literal
    (105) primary_expression -> . ( expression )
    (38) identifier -> . IDENTIFIER
    (76) constant -> . INTEGER_CONSTANT
    (77) constant -> . CHAR_CONSTANT
    (78) constant -> . FLOAT_CONSTANT
    (79) constant -> . BOOL_CONSTANT
    (134) unified_string_literal -> . STRING_CONSTANT
    (135) unified_string_literal -> . unified_string_literal STRING_CONSTANT

    {               shift and go to state 56
    IF              shift and go to state 113
    WHILE           shift and go to state 116
    BREAK           shift and go to state 117
    CONTINUE        shift and go to state 118
    RETURN          shift and go to state 119
    ;               reduce using rule 16 (empty -> .)
    &               shift and go to state 69
    *               shift and go to state 66
    +               shift and go to state 67
    -               shift and go to state 68
    ~               shift and go to state 73
    !               shift and go to state 74
    (               shift and go to state 71
    IDENTIFIER      shift and go to state 31
    INTEGER_CONSTANT shift and go to state 77
    CHAR_CONSTANT   shift and go to state 78
    FLOAT_CONSTANT  shift and go to state 79
    BOOL_CONSTANT   shift and go to state 80
    STRING_CONSTANT shift and go to state 81

    expression                     shift and go to state 114
    statement                      shift and go to state 227
    compound_statement             shift and go to state 108
    selection_statement            shift and go to state 109
    expression_statement           shift and go to state 110
    iteration_statement            shift and go to state 111
    jump_statement                 shift and go to state 112
    expression_orempty             shift and go to state 115
    empty                          shift and go to state 173
    assignment_expression          shift and go to state 120
    conditional_expression         shift and go to state 60
    unary_expression               shift and go to state 61
    binary_expression              shift and go to state 62
    postfix_expression             shift and go to state 63
    unary_operator                 shift and go to state 64
    cast_expression                shift and go to state 65
    primary_expression             shift and go to state 70
    identifier                     shift and go to state 72
    constant                       shift and go to state 75
    unified_string_literal         shift and go to state 76

state 227

    (107) selection_statement -> IF ( expression ) statement ELSE statement .

    {               reduce using rule 107 (selection_statement -> IF ( expression ) statement ELSE statement .)
    IF              reduce using rule 107 (selection_statement -> IF ( expression ) statement ELSE statement .)
    WHILE           reduce using rule 107 (selection_statement -> IF ( expression ) statement ELSE statement .)
    BREAK           reduce using rule 107 (selection_statement -> IF ( expression ) statement ELSE statement .)
    CONTINUE        reduce using rule 107 (selection_statement -> IF ( expression ) statement ELSE statement .)
    RETURN          reduce using rule 107 (selection_statement -> IF ( expression ) statement ELSE statement .)
    VOID            reduce using rule 107 (selection_statement -> IF ( expression ) statement ELSE statement .)
    CHAR            reduce using rule 107 (selection_statement -> IF ( expression ) statement ELSE statement .)
    SHORT           reduce using rule 107 (selection_statement -> IF ( expression ) statement ELSE statement .)
    INT             reduce using rule 107 (selection_statement -> IF ( expression ) statement ELSE statement .)
    LONG            reduce using rule 107 (selection_statement -> IF ( expression ) statement ELSE statement .)
    FLOAT           reduce using rule 107 (selection_statement -> IF ( expression ) statement ELSE statement .)
    DOUBLE          reduce using rule 107 (selection_statement -> IF ( expression ) statement ELSE statement .)
    SIGNED          reduce using rule 107 (selection_statement -> IF ( expression ) statement ELSE statement .)
    UNSIGNED        reduce using rule 107 (selection_statement -> IF ( expression ) statement ELSE statement .)
    BOOL            reduce using rule 107 (selection_statement -> IF ( expression ) statement ELSE statement .)
    STRUCT          reduce using rule 107 (selection_statement -> IF ( expression ) statement ELSE statement .)
    &               reduce using rule 107 (selection_statement -> IF ( expression ) statement ELSE statement .)
    *               reduce using rule 107 (selection_statement -> IF ( expression ) statement ELSE statement .)
    +               reduce using rule 107 (selection_statement -> IF ( expression ) statement ELSE statement .)
    -               reduce using rule 107 (selection_statement -> IF ( expression ) statement ELSE statement .)
    ~               reduce using rule 107 (selection_statement -> IF ( expression ) statement ELSE statement .)
    !               reduce using rule 107 (selection_statement -> IF ( expression ) statement ELSE statement .)
    (               reduce using rule 107 (selection_statement -> IF ( expression ) statement ELSE statement .)
    IDENTIFIER      reduce using rule 107 (selection_statement -> IF ( expression ) statement ELSE statement .)
    INTEGER_CONSTANT reduce using rule 107 (selection_statement -> IF ( expression ) statement ELSE statement .)
    CHAR_CONSTANT   reduce using rule 107 (selection_statement -> IF ( expression ) statement ELSE statement .)
    FLOAT_CONSTANT  reduce using rule 107 (selection_statement -> IF ( expression ) statement ELSE statement .)
    BOOL_CONSTANT   reduce using rule 107 (selection_statement -> IF ( expression ) statement ELSE statement .)
    STRING_CONSTANT reduce using rule 107 (selection_statement -> IF ( expression ) statement ELSE statement .)
    ;               reduce using rule 107 (selection_statement -> IF ( expression ) statement ELSE statement .)
    }               reduce using rule 107 (selection_statement -> IF ( expression ) statement ELSE statement .)
    ELSE            reduce using rule 107 (selection_statement -> IF ( expression ) statement ELSE statement .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for * in state 185 resolved as shift
WARNING: shift/reduce conflict for / in state 185 resolved as shift
WARNING: shift/reduce conflict for % in state 185 resolved as shift
WARNING: shift/reduce conflict for + in state 185 resolved as shift
WARNING: shift/reduce conflict for - in state 185 resolved as shift
WARNING: shift/reduce conflict for RIGHT_OP in state 185 resolved as shift
WARNING: shift/reduce conflict for LEFT_OP in state 185 resolved as shift
WARNING: shift/reduce conflict for < in state 185 resolved as shift
WARNING: shift/reduce conflict for LTE in state 185 resolved as shift
WARNING: shift/reduce conflict for GTE in state 185 resolved as shift
WARNING: shift/reduce conflict for > in state 185 resolved as shift
WARNING: shift/reduce conflict for EQ_OP in state 185 resolved as shift
WARNING: shift/reduce conflict for NEQ_OP in state 185 resolved as shift
WARNING: shift/reduce conflict for & in state 185 resolved as shift
WARNING: shift/reduce conflict for | in state 185 resolved as shift
WARNING: shift/reduce conflict for ^ in state 185 resolved as shift
WARNING: shift/reduce conflict for AND_OP in state 185 resolved as shift
WARNING: shift/reduce conflict for OR_OP in state 185 resolved as shift
WARNING: shift/reduce conflict for * in state 186 resolved as shift
WARNING: shift/reduce conflict for / in state 186 resolved as shift
WARNING: shift/reduce conflict for % in state 186 resolved as shift
WARNING: shift/reduce conflict for + in state 186 resolved as shift
WARNING: shift/reduce conflict for - in state 186 resolved as shift
WARNING: shift/reduce conflict for RIGHT_OP in state 186 resolved as shift
WARNING: shift/reduce conflict for LEFT_OP in state 186 resolved as shift
WARNING: shift/reduce conflict for < in state 186 resolved as shift
WARNING: shift/reduce conflict for LTE in state 186 resolved as shift
WARNING: shift/reduce conflict for GTE in state 186 resolved as shift
WARNING: shift/reduce conflict for > in state 186 resolved as shift
WARNING: shift/reduce conflict for EQ_OP in state 186 resolved as shift
WARNING: shift/reduce conflict for NEQ_OP in state 186 resolved as shift
WARNING: shift/reduce conflict for & in state 186 resolved as shift
WARNING: shift/reduce conflict for | in state 186 resolved as shift
WARNING: shift/reduce conflict for ^ in state 186 resolved as shift
WARNING: shift/reduce conflict for AND_OP in state 186 resolved as shift
WARNING: shift/reduce conflict for OR_OP in state 186 resolved as shift
WARNING: shift/reduce conflict for * in state 187 resolved as shift
WARNING: shift/reduce conflict for / in state 187 resolved as shift
WARNING: shift/reduce conflict for % in state 187 resolved as shift
WARNING: shift/reduce conflict for + in state 187 resolved as shift
WARNING: shift/reduce conflict for - in state 187 resolved as shift
WARNING: shift/reduce conflict for RIGHT_OP in state 187 resolved as shift
WARNING: shift/reduce conflict for LEFT_OP in state 187 resolved as shift
WARNING: shift/reduce conflict for < in state 187 resolved as shift
WARNING: shift/reduce conflict for LTE in state 187 resolved as shift
WARNING: shift/reduce conflict for GTE in state 187 resolved as shift
WARNING: shift/reduce conflict for > in state 187 resolved as shift
WARNING: shift/reduce conflict for EQ_OP in state 187 resolved as shift
WARNING: shift/reduce conflict for NEQ_OP in state 187 resolved as shift
WARNING: shift/reduce conflict for & in state 187 resolved as shift
WARNING: shift/reduce conflict for | in state 187 resolved as shift
WARNING: shift/reduce conflict for ^ in state 187 resolved as shift
WARNING: shift/reduce conflict for AND_OP in state 187 resolved as shift
WARNING: shift/reduce conflict for OR_OP in state 187 resolved as shift
WARNING: shift/reduce conflict for * in state 188 resolved as shift
WARNING: shift/reduce conflict for / in state 188 resolved as shift
WARNING: shift/reduce conflict for % in state 188 resolved as shift
WARNING: shift/reduce conflict for + in state 188 resolved as shift
WARNING: shift/reduce conflict for - in state 188 resolved as shift
WARNING: shift/reduce conflict for RIGHT_OP in state 188 resolved as shift
WARNING: shift/reduce conflict for LEFT_OP in state 188 resolved as shift
WARNING: shift/reduce conflict for < in state 188 resolved as shift
WARNING: shift/reduce conflict for LTE in state 188 resolved as shift
WARNING: shift/reduce conflict for GTE in state 188 resolved as shift
WARNING: shift/reduce conflict for > in state 188 resolved as shift
WARNING: shift/reduce conflict for EQ_OP in state 188 resolved as shift
WARNING: shift/reduce conflict for NEQ_OP in state 188 resolved as shift
WARNING: shift/reduce conflict for & in state 188 resolved as shift
WARNING: shift/reduce conflict for | in state 188 resolved as shift
WARNING: shift/reduce conflict for ^ in state 188 resolved as shift
WARNING: shift/reduce conflict for AND_OP in state 188 resolved as shift
WARNING: shift/reduce conflict for OR_OP in state 188 resolved as shift
WARNING: shift/reduce conflict for * in state 189 resolved as shift
WARNING: shift/reduce conflict for / in state 189 resolved as shift
WARNING: shift/reduce conflict for % in state 189 resolved as shift
WARNING: shift/reduce conflict for + in state 189 resolved as shift
WARNING: shift/reduce conflict for - in state 189 resolved as shift
WARNING: shift/reduce conflict for RIGHT_OP in state 189 resolved as shift
WARNING: shift/reduce conflict for LEFT_OP in state 189 resolved as shift
WARNING: shift/reduce conflict for < in state 189 resolved as shift
WARNING: shift/reduce conflict for LTE in state 189 resolved as shift
WARNING: shift/reduce conflict for GTE in state 189 resolved as shift
WARNING: shift/reduce conflict for > in state 189 resolved as shift
WARNING: shift/reduce conflict for EQ_OP in state 189 resolved as shift
WARNING: shift/reduce conflict for NEQ_OP in state 189 resolved as shift
WARNING: shift/reduce conflict for & in state 189 resolved as shift
WARNING: shift/reduce conflict for | in state 189 resolved as shift
WARNING: shift/reduce conflict for ^ in state 189 resolved as shift
WARNING: shift/reduce conflict for AND_OP in state 189 resolved as shift
WARNING: shift/reduce conflict for OR_OP in state 189 resolved as shift
WARNING: shift/reduce conflict for * in state 190 resolved as shift
WARNING: shift/reduce conflict for / in state 190 resolved as shift
WARNING: shift/reduce conflict for % in state 190 resolved as shift
WARNING: shift/reduce conflict for + in state 190 resolved as shift
WARNING: shift/reduce conflict for - in state 190 resolved as shift
WARNING: shift/reduce conflict for RIGHT_OP in state 190 resolved as shift
WARNING: shift/reduce conflict for LEFT_OP in state 190 resolved as shift
WARNING: shift/reduce conflict for < in state 190 resolved as shift
WARNING: shift/reduce conflict for LTE in state 190 resolved as shift
WARNING: shift/reduce conflict for GTE in state 190 resolved as shift
WARNING: shift/reduce conflict for > in state 190 resolved as shift
WARNING: shift/reduce conflict for EQ_OP in state 190 resolved as shift
WARNING: shift/reduce conflict for NEQ_OP in state 190 resolved as shift
WARNING: shift/reduce conflict for & in state 190 resolved as shift
WARNING: shift/reduce conflict for | in state 190 resolved as shift
WARNING: shift/reduce conflict for ^ in state 190 resolved as shift
WARNING: shift/reduce conflict for AND_OP in state 190 resolved as shift
WARNING: shift/reduce conflict for OR_OP in state 190 resolved as shift
WARNING: shift/reduce conflict for * in state 191 resolved as shift
WARNING: shift/reduce conflict for / in state 191 resolved as shift
WARNING: shift/reduce conflict for % in state 191 resolved as shift
WARNING: shift/reduce conflict for + in state 191 resolved as shift
WARNING: shift/reduce conflict for - in state 191 resolved as shift
WARNING: shift/reduce conflict for RIGHT_OP in state 191 resolved as shift
WARNING: shift/reduce conflict for LEFT_OP in state 191 resolved as shift
WARNING: shift/reduce conflict for < in state 191 resolved as shift
WARNING: shift/reduce conflict for LTE in state 191 resolved as shift
WARNING: shift/reduce conflict for GTE in state 191 resolved as shift
WARNING: shift/reduce conflict for > in state 191 resolved as shift
WARNING: shift/reduce conflict for EQ_OP in state 191 resolved as shift
WARNING: shift/reduce conflict for NEQ_OP in state 191 resolved as shift
WARNING: shift/reduce conflict for & in state 191 resolved as shift
WARNING: shift/reduce conflict for | in state 191 resolved as shift
WARNING: shift/reduce conflict for ^ in state 191 resolved as shift
WARNING: shift/reduce conflict for AND_OP in state 191 resolved as shift
WARNING: shift/reduce conflict for OR_OP in state 191 resolved as shift
WARNING: shift/reduce conflict for * in state 192 resolved as shift
WARNING: shift/reduce conflict for / in state 192 resolved as shift
WARNING: shift/reduce conflict for % in state 192 resolved as shift
WARNING: shift/reduce conflict for + in state 192 resolved as shift
WARNING: shift/reduce conflict for - in state 192 resolved as shift
WARNING: shift/reduce conflict for RIGHT_OP in state 192 resolved as shift
WARNING: shift/reduce conflict for LEFT_OP in state 192 resolved as shift
WARNING: shift/reduce conflict for < in state 192 resolved as shift
WARNING: shift/reduce conflict for LTE in state 192 resolved as shift
WARNING: shift/reduce conflict for GTE in state 192 resolved as shift
WARNING: shift/reduce conflict for > in state 192 resolved as shift
WARNING: shift/reduce conflict for EQ_OP in state 192 resolved as shift
WARNING: shift/reduce conflict for NEQ_OP in state 192 resolved as shift
WARNING: shift/reduce conflict for & in state 192 resolved as shift
WARNING: shift/reduce conflict for | in state 192 resolved as shift
WARNING: shift/reduce conflict for ^ in state 192 resolved as shift
WARNING: shift/reduce conflict for AND_OP in state 192 resolved as shift
WARNING: shift/reduce conflict for OR_OP in state 192 resolved as shift
WARNING: shift/reduce conflict for * in state 193 resolved as shift
WARNING: shift/reduce conflict for / in state 193 resolved as shift
WARNING: shift/reduce conflict for % in state 193 resolved as shift
WARNING: shift/reduce conflict for + in state 193 resolved as shift
WARNING: shift/reduce conflict for - in state 193 resolved as shift
WARNING: shift/reduce conflict for RIGHT_OP in state 193 resolved as shift
WARNING: shift/reduce conflict for LEFT_OP in state 193 resolved as shift
WARNING: shift/reduce conflict for < in state 193 resolved as shift
WARNING: shift/reduce conflict for LTE in state 193 resolved as shift
WARNING: shift/reduce conflict for GTE in state 193 resolved as shift
WARNING: shift/reduce conflict for > in state 193 resolved as shift
WARNING: shift/reduce conflict for EQ_OP in state 193 resolved as shift
WARNING: shift/reduce conflict for NEQ_OP in state 193 resolved as shift
WARNING: shift/reduce conflict for & in state 193 resolved as shift
WARNING: shift/reduce conflict for | in state 193 resolved as shift
WARNING: shift/reduce conflict for ^ in state 193 resolved as shift
WARNING: shift/reduce conflict for AND_OP in state 193 resolved as shift
WARNING: shift/reduce conflict for OR_OP in state 193 resolved as shift
WARNING: shift/reduce conflict for * in state 194 resolved as shift
WARNING: shift/reduce conflict for / in state 194 resolved as shift
WARNING: shift/reduce conflict for % in state 194 resolved as shift
WARNING: shift/reduce conflict for + in state 194 resolved as shift
WARNING: shift/reduce conflict for - in state 194 resolved as shift
WARNING: shift/reduce conflict for RIGHT_OP in state 194 resolved as shift
WARNING: shift/reduce conflict for LEFT_OP in state 194 resolved as shift
WARNING: shift/reduce conflict for < in state 194 resolved as shift
WARNING: shift/reduce conflict for LTE in state 194 resolved as shift
WARNING: shift/reduce conflict for GTE in state 194 resolved as shift
WARNING: shift/reduce conflict for > in state 194 resolved as shift
WARNING: shift/reduce conflict for EQ_OP in state 194 resolved as shift
WARNING: shift/reduce conflict for NEQ_OP in state 194 resolved as shift
WARNING: shift/reduce conflict for & in state 194 resolved as shift
WARNING: shift/reduce conflict for | in state 194 resolved as shift
WARNING: shift/reduce conflict for ^ in state 194 resolved as shift
WARNING: shift/reduce conflict for AND_OP in state 194 resolved as shift
WARNING: shift/reduce conflict for OR_OP in state 194 resolved as shift
WARNING: shift/reduce conflict for * in state 195 resolved as shift
WARNING: shift/reduce conflict for / in state 195 resolved as shift
WARNING: shift/reduce conflict for % in state 195 resolved as shift
WARNING: shift/reduce conflict for + in state 195 resolved as shift
WARNING: shift/reduce conflict for - in state 195 resolved as shift
WARNING: shift/reduce conflict for RIGHT_OP in state 195 resolved as shift
WARNING: shift/reduce conflict for LEFT_OP in state 195 resolved as shift
WARNING: shift/reduce conflict for < in state 195 resolved as shift
WARNING: shift/reduce conflict for LTE in state 195 resolved as shift
WARNING: shift/reduce conflict for GTE in state 195 resolved as shift
WARNING: shift/reduce conflict for > in state 195 resolved as shift
WARNING: shift/reduce conflict for EQ_OP in state 195 resolved as shift
WARNING: shift/reduce conflict for NEQ_OP in state 195 resolved as shift
WARNING: shift/reduce conflict for & in state 195 resolved as shift
WARNING: shift/reduce conflict for | in state 195 resolved as shift
WARNING: shift/reduce conflict for ^ in state 195 resolved as shift
WARNING: shift/reduce conflict for AND_OP in state 195 resolved as shift
WARNING: shift/reduce conflict for OR_OP in state 195 resolved as shift
WARNING: shift/reduce conflict for * in state 196 resolved as shift
WARNING: shift/reduce conflict for / in state 196 resolved as shift
WARNING: shift/reduce conflict for % in state 196 resolved as shift
WARNING: shift/reduce conflict for + in state 196 resolved as shift
WARNING: shift/reduce conflict for - in state 196 resolved as shift
WARNING: shift/reduce conflict for RIGHT_OP in state 196 resolved as shift
WARNING: shift/reduce conflict for LEFT_OP in state 196 resolved as shift
WARNING: shift/reduce conflict for < in state 196 resolved as shift
WARNING: shift/reduce conflict for LTE in state 196 resolved as shift
WARNING: shift/reduce conflict for GTE in state 196 resolved as shift
WARNING: shift/reduce conflict for > in state 196 resolved as shift
WARNING: shift/reduce conflict for EQ_OP in state 196 resolved as shift
WARNING: shift/reduce conflict for NEQ_OP in state 196 resolved as shift
WARNING: shift/reduce conflict for & in state 196 resolved as shift
WARNING: shift/reduce conflict for | in state 196 resolved as shift
WARNING: shift/reduce conflict for ^ in state 196 resolved as shift
WARNING: shift/reduce conflict for AND_OP in state 196 resolved as shift
WARNING: shift/reduce conflict for OR_OP in state 196 resolved as shift
WARNING: shift/reduce conflict for * in state 197 resolved as shift
WARNING: shift/reduce conflict for / in state 197 resolved as shift
WARNING: shift/reduce conflict for % in state 197 resolved as shift
WARNING: shift/reduce conflict for + in state 197 resolved as shift
WARNING: shift/reduce conflict for - in state 197 resolved as shift
WARNING: shift/reduce conflict for RIGHT_OP in state 197 resolved as shift
WARNING: shift/reduce conflict for LEFT_OP in state 197 resolved as shift
WARNING: shift/reduce conflict for < in state 197 resolved as shift
WARNING: shift/reduce conflict for LTE in state 197 resolved as shift
WARNING: shift/reduce conflict for GTE in state 197 resolved as shift
WARNING: shift/reduce conflict for > in state 197 resolved as shift
WARNING: shift/reduce conflict for EQ_OP in state 197 resolved as shift
WARNING: shift/reduce conflict for NEQ_OP in state 197 resolved as shift
WARNING: shift/reduce conflict for & in state 197 resolved as shift
WARNING: shift/reduce conflict for | in state 197 resolved as shift
WARNING: shift/reduce conflict for ^ in state 197 resolved as shift
WARNING: shift/reduce conflict for AND_OP in state 197 resolved as shift
WARNING: shift/reduce conflict for OR_OP in state 197 resolved as shift
WARNING: shift/reduce conflict for * in state 198 resolved as shift
WARNING: shift/reduce conflict for / in state 198 resolved as shift
WARNING: shift/reduce conflict for % in state 198 resolved as shift
WARNING: shift/reduce conflict for + in state 198 resolved as shift
WARNING: shift/reduce conflict for - in state 198 resolved as shift
WARNING: shift/reduce conflict for RIGHT_OP in state 198 resolved as shift
WARNING: shift/reduce conflict for LEFT_OP in state 198 resolved as shift
WARNING: shift/reduce conflict for < in state 198 resolved as shift
WARNING: shift/reduce conflict for LTE in state 198 resolved as shift
WARNING: shift/reduce conflict for GTE in state 198 resolved as shift
WARNING: shift/reduce conflict for > in state 198 resolved as shift
WARNING: shift/reduce conflict for EQ_OP in state 198 resolved as shift
WARNING: shift/reduce conflict for NEQ_OP in state 198 resolved as shift
WARNING: shift/reduce conflict for & in state 198 resolved as shift
WARNING: shift/reduce conflict for | in state 198 resolved as shift
WARNING: shift/reduce conflict for ^ in state 198 resolved as shift
WARNING: shift/reduce conflict for AND_OP in state 198 resolved as shift
WARNING: shift/reduce conflict for OR_OP in state 198 resolved as shift
WARNING: shift/reduce conflict for * in state 199 resolved as shift
WARNING: shift/reduce conflict for / in state 199 resolved as shift
WARNING: shift/reduce conflict for % in state 199 resolved as shift
WARNING: shift/reduce conflict for + in state 199 resolved as shift
WARNING: shift/reduce conflict for - in state 199 resolved as shift
WARNING: shift/reduce conflict for RIGHT_OP in state 199 resolved as shift
WARNING: shift/reduce conflict for LEFT_OP in state 199 resolved as shift
WARNING: shift/reduce conflict for < in state 199 resolved as shift
WARNING: shift/reduce conflict for LTE in state 199 resolved as shift
WARNING: shift/reduce conflict for GTE in state 199 resolved as shift
WARNING: shift/reduce conflict for > in state 199 resolved as shift
WARNING: shift/reduce conflict for EQ_OP in state 199 resolved as shift
WARNING: shift/reduce conflict for NEQ_OP in state 199 resolved as shift
WARNING: shift/reduce conflict for & in state 199 resolved as shift
WARNING: shift/reduce conflict for | in state 199 resolved as shift
WARNING: shift/reduce conflict for ^ in state 199 resolved as shift
WARNING: shift/reduce conflict for AND_OP in state 199 resolved as shift
WARNING: shift/reduce conflict for OR_OP in state 199 resolved as shift
WARNING: shift/reduce conflict for * in state 200 resolved as shift
WARNING: shift/reduce conflict for / in state 200 resolved as shift
WARNING: shift/reduce conflict for % in state 200 resolved as shift
WARNING: shift/reduce conflict for + in state 200 resolved as shift
WARNING: shift/reduce conflict for - in state 200 resolved as shift
WARNING: shift/reduce conflict for RIGHT_OP in state 200 resolved as shift
WARNING: shift/reduce conflict for LEFT_OP in state 200 resolved as shift
WARNING: shift/reduce conflict for < in state 200 resolved as shift
WARNING: shift/reduce conflict for LTE in state 200 resolved as shift
WARNING: shift/reduce conflict for GTE in state 200 resolved as shift
WARNING: shift/reduce conflict for > in state 200 resolved as shift
WARNING: shift/reduce conflict for EQ_OP in state 200 resolved as shift
WARNING: shift/reduce conflict for NEQ_OP in state 200 resolved as shift
WARNING: shift/reduce conflict for & in state 200 resolved as shift
WARNING: shift/reduce conflict for | in state 200 resolved as shift
WARNING: shift/reduce conflict for ^ in state 200 resolved as shift
WARNING: shift/reduce conflict for AND_OP in state 200 resolved as shift
WARNING: shift/reduce conflict for OR_OP in state 200 resolved as shift
WARNING: shift/reduce conflict for * in state 201 resolved as shift
WARNING: shift/reduce conflict for / in state 201 resolved as shift
WARNING: shift/reduce conflict for % in state 201 resolved as shift
WARNING: shift/reduce conflict for + in state 201 resolved as shift
WARNING: shift/reduce conflict for - in state 201 resolved as shift
WARNING: shift/reduce conflict for RIGHT_OP in state 201 resolved as shift
WARNING: shift/reduce conflict for LEFT_OP in state 201 resolved as shift
WARNING: shift/reduce conflict for < in state 201 resolved as shift
WARNING: shift/reduce conflict for LTE in state 201 resolved as shift
WARNING: shift/reduce conflict for GTE in state 201 resolved as shift
WARNING: shift/reduce conflict for > in state 201 resolved as shift
WARNING: shift/reduce conflict for EQ_OP in state 201 resolved as shift
WARNING: shift/reduce conflict for NEQ_OP in state 201 resolved as shift
WARNING: shift/reduce conflict for & in state 201 resolved as shift
WARNING: shift/reduce conflict for | in state 201 resolved as shift
WARNING: shift/reduce conflict for ^ in state 201 resolved as shift
WARNING: shift/reduce conflict for AND_OP in state 201 resolved as shift
WARNING: shift/reduce conflict for OR_OP in state 201 resolved as shift
WARNING: shift/reduce conflict for * in state 202 resolved as shift
WARNING: shift/reduce conflict for / in state 202 resolved as shift
WARNING: shift/reduce conflict for % in state 202 resolved as shift
WARNING: shift/reduce conflict for + in state 202 resolved as shift
WARNING: shift/reduce conflict for - in state 202 resolved as shift
WARNING: shift/reduce conflict for RIGHT_OP in state 202 resolved as shift
WARNING: shift/reduce conflict for LEFT_OP in state 202 resolved as shift
WARNING: shift/reduce conflict for < in state 202 resolved as shift
WARNING: shift/reduce conflict for LTE in state 202 resolved as shift
WARNING: shift/reduce conflict for GTE in state 202 resolved as shift
WARNING: shift/reduce conflict for > in state 202 resolved as shift
WARNING: shift/reduce conflict for EQ_OP in state 202 resolved as shift
WARNING: shift/reduce conflict for NEQ_OP in state 202 resolved as shift
WARNING: shift/reduce conflict for & in state 202 resolved as shift
WARNING: shift/reduce conflict for | in state 202 resolved as shift
WARNING: shift/reduce conflict for ^ in state 202 resolved as shift
WARNING: shift/reduce conflict for AND_OP in state 202 resolved as shift
WARNING: shift/reduce conflict for OR_OP in state 202 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 224 resolved as shift
