
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "IDENTIFIER COMMENT1 COMMENT2 FLOAT_CONSTANT INTEGER_CONSTANT STRING_CONSTANT CHAR_CONSTANT BOOL_CONSTANT RIGHT_ASSIGN LEFT_ASSIGN ADD_ASSIGN SUB_ASSIGN MUL_ASSIGN DIV_ASSIGN MOD_ASSIGN AND_ASSIGN XOR_ASSIGN OR_ASSIGN RIGHT_OP LEFT_OP INC_OP DEC_OP PTR_OP AND_OP OR_OP EQ_OP NEQ_OP LTE GTE BUILT_IN_FUNCTION ASM AUTO BOOL BREAK CASE CATCH CHAR CLASS CONST CONST_CAST CONTINUE DEFAULT DELETE DO DOUBLE DYNAMIC_CAST ELSE ENUM EXPLICIT EXPORT EXTERN FLOAT FOR FRIEND GOTO IF INLINE INT LONG MUTABLE NAMESPACE NEW OPERATOR PRIVATE PROTECTED PUBLIC REGISTER REINTERPRET_CAST RETURN SHORT SIGNED SIZEOF STATIC STATIC_CAST STRUCT SWITCH TEMPLATE THIS THROW TRY TYPEDEF TYPEID TYPENAME UNION UNSIGNED USING VIRTUAL VOID VOLATILE RESTRICT WHILE translation_unit_or_empty   : translation_unit\n                                    | empty\n     translation_unit    : translation_unit external_declaration\n                            | external_declaration\n     initializer : assignment_expression\n     initializer : '{' initializer_list_orempty '}'\n                    | '{' initializer_list ',' '}'\n     initializer_list    : initializer\n                            | initializer_list ',' initializer\n     init_declarator : declarator\n                        | declarator '=' initializer\n     init_declarator_list    : init_declarator\n                                | init_declarator_list ',' init_declarator\n    declaration_specifiers_orempty   : empty\n                                    | declaration_specifiers\n     empty :\n     declaration_specifiers  : type_specifier declaration_specifiers_orempty\n     type_specifier : VOID\n                       | CHAR\n                       | SHORT\n                       | INT\n                       | LONG\n                       | FLOAT\n                       | DOUBLE\n                       | SIGNED\n                       | UNSIGNED\n                       | BOOL\n                       | struct_specifier\n    declaration_list_orempty : empty\n                            | declaration_list\n     declaration : declaration_specifiers init_declarator_list_orempty ';'\n     declaration_list    : declaration\n                            | declaration_list declaration\n    identifier_list_orempty  : empty\n                            | identifier_list\n     identifier_list : identifier\n                        | identifier_list ',' identifier\n     identifier  : IDENTIFIER  jump_statement  : BREAK ';'  jump_statement  : CONTINUE ';'  jump_statement  : RETURN ';'\n                        | RETURN expression ';'\n    init_declarator_list_orempty  : empty\n                            | init_declarator_list\n    assignment_expression_orempty    : empty\n                                    | assignment_expression\n     assignment_operator : '='\n                            | MUL_ASSIGN\n                            | DIV_ASSIGN\n                            | MOD_ASSIGN\n                            | ADD_ASSIGN\n                            | SUB_ASSIGN\n                            | LEFT_ASSIGN\n                            | RIGHT_ASSIGN\n                            | AND_ASSIGN\n                            | XOR_ASSIGN\n                            | OR_ASSIGN  argument_expression_list    : assignment_expression\n                                    | argument_expression_list ',' assignment_expression\n     assignment_expression   : conditional_expression\n                                | unary_expression assignment_operator assignment_expression\n    block_item_list_orempty  : empty\n                            | block_item_list\n    constant_expression_orempty  : empty\n                            | constant_expression\n    specifier_qualifier_list_orempty  : empty\n                            | specifier_qualifier_list\n     block_item  : declaration\n                    | statement\n     block_item_list : block_item\n                        | block_item_list block_item\n    expression_orempty    : empty\n                        | expression\n     compound_statement : '{' block_item_list_orempty '}'  conditional_expression  : binary_expression\n     constant    : INTEGER_CONSTANT\n     constant    : CHAR_CONSTANT\n     constant    : FLOAT_CONSTANT\n     constant    : BOOL_CONSTANT\n     constant_expression : conditional_expression  declarator  : direct_declarator\n     declarator  : pointer direct_declarator\n     specifier_qualifier_list    : type_specifier specifier_qualifier_list_orempty\n     direct_declarator   : identifier\n     direct_declarator   : direct_declarator '[' assignment_expression_orempty ']'\n     direct_declarator   : direct_declarator '(' parameter_list ')'\n                            | direct_declarator '(' identifier_list_orempty ')'\n     external_declaration    : function_definition\n     external_declaration    : declaration\n     expression  : assignment_expression\n                    | expression ',' assignment_expression\n     expression_statement : expression_orempty ';'  function_definition : declaration_specifiers declarator declaration_list_orempty compound_statement\n     parameter_list  : parameter_declaration\n                        | parameter_list ',' parameter_declaration\n     parameter_declaration   : declaration_specifiers declarator\n     postfix_expression  : primary_expression  postfix_expression  : postfix_expression '[' expression ']'  postfix_expression  : postfix_expression '(' argument_expression_list ')'\n                            | postfix_expression '(' ')'\n     postfix_expression  : postfix_expression PTR_OP identifier\n     primary_expression  : identifier  primary_expression  : constant  primary_expression  : unified_string_literal\n     primary_expression  : '(' expression ')'  selection_statement : IF '(' expression ')' statement  selection_statement : IF '(' expression ')' statement ELSE statement  iteration_statement : WHILE '(' expression ')' statement  statement   : compound_statement\n                    | selection_statement\n                    | expression_statement\n                    | iteration_statement\n                    | jump_statement\n     struct_specifier   : STRUCT identifier\n     struct_specifier : STRUCT '{' struct_declaration_list '}'\n    initializer_list_orempty : empty\n                            | initializer_list\n     struct_specifier   : STRUCT identifier '{' struct_declaration_list '}'\n     struct_declaration_list     : struct_declaration\n                                    | struct_declaration_list struct_declaration\n     struct_declaration : specifier_qualifier_list struct_declarator_list ';'\n     struct_declarator_list  : declarator\n                                | struct_declarator_list ',' declarator\n     pointer : '*'\n                | '*' pointer\n     unary_operator : '&'\n                       | '*'\n                       | '+'\n                       | '-'\n                       | '~'\n                       | '!'  unary_expression    : postfix_expression  unary_expression    : unary_operator cast_expression\n     unified_string_literal  : STRING_CONSTANT\n                                | unified_string_literal STRING_CONSTANT\n     binary_expression   : cast_expression\n                            | binary_expression '*' binary_expression\n                            | binary_expression '/' binary_expression\n                            | binary_expression '%' binary_expression\n                            | binary_expression '+' binary_expression\n                            | binary_expression '-' binary_expression\n                            | binary_expression RIGHT_OP binary_expression\n                            | binary_expression LEFT_OP binary_expression\n                            | binary_expression '<' binary_expression\n                            | binary_expression LTE binary_expression\n                            | binary_expression GTE binary_expression\n                            | binary_expression '>' binary_expression\n                            | binary_expression EQ_OP binary_expression\n                            | binary_expression NEQ_OP binary_expression\n                            | binary_expression '&' binary_expression\n                            | binary_expression '|' binary_expression\n                            | binary_expression '^' binary_expression\n                            | binary_expression AND_OP binary_expression\n                            | binary_expression OR_OP binary_expression\n     cast_expression : unary_expression  cpp_advanced : ASM\n    | BUILT_IN_FUNCTION\n    | CATCH\n    | CLASS\n    | COMMENT1\n    | COMMENT2\n    | CONST_CAST\n    | DELETE\n    | DYNAMIC_CAST\n    | EXPLICIT\n    | EXPORT\n    | FRIEND\n    | MUTABLE\n    | NAMESPACE\n    | NEW\n    | OPERATOR\n    | PRIVATE\n    | PROTECTED\n    | PUBLIC\n    | REINTERPRET_CAST\n    | STATIC_CAST\n    | TEMPLATE\n    | THIS\n    | THROW\n    | TRY\n    | TYPEID\n    | TYPENAME\n    | USING\n    | VIRTUAL\n    | AUTO\n    | CONST\n    | DO\n    | ENUM\n    | EXTERN\n    | FOR\n    | STATIC\n    | SIZEOF\n    | UNION\n    | VOLATILE\n    | RESTRICT\n    | REGISTER\n    | INLINE\n    | GOTO\n    | TYPEDEF\n    | SWITCH\n    | CASE\n    | INC_OP\n    | DEC_OP\n    | DEFAULT\n    "
    
_lr_action_items = {'$end':([0,1,2,3,4,5,6,21,43,55,171,],[-16,0,-1,-2,-4,-88,-89,-3,-31,-93,-74,]),'VOID':([0,2,4,5,6,8,9,10,11,12,13,14,15,16,17,18,19,21,22,24,28,31,35,36,41,42,43,45,46,49,50,51,53,55,56,82,94,95,96,104,105,106,107,108,109,110,111,112,162,163,164,165,168,169,171,172,176,178,179,180,215,224,225,227,],[9,9,-4,-88,-89,9,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-3,9,-81,-84,-38,-114,9,9,-32,-31,9,-82,9,9,-119,9,-93,9,-33,9,-115,-120,9,-70,-68,-69,-109,-110,-111,-112,-113,-85,-86,9,-87,-118,-121,-74,-71,-92,-39,-40,-41,-42,-106,-108,-107,]),'CHAR':([0,2,4,5,6,8,9,10,11,12,13,14,15,16,17,18,19,21,22,24,28,31,35,36,41,42,43,45,46,49,50,51,53,55,56,82,94,95,96,104,105,106,107,108,109,110,111,112,162,163,164,165,168,169,171,172,176,178,179,180,215,224,225,227,],[10,10,-4,-88,-89,10,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-3,10,-81,-84,-38,-114,10,10,-32,-31,10,-82,10,10,-119,10,-93,10,-33,10,-115,-120,10,-70,-68,-69,-109,-110,-111,-112,-113,-85,-86,10,-87,-118,-121,-74,-71,-92,-39,-40,-41,-42,-106,-108,-107,]),'SHORT':([0,2,4,5,6,8,9,10,11,12,13,14,15,16,17,18,19,21,22,24,28,31,35,36,41,42,43,45,46,49,50,51,53,55,56,82,94,95,96,104,105,106,107,108,109,110,111,112,162,163,164,165,168,169,171,172,176,178,179,180,215,224,225,227,],[11,11,-4,-88,-89,11,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-3,11,-81,-84,-38,-114,11,11,-32,-31,11,-82,11,11,-119,11,-93,11,-33,11,-115,-120,11,-70,-68,-69,-109,-110,-111,-112,-113,-85,-86,11,-87,-118,-121,-74,-71,-92,-39,-40,-41,-42,-106,-108,-107,]),'INT':([0,2,4,5,6,8,9,10,11,12,13,14,15,16,17,18,19,21,22,24,28,31,35,36,41,42,43,45,46,49,50,51,53,55,56,82,94,95,96,104,105,106,107,108,109,110,111,112,162,163,164,165,168,169,171,172,176,178,179,180,215,224,225,227,],[12,12,-4,-88,-89,12,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-3,12,-81,-84,-38,-114,12,12,-32,-31,12,-82,12,12,-119,12,-93,12,-33,12,-115,-120,12,-70,-68,-69,-109,-110,-111,-112,-113,-85,-86,12,-87,-118,-121,-74,-71,-92,-39,-40,-41,-42,-106,-108,-107,]),'LONG':([0,2,4,5,6,8,9,10,11,12,13,14,15,16,17,18,19,21,22,24,28,31,35,36,41,42,43,45,46,49,50,51,53,55,56,82,94,95,96,104,105,106,107,108,109,110,111,112,162,163,164,165,168,169,171,172,176,178,179,180,215,224,225,227,],[13,13,-4,-88,-89,13,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-3,13,-81,-84,-38,-114,13,13,-32,-31,13,-82,13,13,-119,13,-93,13,-33,13,-115,-120,13,-70,-68,-69,-109,-110,-111,-112,-113,-85,-86,13,-87,-118,-121,-74,-71,-92,-39,-40,-41,-42,-106,-108,-107,]),'FLOAT':([0,2,4,5,6,8,9,10,11,12,13,14,15,16,17,18,19,21,22,24,28,31,35,36,41,42,43,45,46,49,50,51,53,55,56,82,94,95,96,104,105,106,107,108,109,110,111,112,162,163,164,165,168,169,171,172,176,178,179,180,215,224,225,227,],[14,14,-4,-88,-89,14,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-3,14,-81,-84,-38,-114,14,14,-32,-31,14,-82,14,14,-119,14,-93,14,-33,14,-115,-120,14,-70,-68,-69,-109,-110,-111,-112,-113,-85,-86,14,-87,-118,-121,-74,-71,-92,-39,-40,-41,-42,-106,-108,-107,]),'DOUBLE':([0,2,4,5,6,8,9,10,11,12,13,14,15,16,17,18,19,21,22,24,28,31,35,36,41,42,43,45,46,49,50,51,53,55,56,82,94,95,96,104,105,106,107,108,109,110,111,112,162,163,164,165,168,169,171,172,176,178,179,180,215,224,225,227,],[15,15,-4,-88,-89,15,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-3,15,-81,-84,-38,-114,15,15,-32,-31,15,-82,15,15,-119,15,-93,15,-33,15,-115,-120,15,-70,-68,-69,-109,-110,-111,-112,-113,-85,-86,15,-87,-118,-121,-74,-71,-92,-39,-40,-41,-42,-106,-108,-107,]),'SIGNED':([0,2,4,5,6,8,9,10,11,12,13,14,15,16,17,18,19,21,22,24,28,31,35,36,41,42,43,45,46,49,50,51,53,55,56,82,94,95,96,104,105,106,107,108,109,110,111,112,162,163,164,165,168,169,171,172,176,178,179,180,215,224,225,227,],[16,16,-4,-88,-89,16,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-3,16,-81,-84,-38,-114,16,16,-32,-31,16,-82,16,16,-119,16,-93,16,-33,16,-115,-120,16,-70,-68,-69,-109,-110,-111,-112,-113,-85,-86,16,-87,-118,-121,-74,-71,-92,-39,-40,-41,-42,-106,-108,-107,]),'UNSIGNED':([0,2,4,5,6,8,9,10,11,12,13,14,15,16,17,18,19,21,22,24,28,31,35,36,41,42,43,45,46,49,50,51,53,55,56,82,94,95,96,104,105,106,107,108,109,110,111,112,162,163,164,165,168,169,171,172,176,178,179,180,215,224,225,227,],[17,17,-4,-88,-89,17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-3,17,-81,-84,-38,-114,17,17,-32,-31,17,-82,17,17,-119,17,-93,17,-33,17,-115,-120,17,-70,-68,-69,-109,-110,-111,-112,-113,-85,-86,17,-87,-118,-121,-74,-71,-92,-39,-40,-41,-42,-106,-108,-107,]),'BOOL':([0,2,4,5,6,8,9,10,11,12,13,14,15,16,17,18,19,21,22,24,28,31,35,36,41,42,43,45,46,49,50,51,53,55,56,82,94,95,96,104,105,106,107,108,109,110,111,112,162,163,164,165,168,169,171,172,176,178,179,180,215,224,225,227,],[18,18,-4,-88,-89,18,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-3,18,-81,-84,-38,-114,18,18,-32,-31,18,-82,18,18,-119,18,-93,18,-33,18,-115,-120,18,-70,-68,-69,-109,-110,-111,-112,-113,-85,-86,18,-87,-118,-121,-74,-71,-92,-39,-40,-41,-42,-106,-108,-107,]),'STRUCT':([0,2,4,5,6,8,9,10,11,12,13,14,15,16,17,18,19,21,22,24,28,31,35,36,41,42,43,45,46,49,50,51,53,55,56,82,94,95,96,104,105,106,107,108,109,110,111,112,162,163,164,165,168,169,171,172,176,178,179,180,215,224,225,227,],[20,20,-4,-88,-89,20,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-3,20,-81,-84,-38,-114,20,20,-32,-31,20,-82,20,20,-119,20,-93,20,-33,20,-115,-120,20,-70,-68,-69,-109,-110,-111,-112,-113,-85,-86,20,-87,-118,-121,-74,-71,-92,-39,-40,-41,-42,-106,-108,-107,]),'*':([7,8,9,10,11,12,13,14,15,16,17,18,19,29,31,32,33,34,35,37,39,43,44,47,52,53,56,59,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,91,95,99,100,101,104,105,106,107,108,109,110,111,112,119,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,158,159,161,168,170,171,172,174,175,176,177,178,179,180,183,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,205,207,208,215,218,219,220,221,222,224,225,226,227,],[29,-16,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,29,-38,-17,-14,-15,-114,29,66,-31,66,29,29,-16,66,66,-155,137,-132,66,-136,-127,-128,-129,-126,-97,66,-102,-130,-131,-103,-104,-76,-77,-78,-79,-134,29,-115,-83,-66,-67,66,-70,-68,-69,-109,-110,-111,-112,-113,66,66,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,-133,-155,-135,-118,29,-74,-71,66,66,-92,66,-39,-40,-41,66,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,-100,-101,-105,-42,-98,-99,66,66,66,-106,-108,66,-107,]),';':([7,8,9,10,11,12,13,14,15,16,17,18,19,22,23,24,26,27,28,30,31,32,33,34,35,37,43,46,54,56,57,58,60,61,62,63,65,70,72,75,76,77,78,79,80,81,93,95,97,98,103,104,105,106,107,108,109,110,111,112,114,115,117,118,119,120,158,159,161,162,163,165,168,171,172,173,176,178,179,180,181,182,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,205,207,208,211,213,215,216,218,219,221,222,224,225,226,227,],[-16,-16,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-10,43,-81,-43,-44,-84,-12,-38,-17,-14,-15,-114,-16,-31,-82,-10,-16,-11,-5,-60,-155,-75,-132,-136,-97,-102,-103,-104,-76,-77,-78,-79,-134,-13,-115,169,-122,-72,-16,-70,-68,-69,-109,-110,-111,-112,-113,-73,176,178,179,180,-90,-133,-155,-135,-85,-86,-87,-118,-74,-71,-72,-92,-39,-40,-41,215,-6,-61,-137,-138,-139,-140,-141,-142,-143,-144,-145,-146,-147,-148,-149,-150,-151,-152,-153,-154,-100,-101,-105,-123,-91,-42,-7,-98,-99,-16,-16,-106,-108,-16,-107,]),'IDENTIFIER':([7,8,9,10,11,12,13,14,15,16,17,18,19,20,25,29,31,32,33,34,35,37,39,43,44,45,47,48,52,53,56,59,64,66,67,68,69,71,73,74,91,95,99,100,101,104,105,106,107,108,109,110,111,112,119,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,166,168,170,171,172,174,175,176,177,178,179,180,183,215,220,221,222,224,225,226,227,],[31,-16,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,31,31,-124,-38,-17,-14,-15,-114,31,31,-31,31,31,31,-125,31,-16,31,31,31,-127,-128,-129,-126,31,-130,-131,31,-115,-83,-66,-67,31,-70,-68,-69,-109,-110,-111,-112,-113,31,31,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,-118,31,-74,-71,31,31,-92,31,-39,-40,-41,31,-42,31,31,31,-106,-108,31,-107,]),'{':([20,22,24,28,31,35,38,39,40,41,42,43,46,56,59,82,104,105,106,107,108,109,110,111,112,162,163,165,171,172,176,178,179,180,183,215,221,222,224,225,226,227,],[36,-16,-81,-84,-38,49,56,59,-29,-30,-32,-31,-82,56,59,-33,56,-70,-68,-69,-109,-110,-111,-112,-113,-85,-86,-87,-74,-71,-92,-39,-40,-41,59,-42,56,56,-106,-108,56,-107,]),',':([22,24,27,28,30,31,46,54,57,58,60,61,62,63,65,70,72,75,76,77,78,79,80,81,86,88,90,92,93,97,98,114,120,122,124,158,159,160,161,162,163,165,167,181,182,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,216,217,218,219,223,],[-10,-81,47,-84,-12,-38,-82,-10,-11,-5,-60,-155,-75,-132,-136,-97,-102,-103,-104,-76,-77,-78,-79,-134,164,-94,166,-36,-13,170,-122,175,-90,183,-8,-133,-155,175,-135,-85,-86,-87,-96,175,-6,-61,-137,-138,-139,-140,-141,-142,-143,-144,-145,-146,-147,-148,-149,-150,-151,-152,-153,-154,175,220,-100,-58,-101,-105,-95,-37,-123,175,-91,175,-7,-9,-98,-99,-59,]),'=':([22,24,28,31,46,54,61,63,70,72,75,76,77,78,79,80,81,158,159,161,162,163,165,205,207,208,218,219,],[39,-81,-84,-38,-82,39,126,-132,-97,-102,-103,-104,-76,-77,-78,-79,-134,-133,-155,-135,-85,-86,-87,-100,-101,-105,-98,-99,]),')':([24,28,31,45,46,60,61,62,63,65,70,72,75,76,77,78,79,80,81,86,87,88,89,90,92,120,156,158,159,160,161,162,163,165,167,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,204,205,206,207,208,209,210,212,213,214,218,219,223,],[-81,-84,-38,-16,-82,-60,-155,-75,-132,-136,-97,-102,-103,-104,-76,-77,-78,-79,-134,163,165,-94,-34,-35,-36,-90,205,-133,-155,208,-135,-85,-86,-87,-96,-61,-137,-138,-139,-140,-141,-142,-143,-144,-145,-146,-147,-148,-149,-150,-151,-152,-153,-154,219,-100,-58,-101,-105,-95,-37,221,-91,222,-98,-99,-59,]),'[':([24,28,31,46,63,70,72,75,76,77,78,79,80,81,161,162,163,165,205,207,208,218,219,],[44,-84,-38,44,155,-97,-102,-103,-104,-76,-77,-78,-79,-134,-135,-85,-86,-87,-100,-101,-105,-98,-99,]),'(':([24,28,31,39,43,44,46,56,59,63,64,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,104,105,106,107,108,109,110,111,112,113,116,119,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,161,162,163,165,171,172,174,175,176,177,178,179,180,183,205,207,208,215,218,219,220,221,222,224,225,226,227,],[45,-84,-38,71,-31,71,45,71,71,156,71,-127,-128,-129,-126,-97,71,-102,-130,-131,-103,-104,-76,-77,-78,-79,-134,71,-70,-68,-69,-109,-110,-111,-112,-113,174,177,71,71,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,-135,-85,-86,-87,-74,-71,71,71,-92,71,-39,-40,-41,71,-100,-101,-105,-42,-98,-99,71,71,71,-106,-108,71,-107,]),'PTR_OP':([31,63,70,72,75,76,77,78,79,80,81,161,205,207,208,218,219,],[-38,157,-97,-102,-103,-104,-76,-77,-78,-79,-134,-135,-100,-101,-105,-98,-99,]),'MUL_ASSIGN':([31,61,63,70,72,75,76,77,78,79,80,81,158,159,161,205,207,208,218,219,],[-38,127,-132,-97,-102,-103,-104,-76,-77,-78,-79,-134,-133,-155,-135,-100,-101,-105,-98,-99,]),'DIV_ASSIGN':([31,61,63,70,72,75,76,77,78,79,80,81,158,159,161,205,207,208,218,219,],[-38,128,-132,-97,-102,-103,-104,-76,-77,-78,-79,-134,-133,-155,-135,-100,-101,-105,-98,-99,]),'MOD_ASSIGN':([31,61,63,70,72,75,76,77,78,79,80,81,158,159,161,205,207,208,218,219,],[-38,129,-132,-97,-102,-103,-104,-76,-77,-78,-79,-134,-133,-155,-135,-100,-101,-105,-98,-99,]),'ADD_ASSIGN':([31,61,63,70,72,75,76,77,78,79,80,81,158,159,161,205,207,208,218,219,],[-38,130,-132,-97,-102,-103,-104,-76,-77,-78,-79,-134,-133,-155,-135,-100,-101,-105,-98,-99,]),'SUB_ASSIGN':([31,61,63,70,72,75,76,77,78,79,80,81,158,159,161,205,207,208,218,219,],[-38,131,-132,-97,-102,-103,-104,-76,-77,-78,-79,-134,-133,-155,-135,-100,-101,-105,-98,-99,]),'LEFT_ASSIGN':([31,61,63,70,72,75,76,77,78,79,80,81,158,159,161,205,207,208,218,219,],[-38,132,-132,-97,-102,-103,-104,-76,-77,-78,-79,-134,-133,-155,-135,-100,-101,-105,-98,-99,]),'RIGHT_ASSIGN':([31,61,63,70,72,75,76,77,78,79,80,81,158,159,161,205,207,208,218,219,],[-38,133,-132,-97,-102,-103,-104,-76,-77,-78,-79,-134,-133,-155,-135,-100,-101,-105,-98,-99,]),'AND_ASSIGN':([31,61,63,70,72,75,76,77,78,79,80,81,158,159,161,205,207,208,218,219,],[-38,134,-132,-97,-102,-103,-104,-76,-77,-78,-79,-134,-133,-155,-135,-100,-101,-105,-98,-99,]),'XOR_ASSIGN':([31,61,63,70,72,75,76,77,78,79,80,81,158,159,161,205,207,208,218,219,],[-38,135,-132,-97,-102,-103,-104,-76,-77,-78,-79,-134,-133,-155,-135,-100,-101,-105,-98,-99,]),'OR_ASSIGN':([31,61,63,70,72,75,76,77,78,79,80,81,158,159,161,205,207,208,218,219,],[-38,136,-132,-97,-102,-103,-104,-76,-77,-78,-79,-134,-133,-155,-135,-100,-101,-105,-98,-99,]),'/':([31,61,62,63,65,70,72,75,76,77,78,79,80,81,158,159,161,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,205,207,208,218,219,],[-38,-155,138,-132,-136,-97,-102,-103,-104,-76,-77,-78,-79,-134,-133,-155,-135,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,-100,-101,-105,-98,-99,]),'%':([31,61,62,63,65,70,72,75,76,77,78,79,80,81,158,159,161,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,205,207,208,218,219,],[-38,-155,139,-132,-136,-97,-102,-103,-104,-76,-77,-78,-79,-134,-133,-155,-135,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,-100,-101,-105,-98,-99,]),'+':([31,39,43,44,56,59,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,104,105,106,107,108,109,110,111,112,119,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,158,159,161,171,172,174,175,176,177,178,179,180,183,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,205,207,208,215,218,219,220,221,222,224,225,226,227,],[-38,67,-31,67,67,67,-155,140,-132,67,-136,-127,-128,-129,-126,-97,67,-102,-130,-131,-103,-104,-76,-77,-78,-79,-134,67,-70,-68,-69,-109,-110,-111,-112,-113,67,67,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,-133,-155,-135,-74,-71,67,67,-92,67,-39,-40,-41,67,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,-100,-101,-105,-42,-98,-99,67,67,67,-106,-108,67,-107,]),'-':([31,39,43,44,56,59,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,104,105,106,107,108,109,110,111,112,119,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,158,159,161,171,172,174,175,176,177,178,179,180,183,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,205,207,208,215,218,219,220,221,222,224,225,226,227,],[-38,68,-31,68,68,68,-155,141,-132,68,-136,-127,-128,-129,-126,-97,68,-102,-130,-131,-103,-104,-76,-77,-78,-79,-134,68,-70,-68,-69,-109,-110,-111,-112,-113,68,68,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,-133,-155,-135,-74,-71,68,68,-92,68,-39,-40,-41,68,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,-100,-101,-105,-42,-98,-99,68,68,68,-106,-108,68,-107,]),'RIGHT_OP':([31,61,62,63,65,70,72,75,76,77,78,79,80,81,158,159,161,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,205,207,208,218,219,],[-38,-155,142,-132,-136,-97,-102,-103,-104,-76,-77,-78,-79,-134,-133,-155,-135,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,-100,-101,-105,-98,-99,]),'LEFT_OP':([31,61,62,63,65,70,72,75,76,77,78,79,80,81,158,159,161,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,205,207,208,218,219,],[-38,-155,143,-132,-136,-97,-102,-103,-104,-76,-77,-78,-79,-134,-133,-155,-135,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,-100,-101,-105,-98,-99,]),'<':([31,61,62,63,65,70,72,75,76,77,78,79,80,81,158,159,161,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,205,207,208,218,219,],[-38,-155,144,-132,-136,-97,-102,-103,-104,-76,-77,-78,-79,-134,-133,-155,-135,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,-100,-101,-105,-98,-99,]),'LTE':([31,61,62,63,65,70,72,75,76,77,78,79,80,81,158,159,161,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,205,207,208,218,219,],[-38,-155,145,-132,-136,-97,-102,-103,-104,-76,-77,-78,-79,-134,-133,-155,-135,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,-100,-101,-105,-98,-99,]),'GTE':([31,61,62,63,65,70,72,75,76,77,78,79,80,81,158,159,161,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,205,207,208,218,219,],[-38,-155,146,-132,-136,-97,-102,-103,-104,-76,-77,-78,-79,-134,-133,-155,-135,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,-100,-101,-105,-98,-99,]),'>':([31,61,62,63,65,70,72,75,76,77,78,79,80,81,158,159,161,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,205,207,208,218,219,],[-38,-155,147,-132,-136,-97,-102,-103,-104,-76,-77,-78,-79,-134,-133,-155,-135,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,-100,-101,-105,-98,-99,]),'EQ_OP':([31,61,62,63,65,70,72,75,76,77,78,79,80,81,158,159,161,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,205,207,208,218,219,],[-38,-155,148,-132,-136,-97,-102,-103,-104,-76,-77,-78,-79,-134,-133,-155,-135,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,-100,-101,-105,-98,-99,]),'NEQ_OP':([31,61,62,63,65,70,72,75,76,77,78,79,80,81,158,159,161,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,205,207,208,218,219,],[-38,-155,149,-132,-136,-97,-102,-103,-104,-76,-77,-78,-79,-134,-133,-155,-135,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,-100,-101,-105,-98,-99,]),'&':([31,39,43,44,56,59,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,104,105,106,107,108,109,110,111,112,119,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,158,159,161,171,172,174,175,176,177,178,179,180,183,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,205,207,208,215,218,219,220,221,222,224,225,226,227,],[-38,69,-31,69,69,69,-155,150,-132,69,-136,-127,-128,-129,-126,-97,69,-102,-130,-131,-103,-104,-76,-77,-78,-79,-134,69,-70,-68,-69,-109,-110,-111,-112,-113,69,69,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,-133,-155,-135,-74,-71,69,69,-92,69,-39,-40,-41,69,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,-100,-101,-105,-42,-98,-99,69,69,69,-106,-108,69,-107,]),'|':([31,61,62,63,65,70,72,75,76,77,78,79,80,81,158,159,161,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,205,207,208,218,219,],[-38,-155,151,-132,-136,-97,-102,-103,-104,-76,-77,-78,-79,-134,-133,-155,-135,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,-100,-101,-105,-98,-99,]),'^':([31,61,62,63,65,70,72,75,76,77,78,79,80,81,158,159,161,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,205,207,208,218,219,],[-38,-155,152,-132,-136,-97,-102,-103,-104,-76,-77,-78,-79,-134,-133,-155,-135,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,-100,-101,-105,-98,-99,]),'AND_OP':([31,61,62,63,65,70,72,75,76,77,78,79,80,81,158,159,161,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,205,207,208,218,219,],[-38,-155,153,-132,-136,-97,-102,-103,-104,-76,-77,-78,-79,-134,-133,-155,-135,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,-100,-101,-105,-98,-99,]),'OR_OP':([31,61,62,63,65,70,72,75,76,77,78,79,80,81,158,159,161,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,205,207,208,218,219,],[-38,-155,154,-132,-136,-97,-102,-103,-104,-76,-77,-78,-79,-134,-133,-155,-135,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,-100,-101,-105,-98,-99,]),']':([31,44,60,61,62,63,65,70,72,75,76,77,78,79,80,81,83,84,85,120,158,159,161,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,205,207,208,213,218,219,],[-38,-16,-60,-155,-75,-132,-136,-97,-102,-103,-104,-76,-77,-78,-79,-134,162,-45,-46,-90,-133,-155,-135,-61,-137,-138,-139,-140,-141,-142,-143,-144,-145,-146,-147,-148,-149,-150,-151,-152,-153,-154,218,-100,-101,-105,-91,-98,-99,]),'}':([31,43,50,51,56,58,59,60,61,62,63,65,70,72,75,76,77,78,79,80,81,94,96,102,103,104,105,106,107,108,109,110,111,112,121,122,123,124,158,159,161,169,171,172,176,178,179,180,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,205,207,208,215,216,217,218,219,224,225,227,],[-38,-31,95,-119,-16,-5,-16,-60,-155,-75,-132,-136,-97,-102,-103,-104,-76,-77,-78,-79,-134,168,-120,171,-62,-63,-70,-68,-69,-109,-110,-111,-112,-113,182,-117,-116,-8,-133,-155,-135,-121,-74,-71,-92,-39,-40,-41,-6,216,-61,-137,-138,-139,-140,-141,-142,-143,-144,-145,-146,-147,-148,-149,-150,-151,-152,-153,-154,-100,-101,-105,-42,-7,-9,-98,-99,-106,-108,-107,]),'~':([39,43,44,56,59,64,66,67,68,69,71,73,74,104,105,106,107,108,109,110,111,112,119,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,171,172,174,175,176,177,178,179,180,183,215,220,221,222,224,225,226,227,],[73,-31,73,73,73,73,-127,-128,-129,-126,73,-130,-131,73,-70,-68,-69,-109,-110,-111,-112,-113,73,73,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,-74,-71,73,73,-92,73,-39,-40,-41,73,-42,73,73,73,-106,-108,73,-107,]),'!':([39,43,44,56,59,64,66,67,68,69,71,73,74,104,105,106,107,108,109,110,111,112,119,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,171,172,174,175,176,177,178,179,180,183,215,220,221,222,224,225,226,227,],[74,-31,74,74,74,74,-127,-128,-129,-126,74,-130,-131,74,-70,-68,-69,-109,-110,-111,-112,-113,74,74,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,-74,-71,74,74,-92,74,-39,-40,-41,74,-42,74,74,74,-106,-108,74,-107,]),'INTEGER_CONSTANT':([39,43,44,56,59,64,66,67,68,69,71,73,74,104,105,106,107,108,109,110,111,112,119,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,171,172,174,175,176,177,178,179,180,183,215,220,221,222,224,225,226,227,],[77,-31,77,77,77,77,-127,-128,-129,-126,77,-130,-131,77,-70,-68,-69,-109,-110,-111,-112,-113,77,77,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,-74,-71,77,77,-92,77,-39,-40,-41,77,-42,77,77,77,-106,-108,77,-107,]),'CHAR_CONSTANT':([39,43,44,56,59,64,66,67,68,69,71,73,74,104,105,106,107,108,109,110,111,112,119,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,171,172,174,175,176,177,178,179,180,183,215,220,221,222,224,225,226,227,],[78,-31,78,78,78,78,-127,-128,-129,-126,78,-130,-131,78,-70,-68,-69,-109,-110,-111,-112,-113,78,78,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,-74,-71,78,78,-92,78,-39,-40,-41,78,-42,78,78,78,-106,-108,78,-107,]),'FLOAT_CONSTANT':([39,43,44,56,59,64,66,67,68,69,71,73,74,104,105,106,107,108,109,110,111,112,119,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,171,172,174,175,176,177,178,179,180,183,215,220,221,222,224,225,226,227,],[79,-31,79,79,79,79,-127,-128,-129,-126,79,-130,-131,79,-70,-68,-69,-109,-110,-111,-112,-113,79,79,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,-74,-71,79,79,-92,79,-39,-40,-41,79,-42,79,79,79,-106,-108,79,-107,]),'BOOL_CONSTANT':([39,43,44,56,59,64,66,67,68,69,71,73,74,104,105,106,107,108,109,110,111,112,119,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,171,172,174,175,176,177,178,179,180,183,215,220,221,222,224,225,226,227,],[80,-31,80,80,80,80,-127,-128,-129,-126,80,-130,-131,80,-70,-68,-69,-109,-110,-111,-112,-113,80,80,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,-74,-71,80,80,-92,80,-39,-40,-41,80,-42,80,80,80,-106,-108,80,-107,]),'STRING_CONSTANT':([39,43,44,56,59,64,66,67,68,69,71,73,74,76,81,104,105,106,107,108,109,110,111,112,119,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,161,171,172,174,175,176,177,178,179,180,183,215,220,221,222,224,225,226,227,],[81,-31,81,81,81,81,-127,-128,-129,-126,81,-130,-131,161,-134,81,-70,-68,-69,-109,-110,-111,-112,-113,81,81,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,-135,-74,-71,81,81,-92,81,-39,-40,-41,81,-42,81,81,81,-106,-108,81,-107,]),'IF':([43,56,104,105,106,107,108,109,110,111,112,171,172,176,178,179,180,215,221,222,224,225,226,227,],[-31,113,113,-70,-68,-69,-109,-110,-111,-112,-113,-74,-71,-92,-39,-40,-41,-42,113,113,-106,-108,113,-107,]),'WHILE':([43,56,104,105,106,107,108,109,110,111,112,171,172,176,178,179,180,215,221,222,224,225,226,227,],[-31,116,116,-70,-68,-69,-109,-110,-111,-112,-113,-74,-71,-92,-39,-40,-41,-42,116,116,-106,-108,116,-107,]),'BREAK':([43,56,104,105,106,107,108,109,110,111,112,171,172,176,178,179,180,215,221,222,224,225,226,227,],[-31,117,117,-70,-68,-69,-109,-110,-111,-112,-113,-74,-71,-92,-39,-40,-41,-42,117,117,-106,-108,117,-107,]),'CONTINUE':([43,56,104,105,106,107,108,109,110,111,112,171,172,176,178,179,180,215,221,222,224,225,226,227,],[-31,118,118,-70,-68,-69,-109,-110,-111,-112,-113,-74,-71,-92,-39,-40,-41,-42,118,118,-106,-108,118,-107,]),'RETURN':([43,56,104,105,106,107,108,109,110,111,112,171,172,176,178,179,180,215,221,222,224,225,226,227,],[-31,119,119,-70,-68,-69,-109,-110,-111,-112,-113,-74,-71,-92,-39,-40,-41,-42,119,119,-106,-108,119,-107,]),'ELSE':([108,109,110,111,112,171,176,178,179,180,215,224,225,227,],[-109,-110,-111,-112,-113,-74,-92,-39,-40,-41,-42,226,-108,-107,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'translation_unit_or_empty':([0,],[1,]),'translation_unit':([0,],[2,]),'empty':([0,7,8,22,37,44,45,53,56,59,104,221,222,226,],[3,26,33,40,26,84,89,100,103,123,173,173,173,173,]),'external_declaration':([0,2,],[4,21,]),'function_definition':([0,2,],[5,5,]),'declaration':([0,2,22,41,56,104,],[6,6,42,82,106,106,]),'declaration_specifiers':([0,2,8,22,41,45,56,104,164,],[7,7,34,37,37,91,37,37,91,]),'type_specifier':([0,2,8,22,36,41,45,49,50,53,56,94,104,164,],[8,8,8,8,53,8,8,53,53,53,8,53,8,8,]),'struct_specifier':([0,2,8,22,36,41,45,49,50,53,56,94,104,164,],[19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'declarator':([7,37,47,52,91,170,],[22,54,54,98,167,211,]),'init_declarator_list_orempty':([7,37,],[23,23,]),'direct_declarator':([7,25,37,47,52,91,170,],[24,46,24,24,24,24,24,]),'pointer':([7,29,37,47,52,91,170,],[25,48,25,25,25,25,25,]),'init_declarator_list':([7,37,],[27,27,]),'identifier':([7,20,25,37,39,44,45,47,52,56,59,64,71,91,104,119,125,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,166,170,174,175,177,183,220,221,222,226,],[28,35,28,28,72,72,92,28,28,72,72,72,72,28,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,207,210,28,72,72,72,72,72,72,72,72,]),'init_declarator':([7,37,47,],[30,30,93,]),'declaration_specifiers_orempty':([8,],[32,]),'declaration_list_orempty':([22,],[38,]),'declaration_list':([22,],[41,]),'struct_declaration_list':([36,49,],[50,94,]),'struct_declaration':([36,49,50,94,],[51,51,96,96,]),'specifier_qualifier_list':([36,49,50,53,94,],[52,52,52,101,52,]),'compound_statement':([38,56,104,221,222,226,],[55,108,108,108,108,108,]),'initializer':([39,59,183,],[57,124,217,]),'assignment_expression':([39,44,56,59,71,104,119,125,155,156,174,175,177,183,220,221,222,226,],[58,85,120,58,120,120,120,184,120,206,120,213,120,58,223,120,120,120,]),'conditional_expression':([39,44,56,59,71,104,119,125,155,156,174,175,177,183,220,221,222,226,],[60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,]),'unary_expression':([39,44,56,59,64,71,104,119,125,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,174,175,177,183,220,221,222,226,],[61,61,61,61,159,61,61,61,61,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,61,61,61,61,61,61,61,61,61,61,]),'binary_expression':([39,44,56,59,71,104,119,125,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,174,175,177,183,220,221,222,226,],[62,62,62,62,62,62,62,62,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,62,62,62,62,62,62,62,62,62,62,]),'postfix_expression':([39,44,56,59,64,71,104,119,125,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,174,175,177,183,220,221,222,226,],[63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,]),'unary_operator':([39,44,56,59,64,71,104,119,125,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,174,175,177,183,220,221,222,226,],[64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,]),'cast_expression':([39,44,56,59,64,71,104,119,125,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,174,175,177,183,220,221,222,226,],[65,65,65,65,158,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,]),'primary_expression':([39,44,56,59,64,71,104,119,125,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,174,175,177,183,220,221,222,226,],[70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,]),'constant':([39,44,56,59,64,71,104,119,125,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,174,175,177,183,220,221,222,226,],[75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,]),'unified_string_literal':([39,44,56,59,64,71,104,119,125,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,174,175,177,183,220,221,222,226,],[76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,]),'assignment_expression_orempty':([44,],[83,]),'parameter_list':([45,],[86,]),'identifier_list_orempty':([45,],[87,]),'parameter_declaration':([45,164,],[88,209,]),'identifier_list':([45,],[90,]),'struct_declarator_list':([52,],[97,]),'specifier_qualifier_list_orempty':([53,],[99,]),'block_item_list_orempty':([56,],[102,]),'block_item_list':([56,],[104,]),'block_item':([56,104,],[105,172,]),'statement':([56,104,221,222,226,],[107,107,224,225,227,]),'selection_statement':([56,104,221,222,226,],[109,109,109,109,109,]),'expression_statement':([56,104,221,222,226,],[110,110,110,110,110,]),'iteration_statement':([56,104,221,222,226,],[111,111,111,111,111,]),'jump_statement':([56,104,221,222,226,],[112,112,112,112,112,]),'expression':([56,71,104,119,155,174,177,221,222,226,],[114,160,114,181,203,212,214,114,114,114,]),'expression_orempty':([56,104,221,222,226,],[115,115,115,115,115,]),'initializer_list_orempty':([59,],[121,]),'initializer_list':([59,],[122,]),'assignment_operator':([61,],[125,]),'argument_expression_list':([156,],[204,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> translation_unit_or_empty","S'",1,None,None,None),
  ('translation_unit_or_empty -> translation_unit','translation_unit_or_empty',1,'p_translation_unit_or_empty','myYacc3.py',9),
  ('translation_unit_or_empty -> empty','translation_unit_or_empty',1,'p_translation_unit_or_empty','myYacc3.py',10),
  ('translation_unit -> translation_unit external_declaration','translation_unit',2,'p_translation_unit','myYacc3.py',15),
  ('translation_unit -> external_declaration','translation_unit',1,'p_translation_unit','myYacc3.py',16),
  ('initializer -> assignment_expression','initializer',1,'p_initializer_ass','myYacc3.py',25),
  ('initializer -> { initializer_list_orempty }','initializer',3,'p_initializer_in','myYacc3.py',30),
  ('initializer -> { initializer_list , }','initializer',4,'p_initializer_in','myYacc3.py',31),
  ('initializer_list -> initializer','initializer_list',1,'p_initializer_list','myYacc3.py',39),
  ('initializer_list -> initializer_list , initializer','initializer_list',3,'p_initializer_list','myYacc3.py',40),
  ('init_declarator -> declarator','init_declarator',1,'p_init_declarator','myYacc3.py',51),
  ('init_declarator -> declarator = initializer','init_declarator',3,'p_init_declarator','myYacc3.py',52),
  ('init_declarator_list -> init_declarator','init_declarator_list',1,'p_init_declarator_list_idec','myYacc3.py',60),
  ('init_declarator_list -> init_declarator_list , init_declarator','init_declarator_list',3,'p_init_declarator_list_idec','myYacc3.py',61),
  ('declaration_specifiers_orempty -> empty','declaration_specifiers_orempty',1,'p_declaration_specifiers_orempty','myYacc3.py',70),
  ('declaration_specifiers_orempty -> declaration_specifiers','declaration_specifiers_orempty',1,'p_declaration_specifiers_orempty','myYacc3.py',71),
  ('empty -> <empty>','empty',0,'p_empty','myYacc3.py',77),
  ('declaration_specifiers -> type_specifier declaration_specifiers_orempty','declaration_specifiers',2,'p_declaration_specifiers_td','myYacc3.py',83),
  ('type_specifier -> VOID','type_specifier',1,'p_type_specifier','myYacc3.py',93),
  ('type_specifier -> CHAR','type_specifier',1,'p_type_specifier','myYacc3.py',94),
  ('type_specifier -> SHORT','type_specifier',1,'p_type_specifier','myYacc3.py',95),
  ('type_specifier -> INT','type_specifier',1,'p_type_specifier','myYacc3.py',96),
  ('type_specifier -> LONG','type_specifier',1,'p_type_specifier','myYacc3.py',97),
  ('type_specifier -> FLOAT','type_specifier',1,'p_type_specifier','myYacc3.py',98),
  ('type_specifier -> DOUBLE','type_specifier',1,'p_type_specifier','myYacc3.py',99),
  ('type_specifier -> SIGNED','type_specifier',1,'p_type_specifier','myYacc3.py',100),
  ('type_specifier -> UNSIGNED','type_specifier',1,'p_type_specifier','myYacc3.py',101),
  ('type_specifier -> BOOL','type_specifier',1,'p_type_specifier','myYacc3.py',102),
  ('type_specifier -> struct_specifier','type_specifier',1,'p_type_specifier','myYacc3.py',103),
  ('declaration_list_orempty -> empty','declaration_list_orempty',1,'p_declaration_list_orempty','myYacc3.py',108),
  ('declaration_list_orempty -> declaration_list','declaration_list_orempty',1,'p_declaration_list_orempty','myYacc3.py',109),
  ('declaration -> declaration_specifiers init_declarator_list_orempty ;','declaration',3,'p_declaration','myYacc3.py',114),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','myYacc3.py',150),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list','myYacc3.py',151),
  ('identifier_list_orempty -> empty','identifier_list_orempty',1,'p_identifier_list_orempty','myYacc3.py',160),
  ('identifier_list_orempty -> identifier_list','identifier_list_orempty',1,'p_identifier_list_orempty','myYacc3.py',161),
  ('identifier_list -> identifier','identifier_list',1,'p_identifier_list','myYacc3.py',166),
  ('identifier_list -> identifier_list , identifier','identifier_list',3,'p_identifier_list','myYacc3.py',167),
  ('identifier -> IDENTIFIER','identifier',1,'p_identifier','myYacc3.py',176),
  ('jump_statement -> BREAK ;','jump_statement',2,'p_jump_statement_b','myYacc3.py',182),
  ('jump_statement -> CONTINUE ;','jump_statement',2,'p_jump_statement_c','myYacc3.py',186),
  ('jump_statement -> RETURN ;','jump_statement',2,'p_jump_statement_r','myYacc3.py',190),
  ('jump_statement -> RETURN expression ;','jump_statement',3,'p_jump_statement_r','myYacc3.py',191),
  ('init_declarator_list_orempty -> empty','init_declarator_list_orempty',1,'p_init_declarator_list_orempty','myYacc3.py',202),
  ('init_declarator_list_orempty -> init_declarator_list','init_declarator_list_orempty',1,'p_init_declarator_list_orempty','myYacc3.py',203),
  ('assignment_expression_orempty -> empty','assignment_expression_orempty',1,'p_assignment_expression_orempty','myYacc3.py',208),
  ('assignment_expression_orempty -> assignment_expression','assignment_expression_orempty',1,'p_assignment_expression_orempty','myYacc3.py',209),
  ('assignment_operator -> =','assignment_operator',1,'p_assignment_operator','myYacc3.py',215),
  ('assignment_operator -> MUL_ASSIGN','assignment_operator',1,'p_assignment_operator','myYacc3.py',216),
  ('assignment_operator -> DIV_ASSIGN','assignment_operator',1,'p_assignment_operator','myYacc3.py',217),
  ('assignment_operator -> MOD_ASSIGN','assignment_operator',1,'p_assignment_operator','myYacc3.py',218),
  ('assignment_operator -> ADD_ASSIGN','assignment_operator',1,'p_assignment_operator','myYacc3.py',219),
  ('assignment_operator -> SUB_ASSIGN','assignment_operator',1,'p_assignment_operator','myYacc3.py',220),
  ('assignment_operator -> LEFT_ASSIGN','assignment_operator',1,'p_assignment_operator','myYacc3.py',221),
  ('assignment_operator -> RIGHT_ASSIGN','assignment_operator',1,'p_assignment_operator','myYacc3.py',222),
  ('assignment_operator -> AND_ASSIGN','assignment_operator',1,'p_assignment_operator','myYacc3.py',223),
  ('assignment_operator -> XOR_ASSIGN','assignment_operator',1,'p_assignment_operator','myYacc3.py',224),
  ('assignment_operator -> OR_ASSIGN','assignment_operator',1,'p_assignment_operator','myYacc3.py',225),
  ('argument_expression_list -> assignment_expression','argument_expression_list',1,'p_argument_expression_list','myYacc3.py',229),
  ('argument_expression_list -> argument_expression_list , assignment_expression','argument_expression_list',3,'p_argument_expression_list','myYacc3.py',230),
  ('assignment_expression -> conditional_expression','assignment_expression',1,'p_assignment_expression','myYacc3.py',239),
  ('assignment_expression -> unary_expression assignment_operator assignment_expression','assignment_expression',3,'p_assignment_expression','myYacc3.py',240),
  ('block_item_list_orempty -> empty','block_item_list_orempty',1,'p_block_item_list_orempty','myYacc3.py',249),
  ('block_item_list_orempty -> block_item_list','block_item_list_orempty',1,'p_block_item_list_orempty','myYacc3.py',250),
  ('constant_expression_orempty -> empty','constant_expression_orempty',1,'p_constant_expression_orempty','myYacc3.py',255),
  ('constant_expression_orempty -> constant_expression','constant_expression_orempty',1,'p_constant_expression_orempty','myYacc3.py',256),
  ('specifier_qualifier_list_orempty -> empty','specifier_qualifier_list_orempty',1,'p_specifier_qualifier_list_orempty','myYacc3.py',261),
  ('specifier_qualifier_list_orempty -> specifier_qualifier_list','specifier_qualifier_list_orempty',1,'p_specifier_qualifier_list_orempty','myYacc3.py',262),
  ('block_item -> declaration','block_item',1,'p_block_item','myYacc3.py',268),
  ('block_item -> statement','block_item',1,'p_block_item','myYacc3.py',269),
  ('block_item_list -> block_item','block_item_list',1,'p_block_item_list','myYacc3.py',275),
  ('block_item_list -> block_item_list block_item','block_item_list',2,'p_block_item_list','myYacc3.py',276),
  ('expression_orempty -> empty','expression_orempty',1,'p_expression_orempty','myYacc3.py',288),
  ('expression_orempty -> expression','expression_orempty',1,'p_expression_orempty','myYacc3.py',289),
  ('compound_statement -> { block_item_list_orempty }','compound_statement',3,'p_compound_statement','myYacc3.py',294),
  ('conditional_expression -> binary_expression','conditional_expression',1,'p_conditional_expression','myYacc3.py',299),
  ('constant -> INTEGER_CONSTANT','constant',1,'p_constant_int','myYacc3.py',305),
  ('constant -> CHAR_CONSTANT','constant',1,'p_constant_char','myYacc3.py',311),
  ('constant -> FLOAT_CONSTANT','constant',1,'p_constant_float','myYacc3.py',317),
  ('constant -> BOOL_CONSTANT','constant',1,'p_constant_bool','myYacc3.py',323),
  ('constant_expression -> conditional_expression','constant_expression',1,'p_constant_expression','myYacc3.py',329),
  ('declarator -> direct_declarator','declarator',1,'p_declarator_direct','myYacc3.py',333),
  ('declarator -> pointer direct_declarator','declarator',2,'p_declarator_pd','myYacc3.py',338),
  ('specifier_qualifier_list -> type_specifier specifier_qualifier_list_orempty','specifier_qualifier_list',2,'p_specifier_qualifier_list_ts','myYacc3.py',343),
  ('direct_declarator -> identifier','direct_declarator',1,'p_direct_declarator_1','myYacc3.py',354),
  ('direct_declarator -> direct_declarator [ assignment_expression_orempty ]','direct_declarator',4,'p_direct_declarator_3','myYacc3.py',359),
  ('direct_declarator -> direct_declarator ( parameter_list )','direct_declarator',4,'p_direct_declarator_6','myYacc3.py',367),
  ('direct_declarator -> direct_declarator ( identifier_list_orempty )','direct_declarator',4,'p_direct_declarator_6','myYacc3.py',368),
  ('external_declaration -> function_definition','external_declaration',1,'p_external_declaration_1','myYacc3.py',376),
  ('external_declaration -> declaration','external_declaration',1,'p_external_declaration_2','myYacc3.py',381),
  ('expression -> assignment_expression','expression',1,'p_expression','myYacc3.py',388),
  ('expression -> expression , assignment_expression','expression',3,'p_expression','myYacc3.py',389),
  ('expression_statement -> expression_orempty ;','expression_statement',2,'p_expression_statement','myYacc3.py',401),
  ('function_definition -> declaration_specifiers declarator declaration_list_orempty compound_statement','function_definition',4,'p_function_definition_2','myYacc3.py',408),
  ('parameter_list -> parameter_declaration','parameter_list',1,'p_parameter_list','myYacc3.py',443),
  ('parameter_list -> parameter_list , parameter_declaration','parameter_list',3,'p_parameter_list','myYacc3.py',444),
  ('parameter_declaration -> declaration_specifiers declarator','parameter_declaration',2,'p_parameter_declaration_1','myYacc3.py',453),
  ('postfix_expression -> primary_expression','postfix_expression',1,'p_postfix_expression_1','myYacc3.py',488),
  ('postfix_expression -> postfix_expression [ expression ]','postfix_expression',4,'p_postfix_expression_2','myYacc3.py',492),
  ('postfix_expression -> postfix_expression ( argument_expression_list )','postfix_expression',4,'p_postfix_expression_3','myYacc3.py',498),
  ('postfix_expression -> postfix_expression ( )','postfix_expression',3,'p_postfix_expression_3','myYacc3.py',499),
  ('postfix_expression -> postfix_expression PTR_OP identifier','postfix_expression',3,'p_postfix_expression_4','myYacc3.py',508),
  ('primary_expression -> identifier','primary_expression',1,'p_primary_expression_1','myYacc3.py',516),
  ('primary_expression -> constant','primary_expression',1,'p_primary_expression_2','myYacc3.py',520),
  ('primary_expression -> unified_string_literal','primary_expression',1,'p_primary_expression_3','myYacc3.py',524),
  ('primary_expression -> ( expression )','primary_expression',3,'p_primary_expression_4','myYacc3.py',529),
  ('selection_statement -> IF ( expression ) statement','selection_statement',5,'p_selection_statement_1','myYacc3.py',533),
  ('selection_statement -> IF ( expression ) statement ELSE statement','selection_statement',7,'p_selection_statement_2','myYacc3.py',538),
  ('iteration_statement -> WHILE ( expression ) statement','iteration_statement',5,'p_iteration_statement_1','myYacc3.py',544),
  ('statement -> compound_statement','statement',1,'p_statement','myYacc3.py',549),
  ('statement -> selection_statement','statement',1,'p_statement','myYacc3.py',550),
  ('statement -> expression_statement','statement',1,'p_statement','myYacc3.py',551),
  ('statement -> iteration_statement','statement',1,'p_statement','myYacc3.py',552),
  ('statement -> jump_statement','statement',1,'p_statement','myYacc3.py',553),
  ('struct_specifier -> STRUCT identifier','struct_specifier',2,'p_struct_specifier_1','myYacc3.py',558),
  ('struct_specifier -> STRUCT { struct_declaration_list }','struct_specifier',4,'p_struct_specifier_2','myYacc3.py',565),
  ('initializer_list_orempty -> empty','initializer_list_orempty',1,'p_initializer_list_orempty','myYacc3.py',572),
  ('initializer_list_orempty -> initializer_list','initializer_list_orempty',1,'p_initializer_list_orempty','myYacc3.py',573),
  ('struct_specifier -> STRUCT identifier { struct_declaration_list }','struct_specifier',5,'p_struct_specifier_3','myYacc3.py',577),
  ('struct_declaration_list -> struct_declaration','struct_declaration_list',1,'p_struct_declaration_list','myYacc3.py',586),
  ('struct_declaration_list -> struct_declaration_list struct_declaration','struct_declaration_list',2,'p_struct_declaration_list','myYacc3.py',587),
  ('struct_declaration -> specifier_qualifier_list struct_declarator_list ;','struct_declaration',3,'p_struct_declaration','myYacc3.py',595),
  ('struct_declarator_list -> declarator','struct_declarator_list',1,'p_struct_declarator_list','myYacc3.py',622),
  ('struct_declarator_list -> struct_declarator_list , declarator','struct_declarator_list',3,'p_struct_declarator_list','myYacc3.py',623),
  ('pointer -> *','pointer',1,'p_pointer','myYacc3.py',629),
  ('pointer -> * pointer','pointer',2,'p_pointer','myYacc3.py',630),
  ('unary_operator -> &','unary_operator',1,'p_unary_operator','myYacc3.py',645),
  ('unary_operator -> *','unary_operator',1,'p_unary_operator','myYacc3.py',646),
  ('unary_operator -> +','unary_operator',1,'p_unary_operator','myYacc3.py',647),
  ('unary_operator -> -','unary_operator',1,'p_unary_operator','myYacc3.py',648),
  ('unary_operator -> ~','unary_operator',1,'p_unary_operator','myYacc3.py',649),
  ('unary_operator -> !','unary_operator',1,'p_unary_operator','myYacc3.py',650),
  ('unary_expression -> postfix_expression','unary_expression',1,'p_unary_expression_1','myYacc3.py',654),
  ('unary_expression -> unary_operator cast_expression','unary_expression',2,'p_unary_expression_2','myYacc3.py',658),
  ('unified_string_literal -> STRING_CONSTANT','unified_string_literal',1,'p_unified_string_literal','myYacc3.py',664),
  ('unified_string_literal -> unified_string_literal STRING_CONSTANT','unified_string_literal',2,'p_unified_string_literal','myYacc3.py',665),
  ('binary_expression -> cast_expression','binary_expression',1,'p_binary_expression','myYacc3.py',675),
  ('binary_expression -> binary_expression * binary_expression','binary_expression',3,'p_binary_expression','myYacc3.py',676),
  ('binary_expression -> binary_expression / binary_expression','binary_expression',3,'p_binary_expression','myYacc3.py',677),
  ('binary_expression -> binary_expression % binary_expression','binary_expression',3,'p_binary_expression','myYacc3.py',678),
  ('binary_expression -> binary_expression + binary_expression','binary_expression',3,'p_binary_expression','myYacc3.py',679),
  ('binary_expression -> binary_expression - binary_expression','binary_expression',3,'p_binary_expression','myYacc3.py',680),
  ('binary_expression -> binary_expression RIGHT_OP binary_expression','binary_expression',3,'p_binary_expression','myYacc3.py',681),
  ('binary_expression -> binary_expression LEFT_OP binary_expression','binary_expression',3,'p_binary_expression','myYacc3.py',682),
  ('binary_expression -> binary_expression < binary_expression','binary_expression',3,'p_binary_expression','myYacc3.py',683),
  ('binary_expression -> binary_expression LTE binary_expression','binary_expression',3,'p_binary_expression','myYacc3.py',684),
  ('binary_expression -> binary_expression GTE binary_expression','binary_expression',3,'p_binary_expression','myYacc3.py',685),
  ('binary_expression -> binary_expression > binary_expression','binary_expression',3,'p_binary_expression','myYacc3.py',686),
  ('binary_expression -> binary_expression EQ_OP binary_expression','binary_expression',3,'p_binary_expression','myYacc3.py',687),
  ('binary_expression -> binary_expression NEQ_OP binary_expression','binary_expression',3,'p_binary_expression','myYacc3.py',688),
  ('binary_expression -> binary_expression & binary_expression','binary_expression',3,'p_binary_expression','myYacc3.py',689),
  ('binary_expression -> binary_expression | binary_expression','binary_expression',3,'p_binary_expression','myYacc3.py',690),
  ('binary_expression -> binary_expression ^ binary_expression','binary_expression',3,'p_binary_expression','myYacc3.py',691),
  ('binary_expression -> binary_expression AND_OP binary_expression','binary_expression',3,'p_binary_expression','myYacc3.py',692),
  ('binary_expression -> binary_expression OR_OP binary_expression','binary_expression',3,'p_binary_expression','myYacc3.py',693),
  ('cast_expression -> unary_expression','cast_expression',1,'p_cast_expression_1','myYacc3.py',702),
  ('cpp_advanced -> ASM','cpp_advanced',1,'p_cpp_advanced','myYacc3.py',710),
  ('cpp_advanced -> BUILT_IN_FUNCTION','cpp_advanced',1,'p_cpp_advanced','myYacc3.py',711),
  ('cpp_advanced -> CATCH','cpp_advanced',1,'p_cpp_advanced','myYacc3.py',712),
  ('cpp_advanced -> CLASS','cpp_advanced',1,'p_cpp_advanced','myYacc3.py',713),
  ('cpp_advanced -> COMMENT1','cpp_advanced',1,'p_cpp_advanced','myYacc3.py',714),
  ('cpp_advanced -> COMMENT2','cpp_advanced',1,'p_cpp_advanced','myYacc3.py',715),
  ('cpp_advanced -> CONST_CAST','cpp_advanced',1,'p_cpp_advanced','myYacc3.py',716),
  ('cpp_advanced -> DELETE','cpp_advanced',1,'p_cpp_advanced','myYacc3.py',717),
  ('cpp_advanced -> DYNAMIC_CAST','cpp_advanced',1,'p_cpp_advanced','myYacc3.py',718),
  ('cpp_advanced -> EXPLICIT','cpp_advanced',1,'p_cpp_advanced','myYacc3.py',719),
  ('cpp_advanced -> EXPORT','cpp_advanced',1,'p_cpp_advanced','myYacc3.py',720),
  ('cpp_advanced -> FRIEND','cpp_advanced',1,'p_cpp_advanced','myYacc3.py',721),
  ('cpp_advanced -> MUTABLE','cpp_advanced',1,'p_cpp_advanced','myYacc3.py',722),
  ('cpp_advanced -> NAMESPACE','cpp_advanced',1,'p_cpp_advanced','myYacc3.py',723),
  ('cpp_advanced -> NEW','cpp_advanced',1,'p_cpp_advanced','myYacc3.py',724),
  ('cpp_advanced -> OPERATOR','cpp_advanced',1,'p_cpp_advanced','myYacc3.py',725),
  ('cpp_advanced -> PRIVATE','cpp_advanced',1,'p_cpp_advanced','myYacc3.py',726),
  ('cpp_advanced -> PROTECTED','cpp_advanced',1,'p_cpp_advanced','myYacc3.py',727),
  ('cpp_advanced -> PUBLIC','cpp_advanced',1,'p_cpp_advanced','myYacc3.py',728),
  ('cpp_advanced -> REINTERPRET_CAST','cpp_advanced',1,'p_cpp_advanced','myYacc3.py',729),
  ('cpp_advanced -> STATIC_CAST','cpp_advanced',1,'p_cpp_advanced','myYacc3.py',730),
  ('cpp_advanced -> TEMPLATE','cpp_advanced',1,'p_cpp_advanced','myYacc3.py',731),
  ('cpp_advanced -> THIS','cpp_advanced',1,'p_cpp_advanced','myYacc3.py',732),
  ('cpp_advanced -> THROW','cpp_advanced',1,'p_cpp_advanced','myYacc3.py',733),
  ('cpp_advanced -> TRY','cpp_advanced',1,'p_cpp_advanced','myYacc3.py',734),
  ('cpp_advanced -> TYPEID','cpp_advanced',1,'p_cpp_advanced','myYacc3.py',735),
  ('cpp_advanced -> TYPENAME','cpp_advanced',1,'p_cpp_advanced','myYacc3.py',736),
  ('cpp_advanced -> USING','cpp_advanced',1,'p_cpp_advanced','myYacc3.py',737),
  ('cpp_advanced -> VIRTUAL','cpp_advanced',1,'p_cpp_advanced','myYacc3.py',738),
  ('cpp_advanced -> AUTO','cpp_advanced',1,'p_cpp_advanced','myYacc3.py',739),
  ('cpp_advanced -> CONST','cpp_advanced',1,'p_cpp_advanced','myYacc3.py',740),
  ('cpp_advanced -> DO','cpp_advanced',1,'p_cpp_advanced','myYacc3.py',741),
  ('cpp_advanced -> ENUM','cpp_advanced',1,'p_cpp_advanced','myYacc3.py',742),
  ('cpp_advanced -> EXTERN','cpp_advanced',1,'p_cpp_advanced','myYacc3.py',743),
  ('cpp_advanced -> FOR','cpp_advanced',1,'p_cpp_advanced','myYacc3.py',744),
  ('cpp_advanced -> STATIC','cpp_advanced',1,'p_cpp_advanced','myYacc3.py',745),
  ('cpp_advanced -> SIZEOF','cpp_advanced',1,'p_cpp_advanced','myYacc3.py',746),
  ('cpp_advanced -> UNION','cpp_advanced',1,'p_cpp_advanced','myYacc3.py',747),
  ('cpp_advanced -> VOLATILE','cpp_advanced',1,'p_cpp_advanced','myYacc3.py',748),
  ('cpp_advanced -> RESTRICT','cpp_advanced',1,'p_cpp_advanced','myYacc3.py',749),
  ('cpp_advanced -> REGISTER','cpp_advanced',1,'p_cpp_advanced','myYacc3.py',750),
  ('cpp_advanced -> INLINE','cpp_advanced',1,'p_cpp_advanced','myYacc3.py',751),
  ('cpp_advanced -> GOTO','cpp_advanced',1,'p_cpp_advanced','myYacc3.py',752),
  ('cpp_advanced -> TYPEDEF','cpp_advanced',1,'p_cpp_advanced','myYacc3.py',753),
  ('cpp_advanced -> SWITCH','cpp_advanced',1,'p_cpp_advanced','myYacc3.py',754),
  ('cpp_advanced -> CASE','cpp_advanced',1,'p_cpp_advanced','myYacc3.py',755),
  ('cpp_advanced -> INC_OP','cpp_advanced',1,'p_cpp_advanced','myYacc3.py',756),
  ('cpp_advanced -> DEC_OP','cpp_advanced',1,'p_cpp_advanced','myYacc3.py',757),
  ('cpp_advanced -> DEFAULT','cpp_advanced',1,'p_cpp_advanced','myYacc3.py',758),
]
